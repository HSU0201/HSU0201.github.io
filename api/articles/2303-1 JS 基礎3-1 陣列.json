{"title":"JavaScript 基礎 - 第3天","uid":"d6326a002590bf2cbb1500ce76554880","slug":"2303-1 JS 基礎3-1 陣列","date":"2023-03-19T16:00:00.000Z","updated":"2023-04-13T09:36:02.401Z","comments":true,"path":"api/articles/2303-1 JS 基礎3-1 陣列.json","keywords":null,"cover":null,"content":"<h2 id=\"陣列\"><a href=\"#陣列\" class=\"headerlink\" title=\"陣列\"></a>陣列</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>知道什麼是陣列及其應用的場景，掌握陣列聲明及訪問的語法。</p></blockquote>\n<h3 id=\"陣列是什麼？\"><a href=\"#陣列是什麼？\" class=\"headerlink\" title=\"陣列是什麼？\"></a>陣列是什麼？</h3><p><strong>陣列：</strong>(Array)是一種可以按順序保存資料的資料類型</p>\n<p><strong>使用場景：</strong>如果有多個資料可以用陣列保存起來，然後放到一個變數中，管理非常方便</p>\n<h3 id=\"陣列的基本使用\"><a href=\"#陣列的基本使用\" class=\"headerlink\" title=\"陣列的基本使用\"></a>陣列的基本使用</h3><h4 id=\"定義陣列和陣列單元\"><a href=\"#定義陣列和陣列單元\" class=\"headerlink\" title=\"定義陣列和陣列單元\"></a>定義陣列和陣列單元</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 1. 語法，使用 [] 來定義一個空陣列\n  &#x2F;&#x2F; 定義一個空陣列，然後賦值給變數 classes\n  &#x2F;&#x2F; let classes &#x3D; [];\n\n  &#x2F;&#x2F; 2. 定義非空陣列\n  let classes &#x3D; [&#39;小明&#39;, &#39;小剛&#39;, &#39;小紅&#39;, &#39;小麗&#39;, &#39;小米&#39;]\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>通過 <code>[]</code> 定義陣列，資料中可以存放真正的資料，如小明、小剛、小紅等這些都是陣列中的資料，我們這些資料稱為陣列單元，陣列單元之間使用英文逗號分隔。</p>\n<h4 id=\"訪問陣列和陣列索引\"><a href=\"#訪問陣列和陣列索引\" class=\"headerlink\" title=\"訪問陣列和陣列索引\"></a>訪問陣列和陣列索引</h4><p>使用陣列存放資料並不是最終目的，關鍵是能夠隨時的訪問到陣列中的資料（單元）。其實 JavaScript 為陣列中的每一個資料單元都編了號，通過資料單元在陣列中的編號便可以輕鬆訪問到陣列中的資料單元了。</p>\n<p>我們將資料單元在陣列中的編號稱為索引值，也有人稱其為下標。</p>\n<p>索引值實際是按著資料單元在陣列中的位置依次排列的，注意是從<code> 0</code> 開始的</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  let classes &#x3D; [&#39;小明&#39;, &#39;小剛&#39;, &#39;小紅&#39;, &#39;小麗&#39;, &#39;小米&#39;]\n  \n  &#x2F;&#x2F; 1. 訪問陣列，語法格式為：變數名[索引值]\n  document.write(classes[0]) &#x2F;&#x2F; 結果為：小明\n  document.write(classes[1]) &#x2F;&#x2F; 結果為：小剛\n  document.write(classes[4]) &#x2F;&#x2F; 結果為：小米\n  \n  &#x2F;&#x2F; 2. 通過索引值還可以為陣列單重新賦值\n  document.write(classes[3]) &#x2F;&#x2F; 結果為：小麗\n  &#x2F;&#x2F; 重新為索引值為 3 的單元賦值\n  classes[3] &#x3D; &#39;小小麗&#39;\n  document.wirte(classes[3]); &#x2F;&#x2F; 結果為： 小小麗\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"資料單元數值型別\"><a href=\"#資料單元數值型別\" class=\"headerlink\" title=\"資料單元數值型別\"></a>資料單元數值型別</h4><p>陣列做為資料的集合，它的單元值可以是任意資料類型</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 6. 陣列單數值型別可以是任意資料類型\n\n  &#x2F;&#x2F; a) 陣列單元值的類型為字元類型\n  let list &#x3D; [&#39;HTML&#39;, &#39;CSS&#39;, &#39;JavaScript&#39;]\n  &#x2F;&#x2F; b) 陣列單元值的類型為數值類型\n  let scores &#x3D; [78, 84, 70, 62, 75]\n  &#x2F;&#x2F; c) 混合多種類型\n  let mixin &#x3D; [true, 1, false, &#39;hello&#39;]\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"陣列長度屬性\"><a href=\"#陣列長度屬性\" class=\"headerlink\" title=\"陣列長度屬性\"></a>陣列長度屬性</h4><p>重申一次，陣列在 JavaScript 中並不是新的資料類型，它屬於物件類型。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 定義一個陣列\n  let arr &#x3D; [&#39;html&#39;, &#39;css&#39;, &#39;javascript&#39;]\n  &#x2F;&#x2F; 陣列對應著一個 length 屬性，它的含義是獲取陣列的長度\n  console.log(arr.length) &#x2F;&#x2F; 3\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"運算元組\"><a href=\"#運算元組\" class=\"headerlink\" title=\"運算元組\"></a>運算元組</h3><p>陣列做為物件資料類型，不但有 <code>length</code> 屬性可以使用，還提供了許多方法：</p>\n<ol>\n<li>push 動態向陣列的尾部添加一個單元</li>\n<li>unshit 動態向陣列頭部添加一個單元</li>\n<li>pop 刪除最後一個單元</li>\n<li>shift 刪除第一個單元</li>\n<li>splice 動態刪除任意單元</li>\n</ol>\n<p>使用以上4個方法時，都是直接在原陣列上進行操作，即成功調任何一個方法，原陣列都跟著發生相應的改變。並且在添加或刪除單元時 <code>length</code> 並不會發生錯亂。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 定義一個陣列\n  let arr &#x3D; [&#39;html&#39;, &#39;css&#39;, &#39;javascript&#39;]\n\n  &#x2F;&#x2F; 1. push 動態向陣列的尾部添加一個單元\n  arr.push(&#39;Nodejs&#39;)\n  console.log(arr)\n  arr.push(&#39;Vue&#39;)\n\n  &#x2F;&#x2F; 2. unshit 動態向陣列頭部添加一個單元\n  arr.unshift(&#39;VS Code&#39;)\n  console.log(arr)\n\n  &#x2F;&#x2F; 3. splice 動態刪除任意單元\n  arr.splice(2, 1) &#x2F;&#x2F; 從索引值為2的位置開始刪除1個單元\n  console.log(arr)\n\n  &#x2F;&#x2F; 4. pop 刪除最後一個單元\n  arr.pop()\n  console.log(arr)\n\n  &#x2F;&#x2F; 5. shift 刪除第一個單元\n  arr.shift()\n  console.log(arr)\n&lt;&#x2F;script&gt;</code></pre>\n\n\n","feature":null,"text":"陣列 知道什麼是陣列及其應用的場景，掌握陣列聲明及訪問的語法。 陣列是什麼？陣列：(Array)是一種可以按順序保存資料的資料類型 使用場景：如果有多個資料可以用陣列保存起來，然後放到一個變數中，管理非常方便 陣列的基本使用定義陣列和陣列單元&lt;script&gt; &#x2...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%A3%E5%88%97\"><span class=\"toc-text\">陣列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%99%A3%E5%88%97%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F\"><span class=\"toc-text\">陣列是什麼？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%99%A3%E5%88%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">陣列的基本使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E7%BE%A9%E9%99%A3%E5%88%97%E5%92%8C%E9%99%A3%E5%88%97%E5%96%AE%E5%85%83\"><span class=\"toc-text\">定義陣列和陣列單元</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A8%AA%E5%95%8F%E9%99%A3%E5%88%97%E5%92%8C%E9%99%A3%E5%88%97%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">訪問陣列和陣列索引</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B3%87%E6%96%99%E5%96%AE%E5%85%83%E6%95%B8%E5%80%BC%E5%9E%8B%E5%88%A5\"><span class=\"toc-text\">資料單元數值型別</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%99%A3%E5%88%97%E9%95%B7%E5%BA%A6%E5%B1%AC%E6%80%A7\"><span class=\"toc-text\">陣列長度屬性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%8B%E7%AE%97%E5%85%83%E7%B5%84\"><span class=\"toc-text\">運算元組</span></a></li></ol></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"./source/img/1.jpg","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript 基礎 - 第3天","uid":"d6326a002590bf2cbb1500ce76554880","slug":"2303-1 JS 基礎3 for語句","date":"2023-03-19T16:00:00.000Z","updated":"2023-04-13T09:35:40.731Z","comments":true,"path":"api/articles/2303-1 JS 基礎3 for語句.json","keywords":null,"cover":null,"text":"if 多分支語句和 switch的區別： 共同點 都能實現多分支選擇， 多選1 大部分情況下可以互換 區別： switch…case語句通常處理case為比較確定值的情況，而if…else…語句更加靈活，通常用於範圍判斷(大於，等於某個範圍)。 switch 語句進行判斷後直接執...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"./source/img/1.jpg","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"JavaScript 基礎 - 第2天","uid":"119b4406e4e9c28d94cef591716ce0ed","slug":"2303-1 JS 基礎2 運算子&語句","date":"2023-03-18T16:00:00.000Z","updated":"2023-03-25T02:06:36.479Z","comments":true,"path":"api/articles/2303-1 JS 基礎2 運算子&語句.json","keywords":null,"cover":null,"text":" 理解什麼是流程控制，知道條件控制的種類並掌握其對應的語法規則，具備利用迴圈編寫簡易ATM取款機程式能力 運算子 語句 綜合案例 運算子算術運算子數字是用來計算的，比如：乘法 * 、除法 &#x2F; 、加法 + 、減法 - 等等，所以經常和算術運算子一起。 算術運算子：也叫數學...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"10 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"./source/img/1.jpg","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}