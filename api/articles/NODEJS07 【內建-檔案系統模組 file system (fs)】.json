{"title":"nodejs 開發環境安裝","uid":"080396e1adb14ff1690d9b335f3a1888","slug":"NODEJS07 【內建-檔案系統模組 file system (fs)】","date":"2024-01-05T11:30:05.000Z","updated":"2024-02-14T09:04:00.246Z","comments":true,"path":"api/articles/NODEJS07 【內建-檔案系統模組 file system (fs)】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/blog-Article-Cover/3050a56ba33ff757c6fa4872a4a672f2.jpg?raw=true","content":"<h1 id=\"07-【內建-檔案系統模組-file-system-fs-】\"><a href=\"#07-【內建-檔案系統模組-file-system-fs-】\" class=\"headerlink\" title=\"07 【內建-檔案系統模組 file system (fs)】\"></a>07 【內建-檔案系統模組 file system (fs)】</h1><p>fs 全稱為 file system ，稱之為 文件系統 ，是 Node.js 中的 內建模組 ，可以對計算機中的磁盤進行操作。</p>\n<h2 id=\"1-Node-js-中的同步和異步的區別\"><a href=\"#1-Node-js-中的同步和異步的區別\" class=\"headerlink\" title=\"1. Node.js 中的同步和異步的區別\"></a>1. Node.js 中的同步和異步的區別</h2><p>fs 模組對文件的幾乎所有操作都有同步和異步兩種形式。例如：readFile() 和 readFileSync()。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>區別：</p>\n<ul>\n<li>同步執行會阻塞代碼的執行，異步則不會。</li>\n<li>異步執行會將 讀取任務 下達到任務隊列，直到任務執行完成才會回調。</li>\n<li>異常處理方面：同步必須使用 try catch 方式，異步可以通過回調函式的第一個參數。【重要】</li>\n</ul></blockquote>\n<h2 id=\"2-文件寫入\"><a href=\"#2-文件寫入\" class=\"headerlink\" title=\"2. 文件寫入\"></a>2. 文件寫入</h2><p>備註：以下代碼，如果文件不存在，則創建文件；如果文件存在，則覆蓋文件內容；</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>writeFile</td>\n<td>異步寫入</td>\n</tr>\n<tr>\n<td>writeFileSync</td>\n<td>同步寫入</td>\n</tr>\n<tr>\n<td>appendFile &#x2F; appendFileSync</td>\n<td>(異步&#x2F;同步)追加寫入</td>\n</tr>\n<tr>\n<td>createWriteStream</td>\n<td>流式寫入</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-異步寫入\"><a href=\"#2-1-異步寫入\" class=\"headerlink\" title=\"2.1 異步寫入\"></a>2.1 異步寫入</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 語法</span></span><br><span class=\"line\">fs.<span class=\"title function_\">writeFile</span>(file, data[, options], callback)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值：undefined</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>file 文件名</li>\n<li>data 待寫入的資料</li>\n<li>options 選項設定 （可選）</li>\n<li>callback 寫入執行的函數</li>\n</ul>\n<p>以下為示例，會比較兩種程式碼不同的模組匯入系統：CommonJS 和 ESM（ECMAScript 模組）。目前主流都使用 ESM 的方式，因為它提供了更先進的模組系統和更好的功能。在往後的筆記中，會傾向於使用 ESM 的方式來撰寫程式碼。值得一題的是兩者方式的差距並不大，請記住在使用 ESM 時，通常需要指定 JavaScript 檔案的正確擴展名（例如 .js、.mjs）</p>\n<p><a href=\"https://code.zuifengyun.com/2022/01/2448.html#ESM%E8%AF%AD%E6%B3%95\">擴展閱讀-細說 Javascript 中的 ESM 及其與 CommonJS 區別</a></p>\n<p><strong>CommonJS 的寫法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// require 是 Node.js 環境中的 &#x27;全局&#x27; 變量，用來匯入模組</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> file1 = <span class=\"string\">&quot;./測試寫入.txt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> content1 = <span class=\"string\">&quot;松下問童子，言師採藥去&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 將 content1 寫入到當前資料夾下的 file1 文件中</span></span><br><span class=\"line\">fs.<span class=\"title function_\">writeFile</span>(file1, content1, <span class=\"keyword\">function</span> (<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 當寫入成功或失敗時會執行的函數。函數中會傳入一個參數，成功時會是 null，失敗時會是個物敗物件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1 寫入失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2 寫入成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;3 測試用字串&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>ESM 的寫法</strong></p>\n<figure class=\"highlight mjs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; writeFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> file1 = <span class=\"string\">&quot;./測試寫入ESM.txt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> content1 = <span class=\"string\">&quot;松下問童子，言師採藥去&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">writeFile</span>(file1, content1, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1 寫入失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2 寫入成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;3 測試用字串&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在以上程式碼當中，我們原先期望程式碼會撰寫順序就是執行順序，但實際的結果如下，程式並沒有讓<strong>主線等待支線有回應後再繼續進行</strong>，而這樣的行為就是非<strong>同步的概念</strong>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 期望的結果</span></span><br><span class=\"line\">2 寫入成功</span><br><span class=\"line\">3 測試用字串</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 實際結果</span></span><br><span class=\"line\">3 測試用字串</span><br><span class=\"line\">2 寫入成功</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-同步寫入\"><a href=\"#2-2-同步寫入\" class=\"headerlink\" title=\"2.2 同步寫入\"></a>2.2 同步寫入</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 語法</span></span><br><span class=\"line\">fs.<span class=\"title function_\">writeFileSync</span>(file, data[, options])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值：undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 注意：沒有 callback 參數</span></span><br></pre></td></tr></table></figure>\n\n<p>想讓剛剛的<code>fs.writeFile()</code>整個寫入程序完成後，再往下進行主線的工作，那就要使用同步寫入<code>fs.writeFileSync()</code>的方法</p>\n<p>以效率來說的話，非同步會較佳；但以理解的容易程度來看的話，同步寫入的概念會較容易理解</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; writeFileSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> file2 = <span class=\"string\">&quot;./測試寫入2ESM.txt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> content1 = <span class=\"string\">&quot;松下問童子，言師採藥去&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">writeFileSync</span>(file2, content1);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2 寫入成功&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1 寫入失敗&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;3 測試用字串&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 實際結果</span></span><br><span class=\"line\">2 寫入成功</span><br><span class=\"line\">3 測試用字串</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在 Node.js 中，磁碟操作是由其他「線程」完成的，而其處理結果有兩種模式：</p>\n<ul>\n<li><p><strong>「同步處理」</strong>指的是 JavaScript 的主線程<strong>會等待</strong>其他線程的執行結果，然後<strong>再繼續執行主線程</strong>的程式碼。這樣的方式效率較低。</p>\n</li>\n<li><p><strong>「異步處理」</strong>則是指 JavaScript 的主線程<strong>不會等待</strong>其他線程的執行結果，而是<strong>直接執行後續的主線程</strong>程式碼。這樣可以提高效率。</p>\n</li>\n</ul></blockquote>\n<h3 id=\"2-3-appendFile-appendFileSync-附加內容\"><a href=\"#2-3-appendFile-appendFileSync-附加內容\" class=\"headerlink\" title=\"2.3 appendFile &#x2F; appendFileSync 附加內容\"></a>2.3 appendFile &#x2F; appendFileSync 附加內容</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 語法</span></span><br><span class=\"line\">fs.<span class=\"title function_\">appendFile</span>(file, data[, options], callback)</span><br><span class=\"line\">fs.<span class=\"title function_\">appendFileSync</span>(file, data[, options])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值：皆為undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>想在既存的檔案中，在原檔案的內容後增加新內容上去，就要使用 appendFile()這個方法</p>\n<figure class=\"highlight mjs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; appendFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> file1 = <span class=\"string\">&quot;./測試寫入ESM.txt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> content1 = <span class=\"string\">&quot;\\r\\n只在此山中，雲深不知處。&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">appendFile</span>(file1, content1, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;增加失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;增加成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在內容中要換行，要使用\\r\\n</p>\n<p><strong>利用 fs.writeFile()，進行附加檔案</strong></p>\n<figure class=\"highlight mjs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; writeFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs/promises&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> file1 = <span class=\"string\">&quot;./測試寫入.txt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> content1 = <span class=\"string\">&quot;松下問童子，言師採藥去&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">writeFile</span>(file1, content1, &#123; <span class=\"attr\">flag</span>: <span class=\"string\">&quot;a&quot;</span> &#125;);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2 寫入成功&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1 寫入失敗&quot;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>也可以在 fs.writeFile()，將第三個參數中的 flag 屬性設置成 a，進行附加檔案</li>\n<li>而 log 的記錄其實也應該是要不斷的在同一個檔中去附加內容，而不是在同一個檔案中覆寫</li>\n<li>因此就會用 appendFile 或 writeFile 加參數 flag a 的方法去記錄 log</li>\n</ul>\n<h3 id=\"2-4-createWriteStream-串流式的寫入方法\"><a href=\"#2-4-createWriteStream-串流式的寫入方法\" class=\"headerlink\" title=\"2.4 createWriteStream 串流式的寫入方法\"></a>2.4 createWriteStream 串流式的寫入方法</h3><p>writeFile 的寫入檔案，是會先與檔案建立一次性的通道，寫入後就斷開連結，但有時候可能會需要寫入大檔案，這時候可能就會透過網路陸續傳入部分檔案。如果是使用了 wirteFile，那第一次寫入完後就會斷開連結，無法繼續寫入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 語法</span></span><br><span class=\"line\">fs.<span class=\"title function_\">createWriteStream</span>(path[, options])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值：Object</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>path 文件路徑</li>\n</ul>\n<figure class=\"highlight mjs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createWriteStream &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ws = <span class=\"title function_\">createWriteStream</span>(<span class=\"string\">&quot;./測試連續寫入.txt&quot;</span>);</span><br><span class=\"line\">ws.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;finish&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;全部寫入完成&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//寫入資料到流</span></span><br><span class=\"line\">ws.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;葡萄美酒夜光杯，\\r\\n&quot;</span>);</span><br><span class=\"line\">ws.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;欲飲琵琶馬上催。\\r\\n&quot;</span>);</span><br><span class=\"line\">ws.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;醉臥沙場君莫笑，\\r\\n&quot;</span>);</span><br><span class=\"line\">ws.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;古來征戰幾人回。\\r\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//關閉寫入流，表明已沒有資料要被寫入可寫流</span></span><br><span class=\"line\">ws.<span class=\"title function_\">end</span>();</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>程序打開一個文件是需要消耗資源的，串流式的寫入方法可以減少打開關閉文件的次數。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>串流式的寫入方法適用於 大文件寫入或者頻繁寫入的場景，writeFile 適合於 寫入頻率較低的場景</p></blockquote>\n<h3 id=\"2-5-寫入文件的場景\"><a href=\"#2-5-寫入文件的場景\" class=\"headerlink\" title=\"2.5 寫入文件的場景\"></a>2.5 寫入文件的場景</h3><p>在日常生活和開發過程中，檔案寫入是一個非常常見的行為：</p>\n<ol>\n<li>透過瀏覽器點擊檔案下載時，瀏覽器會將檔案寫入硬碟的暫存檔，完成後會回復正常的檔名與副檔名。</li>\n<li>安裝軟體時，系統會將需要的檔案從安裝檔中寫入硬碟，並在系統檔中寫入使用路徑。</li>\n<li>使用 Git 時，初始化 Git 會建立 .git 資料夾，並寫入各種需求檔。</li>\n<li>使用 Git 提交版本時，會在 .git 中寫入版本內容與狀態。</li>\n<li>使用 VSCode 編寫程式時，不斷建立檔案，並將程式內容記錄到檔案中。</li>\n<li>錄影行為透過錄影器材將影像訊息寫入記錄裝置，然後透過轉碼程式轉成常見的格式。</li>\n</ol>\n<p>因此，在開發過程中，需要持久化儲存資料，可以隨時使用檔案寫入操作。</p>\n<h2 id=\"3-文件讀取\"><a href=\"#3-文件讀取\" class=\"headerlink\" title=\"3. 文件讀取\"></a>3. 文件讀取</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件讀取顧名思義，就是通過程序從文件中取出其中的資料，我們可以使用如下幾種方式：</p></blockquote>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>readFile</td>\n<td>異步讀取</td>\n</tr>\n<tr>\n<td>readFileSync</td>\n<td>同步讀取</td>\n</tr>\n<tr>\n<td>createReadStream</td>\n<td>流式讀取</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-1-readFile-異步讀取\"><a href=\"#3-1-readFile-異步讀取\" class=\"headerlink\" title=\"3.1 readFile 異步讀取\"></a>3.1 readFile 異步讀取</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 語法</span></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(path[, options], callback)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值：undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>先讀取剛剛寫入的「測試連續寫入.txt」</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;./測試連續寫入.txt&quot;</span>, <span class=\"function\">(<span class=\"params\">error, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;讀取失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>輸出如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">葡萄美酒夜光杯，</span><br><span class=\"line\">欲飲琵琶馬上催。</span><br><span class=\"line\">醉臥沙場君莫笑，</span><br><span class=\"line\">古來征戰幾人回。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-readFileSync-同步讀取\"><a href=\"#3-2-readFileSync-同步讀取\" class=\"headerlink\" title=\"3.2 readFileSync 同步讀取\"></a>3.2 readFileSync 同步讀取</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 語法</span></span><br><span class=\"line\">fs.<span class=\"title function_\">readFileSync</span>(path[, options])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值：string | Buffer</span></span><br></pre></td></tr></table></figure>\n\n<p>先讀取剛剛寫入的「測試連續寫入.txt」</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readFileSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = <span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;./測試連續寫入.txt&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&quot;文件內容: &quot; + data);</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;讀取文件出錯: &quot;</span> + err.<span class=\"property\">message</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>檔案讀取出來的內容是 Buffer，要再用 toString() 轉成內容</li>\n</ul>\n<p>輸出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">葡萄美酒夜光杯，</span><br><span class=\"line\">欲飲琵琶馬上催。</span><br><span class=\"line\">醉臥沙場君莫笑，</span><br><span class=\"line\">古來征戰幾人回。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-createReadStream-串流式讀取\"><a href=\"#3-3-createReadStream-串流式讀取\" class=\"headerlink\" title=\"3.3 createReadStream 串流式讀取\"></a>3.3 createReadStream 串流式讀取</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 語法</span></span><br><span class=\"line\">fs.<span class=\"title function_\">createReadStream</span>(path[, options])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值：Object</span></span><br></pre></td></tr></table></figure>\n\n<p>createReadStream 方法就是將檔案切成好多塊再陸續讀取，在讀取影片檔或是聲音檔時，一次性讀取可能檔案會過大，讀取時間會很久，就會使用這個方法來讀取</p>\n<figure class=\"highlight mjs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createReadStream &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 創建讀取流物件(自行新增一資料夾與檔案)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rs = <span class=\"title function_\">createReadStream</span>(<span class=\"string\">&quot;./video/movie.mp4&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每次取出 64k 資料後執行一次 data 回調</span></span><br><span class=\"line\"><span class=\"comment\">// 綁定一個 data 事件  chunk</span></span><br><span class=\"line\">rs.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"function\">(<span class=\"params\">chunk</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(chunk.<span class=\"property\">length</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 讀取完畢後，執行 end 回調 (可選事件)</span></span><br><span class=\"line\">rs.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;end&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;讀取結束&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果直接 console.log chunk 內容來看，會是一堆 Buffer 內容</p>\n<h3 id=\"3-4-讀取檔案的應用情境\"><a href=\"#3-4-讀取檔案的應用情境\" class=\"headerlink\" title=\"3.4 讀取檔案的應用情境\"></a>3.4 讀取檔案的應用情境</h3><ul>\n<li><strong>執行程式時</strong>，將程式所需要的所有內容從硬碟中讀取進記憶體中，然後再開始去執行</li>\n<li><strong>編輯程式時</strong>，從 VSCode 打開程式檔案，也是從硬碟中把程式內容讀取後，再放進編輯區中呈現</li>\n<li><strong>播放音樂、播放影片或是瀏覽圖片</strong>，也都是由硬碟中讀取內容後再由相對應的顯示方式呈現</li>\n</ul>\n<h2 id=\"4-文件重命名-移動檔案\"><a href=\"#4-文件重命名-移動檔案\" class=\"headerlink\" title=\"4. 文件重命名&#x2F;移動檔案\"></a>4. 文件重命名&#x2F;移動檔案</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 語法</span></span><br><span class=\"line\">fs.<span class=\"title function_\">rename</span>(oldPath, newPath, callback);</span><br><span class=\"line\">fs.<span class=\"title function_\">renameSync</span>(oldPath, newPath);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-1-文件重命名\"><a href=\"#4-1-文件重命名\" class=\"headerlink\" title=\"4.1 文件重命名\"></a>4.1 文件重命名</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; rename &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">rename</span>(<span class=\"string\">&quot;./測試連續寫入.txt&quot;</span>, <span class=\"string\">&quot;./詩.txt&quot;</span>, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;操作失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;操作成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>第一個參數是舊檔名，第二個參數是新檔名，第三個參數是成功失敗時的執行函數</p>\n<h3 id=\"4-2-移動文件檔案\"><a href=\"#4-2-移動文件檔案\" class=\"headerlink\" title=\"4.2 移動文件檔案\"></a>4.2 移動文件檔案</h3><p>移動檔案與重新命名是一樣的指令，只要在第二個參數加上新的路徑即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; rename &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">rename</span>(<span class=\"string\">&quot;./詩.txt&quot;</span>, <span class=\"string\">&quot;./text/詩.txt&quot;</span>, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;操作失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;操作成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意路徑中的檔案夾是要先建立起來的，如果預到不存在的檔案夾會失敗</p></blockquote>\n<h2 id=\"5-文件是否存在\"><a href=\"#5-文件是否存在\" class=\"headerlink\" title=\"5. 文件是否存在\"></a>5. 文件是否存在</h2><p><code>fs.exists()</code>已經是<code>deprecated</code>狀態，現在可以通過下面代碼判斷文件是否存在。</p>\n<p><strong>異步本</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 檢查文件是否存在於當前資料夾中</span></span><br><span class=\"line\">fs.<span class=\"property\">promises</span></span><br><span class=\"line\">  .<span class=\"title function_\">access</span>(<span class=\"string\">&quot;package.json&quot;</span>, fs.<span class=\"property\">constants</span>.<span class=\"property\">F_OK</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;package.json存在於當前資料夾中&quot;</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;package.json不存在於當前資料夾中&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"property\">promises</span></span><br><span class=\"line\">  .<span class=\"title function_\">access</span>(<span class=\"string\">&quot;index.js&quot;</span>, fs.<span class=\"property\">constants</span>.<span class=\"property\">F_OK</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;index.js存在於當前資料夾中&quot;</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;index.js不存在於當前資料夾中&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>fs.access()</code>除了判斷文件是否存在（預設模式），還可以用來判斷文件的權限。</p>\n<p>備忘：<code>fs.constants.F_OK</code>等常數無法獲取（node v6.1，mac 10.11.4 下，<code>fs.constants</code>是<code>undefined</code>）</p>\n<p><strong>同步</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; accessSync, constants &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">accessSync</span>(<span class=\"string\">&quot;etc/passwd&quot;</span>, constants.<span class=\"property\">R_OK</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;can read&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;no access!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-刪除文件\"><a href=\"#6-刪除文件\" class=\"headerlink\" title=\"6. 刪除文件\"></a>6. 刪除文件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 語法</span></span><br><span class=\"line\">fs.<span class=\"title function_\">unlink</span>(path, callback);</span><br><span class=\"line\">fs.<span class=\"title function_\">unlinkSync</span>(path);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// nodes 14.4 版新增</span></span><br><span class=\"line\">fs.<span class=\"title function_\">rm</span>(path, callback);</span><br><span class=\"line\">fs.<span class=\"title function_\">rmSync</span>(path);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-異步版本\"><a href=\"#5-1-異步版本\" class=\"headerlink\" title=\"5.1 異步版本\"></a>5.1 異步版本</h3><p><strong>unlinkz 方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; unlink &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">unlink</span>(<span class=\"string\">&quot;./測試寫入.txt&quot;</span>, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>rm 方法</strong></p>\n<p>除了 <code>unlink</code> 外，在 nodes 14.4 版後也加了一個指令叫 <code>rm</code>，應該是 remove 的縮寫，也是可以用來刪除檔案，使用方法與 <code>unlink</code> 一模一樣。</p>\n<figure class=\"highlight mjs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; rm &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">rm</span>(<span class=\"string\">&quot;./測試寫入ESM.txt&quot;</span>, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-同步版本\"><a href=\"#5-2-同步版本\" class=\"headerlink\" title=\"5.2 同步版本\"></a>5.2 同步版本</h3><p><strong>unlinkz 方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; unlinkSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">unlinkSync</span>(<span class=\"string\">&quot;./測試寫入.txt&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除成功&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除失敗&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>rm 方法</strong></p>\n<figure class=\"highlight mjs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; rmSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">rmSync</span>(<span class=\"string\">&quot;./測試寫入ESM.txt&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除成功&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除失敗&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-資料夾操作\"><a href=\"#7-資料夾操作\" class=\"headerlink\" title=\"7. 資料夾操作\"></a>7. 資料夾操作</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>readdir &#x2F; readdirSync</td>\n<td>讀取資料夾</td>\n</tr>\n<tr>\n<td>rmdir &#x2F; rmdirSync</td>\n<td>刪除資料夾</td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td>創建資料夾</td>\n</tr>\n</tbody></table>\n<p>在 Node.js 中，我們可以使用 mkdir 或 mkdirSync 來創建資料夾</p>\n<h3 id=\"7-1-創建資料夾\"><a href=\"#7-1-創建資料夾\" class=\"headerlink\" title=\"7.1 創建資料夾\"></a>7.1 創建資料夾</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"title function_\">mkdir</span>(path[, options], callback)</span><br><span class=\"line\">fs.<span class=\"title function_\">mkdirSync</span>(path[, options])</span><br></pre></td></tr></table></figure>\n\n<p><strong>異步版本</strong>（如果資料夾已存在，會報錯）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mkdir &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">mkdir</span>(<span class=\"string\">&quot;./html&quot;</span>, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;建立資料夾失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;建立資料夾成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-1-1-遍曆資料夾\"><a href=\"#7-1-1-遍曆資料夾\" class=\"headerlink\" title=\"7.1.1 遍曆資料夾\"></a>7.1.1 遍曆資料夾</h4><p>除了建立單一一層的資料夾外，還可以建立一層一層往下建立資料夾</p>\n<p>第二個參數，原本被忽略不寫的參數，要放一個物件，裡面放參數 recursive，遞迴，值設定為 ture<br>這樣就會產生一層包一層的空資料夾了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mkdir &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// mkdir(&quot;./html&quot;, (error)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"title function_\">mkdir</span>(<span class=\"string\">&quot;./a/b/c&quot;</span>, &#123; <span class=\"attr\">recursive</span>: <span class=\"literal\">true</span> &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;建立資料夾失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;建立資料夾成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-讀取資料夾\"><a href=\"#7-2-讀取資料夾\" class=\"headerlink\" title=\"7.2 讀取資料夾\"></a>7.2 讀取資料夾</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readdir &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">readdir</span>(<span class=\"string\">&quot;./video&quot;</span>, <span class=\"function\">(<span class=\"params\">error, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;讀取資料夾失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data); <span class=\"comment\">// [ &#x27;.DS_Store&#x27;, &#x27;movie.mp4&#x27;, &#x27;movie2.mp4&#x27; ]</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-2-1-讀取當前資料夾\"><a href=\"#7-2-1-讀取當前資料夾\" class=\"headerlink\" title=\"7.2.1 讀取當前資料夾\"></a>7.2.1 讀取當前資料夾</h4><p>讀取當前資料夾，就是讀取.&#x2F;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readdir &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// readdir(&quot;./video&quot;, (error, data)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"title function_\">readdir</span>(<span class=\"string\">&quot;./&quot;</span>, <span class=\"function\">(<span class=\"params\">error, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;讀取資料夾失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-刪除資料夾\"><a href=\"#7-3-刪除資料夾\" class=\"headerlink\" title=\"7.3 刪除資料夾\"></a>7.3 刪除資料夾</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 語法 (即將棄用)</span></span><br><span class=\"line\">fs.<span class=\"title function_\">rmdir</span>(path[, options], callback)</span><br><span class=\"line\">fs.<span class=\"title function_\">redirSync</span>(path[, options])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建議使用fs.rm(path, &#123; recursive: true &#125;)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; rmdir &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 刪除資料夾(前提沒有文件在裡面)</span></span><br><span class=\"line\"><span class=\"title function_\">rmdir</span>(<span class=\"string\">&quot;./html&quot;</span>, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除資料夾失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除資料夾成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-3-1-若是資料夾內有檔案，則刪除失敗\"><a href=\"#7-3-1-若是資料夾內有檔案，則刪除失敗\" class=\"headerlink\" title=\"7.3.1 若是資料夾內有檔案，則刪除失敗\"></a>7.3.1 若是資料夾內有檔案，則刪除失敗</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; rmdir &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">rmdir</span>(<span class=\"string\">&quot;./a&quot;</span>, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除資料夾失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除資料夾成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Error: ENOTEMPTY: directory not empty, <span class=\"built_in\">rmdir</span> <span class=\"string\">&#x27;./a&#x27;</span>] &#123;</span><br><span class=\"line\">  errno: -66,</span><br><span class=\"line\">  code: <span class=\"string\">&#x27;ENOTEMPTY&#x27;</span>,</span><br><span class=\"line\">  syscall: <span class=\"string\">&#x27;rmdir&#x27;</span>,</span><br><span class=\"line\">  path: <span class=\"string\">&#x27;./a&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果要刪除剛剛遞迴建立的資料夾 a，這時候寫法如果照剛剛的寫法，就會失敗。因為資料夾不是空的，無法刪除</p>\n<h4 id=\"7-4-2-使用遞迴刪除檔案\"><a href=\"#7-4-2-使用遞迴刪除檔案\" class=\"headerlink\" title=\"7.4.2 使用遞迴刪除檔案\"></a>7.4.2 使用遞迴刪除檔案</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; rmdir &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用遞迴，自動把各層內的資料夾刪除</span></span><br><span class=\"line\"><span class=\"title function_\">rmdir</span>(<span class=\"string\">&quot;./a&quot;</span>, &#123; <span class=\"attr\">recursive</span>: <span class=\"literal\">true</span> &#125;, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除資料夾失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;刪除資料夾成功&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node:49806) [DEP0147] DeprecationWarning: In future versions of NodeJS, fs.rmdir(path, &#123; recursive: <span class=\"literal\">true</span> &#125;) will be removed. Use fs.rm(path, &#123; recursive: <span class=\"literal\">true</span> &#125;) instead</span><br><span class=\"line\">(Use `node --trace-deprecation ...` to show <span class=\"built_in\">where</span> the warning was created)</span><br></pre></td></tr></table></figure>\n\n<p>Node.js 告知開發者在未來版本中將棄用 <code>fs.rmdir(path, &#123; recursive: true &#125;)</code> 的方式，並建議改用新的 <code>fs.rm(path, &#123; recursive: true &#125;)</code> 來進行資料夾刪除操作。</p>\n<h2 id=\"8-刪除整個資料夾\"><a href=\"#8-刪除整個資料夾\" class=\"headerlink\" title=\"8. 刪除整個資料夾\"></a>8. 刪除整個資料夾</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs/promises&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readdir</span>(<span class=\"string\">&quot;./avatar&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> (data) =&gt; &#123;</span><br><span class=\"line\">  data.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">async</span> (item) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fs.<span class=\"title function_\">unlink</span>(<span class=\"string\">`./avatar/<span class=\"subst\">$&#123;item&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fs.<span class=\"title function_\">rmdir</span>(<span class=\"string\">&quot;./avatar&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; readdir, unlink, rmdir &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs/promises&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">readdir</span>(<span class=\"string\">&quot;./avatar&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> (data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">  data.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    arr.<span class=\"title function_\">push</span>(<span class=\"title function_\">unlink</span>(<span class=\"string\">`./avatar/<span class=\"subst\">$&#123;item&#125;</span>`</span>));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(arr);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">rmdir</span>(<span class=\"string\">&quot;./avatar&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; readdir, unlink, rmdir &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs/promises&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">readdir</span>(<span class=\"string\">&quot;./image2&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> (data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(data.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> <span class=\"title function_\">unlink</span>(<span class=\"string\">`./image2/<span class=\"subst\">$&#123;item&#125;</span>`</span>)));</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">rmdir</span>(<span class=\"string\">&quot;./image2&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-查看檔案的資訊\"><a href=\"#9-查看檔案的資訊\" class=\"headerlink\" title=\"9. 查看檔案的資訊\"></a>9. 查看檔案的資訊</h2><p>在 Node.js 中，我們可以使用 stat 或 statSync 來查看資源的詳細資訊</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 語法</span></span><br><span class=\"line\">fs.<span class=\"title function_\">stat</span>(path[, options], callback); <span class=\"comment\">// 異步</span></span><br><span class=\"line\">fs.<span class=\"title function_\">statSync</span>(path[, options]); <span class=\"comment\">//同步</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>callback 接收兩個參數(err,stats),其中 stats 就是 fs.stats 的一個實例；</li>\n</ul>\n<p>方法</p>\n<ul>\n<li>stats.isFile() – 是否文件</li>\n<li>stats.isDirectory() – 是否資料夾</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 異步獲取狀態</span></span><br><span class=\"line\"><span class=\"comment\">// stat  方法  status 縮寫 狀態</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; stat &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">stat</span>(<span class=\"string\">&quot;./video/movie.mp4&quot;</span>, <span class=\"function\">(<span class=\"params\">error, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;讀取失敗&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;讀取成功：&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">isFile</span>());</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">isDirectory</span>());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>輸出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Stats</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">dev</span>: <span class=\"number\">2662371706</span>,</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"number\">33206</span>,</span><br><span class=\"line\">  <span class=\"attr\">nlink</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">uid</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">gid</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">rdev</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">blksize</span>: <span class=\"number\">4096</span>,</span><br><span class=\"line\">  <span class=\"attr\">ino</span>: <span class=\"number\">844424930583822</span>,</span><br><span class=\"line\">  <span class=\"attr\">size</span>: <span class=\"number\">4011805</span>,</span><br><span class=\"line\">  <span class=\"attr\">blocks</span>: <span class=\"number\">7840</span>,</span><br><span class=\"line\">  <span class=\"attr\">atimeMs</span>: <span class=\"number\">1707898008622.9956</span>,</span><br><span class=\"line\">  <span class=\"attr\">mtimeMs</span>: <span class=\"number\">1704425501957.713</span>,</span><br><span class=\"line\">  <span class=\"attr\">ctimeMs</span>: <span class=\"number\">1704425523505.594</span>,</span><br><span class=\"line\">  <span class=\"attr\">birthtimeMs</span>: <span class=\"number\">1704425542808.8608</span>,</span><br><span class=\"line\">  <span class=\"attr\">atime</span>: <span class=\"number\">2023</span>-<span class=\"number\">07</span>-23<span class=\"attr\">T07</span>:<span class=\"number\">25</span>:<span class=\"number\">05</span>.636Z,</span><br><span class=\"line\">  <span class=\"attr\">mtime</span>: <span class=\"number\">2023</span>-<span class=\"number\">07</span>-23<span class=\"attr\">T07</span>:<span class=\"number\">24</span>:<span class=\"number\">52.</span>778Z,</span><br><span class=\"line\">  <span class=\"attr\">ctime</span>: <span class=\"number\">2023</span>-<span class=\"number\">07</span>-23<span class=\"attr\">T07</span>:<span class=\"number\">25</span>:<span class=\"number\">29.</span>723Z,</span><br><span class=\"line\">  <span class=\"attr\">birthtime</span>: <span class=\"number\">2023</span>-<span class=\"number\">07</span>-23<span class=\"attr\">T07</span>:<span class=\"number\">24</span>:<span class=\"number\">51.</span>906Z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>比較有用的資訊就是 size 檔案大小</li>\n<li>birthtime 是檔案建立的時間</li>\n<li>atime 是最後的讀取時間</li>\n<li>mtime 是最後一次的修改時間</li>\n<li>ctime 是最後一次修改檔案狀態的時間</li>\n<li>isFile 檢測是否為文件</li>\n<li>isDirectory 檢測是否為資料夾</li>\n</ul>\n<h2 id=\"10-路徑問題\"><a href=\"#10-路徑問題\" class=\"headerlink\" title=\"10. 路徑問題\"></a>10. 路徑問題</h2><p>fs 模組對資源進行操作時，路徑的寫法有兩種：</p>\n<p><strong>相對路徑</strong></p>\n<ul>\n<li>.&#x2F;檔案名稱：表示當前資料夾下的檔案。</li>\n<li>檔案名稱：如果省略了 ‘.&#x2F;‘，則默認為當前資料夾下的檔案。</li>\n<li>..&#x2F;檔案名稱：表示當前資料夾的上一級資料夾中的檔案。</li>\n</ul>\n<p>相對路徑中的 “當前資料夾” 是指命令行工作資料夾，而不是文件的所在資料夾。因此，當命令行工作資料夾與檔案所在資料夾不一致時，可能會導致一些問題。</p>\n<p><strong>絕對路徑</strong><br>表示從根資料夾開始的完整路徑</p>\n<ul>\n<li><code>D:/Program Files</code> windows 系統下的絕對路徑</li>\n<li><code>/user/bin</code> Linux 系統下的絕對路徑</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>相對路徑中所謂的 當前資料夾 ，指的是 命名行的工作資料夾 ，而並非是文件的所在資料夾</p>\n<p>所以當命名行的工作資料夾與文件所在資料夾不一緻時，會出現一些 Bug</p></blockquote>\n<p><strong><code>__dirname</code></strong></p>\n<ul>\n<li><p><code>__dirname</code> 與 require 類似，都是 Node.js 環境中的 ‘全局’ 變量</p>\n</li>\n<li><p><code>__dirname</code> 儲存著 當前資料夾所在資料夾的<strong>絕對路徑</strong>，可以使用 <code>__dirname</code> 與文件名拚接成絕對路徑</p>\n</li>\n</ul>\n<p>代碼示例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 __dirname 與檔案名拼接成絕對路徑</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = fs.<span class=\"title function_\">readFileSync</span>(__dirname + <span class=\"string\">&quot;/data.txt&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用 fs 模組的時候，盡量使用 __dirname 路徑轉換為絕對路徑，這樣可以避免相對路徑産生的 Bug。這種方法確保了程式能夠正確地找到所需的檔案，而不受命令行工作資料夾的影響。</p></blockquote>\n","feature":null,"text":"07 【內建-檔案系統模組 file system (fs)】fs 全稱為 file system ，稱之為 文件系統 ，是 Node.js 中的 內建模組 ，...","permalink":"/post/NODEJS07 【內建-檔案系統模組 file system (fs)】","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"node.js","slug":"node-js","count":6,"path":"api/categories/node-js.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":30,"path":"api/tags/桃園資展筆記.json"},{"name":"node.js","slug":"node-js","count":8,"path":"api/tags/node-js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#07-%E3%80%90%E5%85%A7%E5%BB%BA-%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1%E6%A8%A1%E7%B5%84-file-system-fs-%E3%80%91\"><span class=\"toc-text\">07 【內建-檔案系統模組 file system (fs)】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Node-js-%E4%B8%AD%E7%9A%84%E5%90%8C%E6%AD%A5%E5%92%8C%E7%95%B0%E6%AD%A5%E7%9A%84%E5%8D%80%E5%88%A5\"><span class=\"toc-text\">1. Node.js 中的同步和異步的區別</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%96%87%E4%BB%B6%E5%AF%AB%E5%85%A5\"><span class=\"toc-text\">2. 文件寫入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E7%95%B0%E6%AD%A5%E5%AF%AB%E5%85%A5\"><span class=\"toc-text\">2.1 異步寫入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%90%8C%E6%AD%A5%E5%AF%AB%E5%85%A5\"><span class=\"toc-text\">2.2 同步寫入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-appendFile-appendFileSync-%E9%99%84%E5%8A%A0%E5%85%A7%E5%AE%B9\"><span class=\"toc-text\">2.3 appendFile &#x2F; appendFileSync 附加內容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-createWriteStream-%E4%B8%B2%E6%B5%81%E5%BC%8F%E7%9A%84%E5%AF%AB%E5%85%A5%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.4 createWriteStream 串流式的寫入方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E5%AF%AB%E5%85%A5%E6%96%87%E4%BB%B6%E7%9A%84%E5%A0%B4%E6%99%AF\"><span class=\"toc-text\">2.5 寫入文件的場景</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%96%87%E4%BB%B6%E8%AE%80%E5%8F%96\"><span class=\"toc-text\">3. 文件讀取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-readFile-%E7%95%B0%E6%AD%A5%E8%AE%80%E5%8F%96\"><span class=\"toc-text\">3.1 readFile 異步讀取</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-readFileSync-%E5%90%8C%E6%AD%A5%E8%AE%80%E5%8F%96\"><span class=\"toc-text\">3.2 readFileSync 同步讀取</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-createReadStream-%E4%B8%B2%E6%B5%81%E5%BC%8F%E8%AE%80%E5%8F%96\"><span class=\"toc-text\">3.3 createReadStream 串流式讀取</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E8%AE%80%E5%8F%96%E6%AA%94%E6%A1%88%E7%9A%84%E6%87%89%E7%94%A8%E6%83%85%E5%A2%83\"><span class=\"toc-text\">3.4 讀取檔案的應用情境</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%96%87%E4%BB%B6%E9%87%8D%E5%91%BD%E5%90%8D-%E7%A7%BB%E5%8B%95%E6%AA%94%E6%A1%88\"><span class=\"toc-text\">4. 文件重命名&#x2F;移動檔案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E6%96%87%E4%BB%B6%E9%87%8D%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">4.1 文件重命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E7%A7%BB%E5%8B%95%E6%96%87%E4%BB%B6%E6%AA%94%E6%A1%88\"><span class=\"toc-text\">4.2 移動文件檔案</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8\"><span class=\"toc-text\">5. 文件是否存在</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%88%AA%E9%99%A4%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">6. 刪除文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E7%95%B0%E6%AD%A5%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">5.1 異步版本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E5%90%8C%E6%AD%A5%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">5.2 同步版本</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E8%B3%87%E6%96%99%E5%A4%BE%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">7. 資料夾操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E5%89%B5%E5%BB%BA%E8%B3%87%E6%96%99%E5%A4%BE\"><span class=\"toc-text\">7.1 創建資料夾</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-1-1-%E9%81%8D%E6%9B%86%E8%B3%87%E6%96%99%E5%A4%BE\"><span class=\"toc-text\">7.1.1 遍曆資料夾</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-%E8%AE%80%E5%8F%96%E8%B3%87%E6%96%99%E5%A4%BE\"><span class=\"toc-text\">7.2 讀取資料夾</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2-1-%E8%AE%80%E5%8F%96%E7%95%B6%E5%89%8D%E8%B3%87%E6%96%99%E5%A4%BE\"><span class=\"toc-text\">7.2.1 讀取當前資料夾</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-%E5%88%AA%E9%99%A4%E8%B3%87%E6%96%99%E5%A4%BE\"><span class=\"toc-text\">7.3 刪除資料夾</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-1-%E8%8B%A5%E6%98%AF%E8%B3%87%E6%96%99%E5%A4%BE%E5%85%A7%E6%9C%89%E6%AA%94%E6%A1%88%EF%BC%8C%E5%89%87%E5%88%AA%E9%99%A4%E5%A4%B1%E6%95%97\"><span class=\"toc-text\">7.3.1 若是資料夾內有檔案，則刪除失敗</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-4-2-%E4%BD%BF%E7%94%A8%E9%81%9E%E8%BF%B4%E5%88%AA%E9%99%A4%E6%AA%94%E6%A1%88\"><span class=\"toc-text\">7.4.2 使用遞迴刪除檔案</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E5%88%AA%E9%99%A4%E6%95%B4%E5%80%8B%E8%B3%87%E6%96%99%E5%A4%BE\"><span class=\"toc-text\">8. 刪除整個資料夾</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E6%9F%A5%E7%9C%8B%E6%AA%94%E6%A1%88%E7%9A%84%E8%B3%87%E8%A8%8A\"><span class=\"toc-text\">9. 查看檔案的資訊</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-%E8%B7%AF%E5%BE%91%E5%95%8F%E9%A1%8C\"><span class=\"toc-text\">10. 路徑問題</span></a></li></ol></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"內建-路徑處理模組 ( path )","uid":"1033bc320af8e95a06637ef625a7542f","slug":"NODEJS06 【內建-路徑處理模組 ( path ) 】","date":"2024-01-05T11:30:05.000Z","updated":"2024-02-10T10:48:36.190Z","comments":true,"path":"api/articles/NODEJS06 【內建-路徑處理模組 ( path ) 】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/node.js/what-is-npm.png?raw=true","text":"06 【內建-路徑處理模組 ( path ) 】1. path模組簡介路徑處理模組（path module）是 Node.js 核心模組之一，用於處理文件路徑和...","permalink":"/post/NODEJS06 【內建-路徑處理模組 ( path ) 】","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"node.js","slug":"node-js","count":6,"path":"api/categories/node-js.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":30,"path":"api/tags/桃園資展筆記.json"},{"name":"node.js","slug":"node-js","count":8,"path":"api/tags/node-js.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"內建-緩衝區模組 ( Buffer )","uid":"b4f37f72e1016ef379212405ddab2ded","slug":"NODEJS05 【內建-緩衝區模組 ( Buffer )】","date":"2024-01-05T11:30:05.000Z","updated":"2024-02-13T04:56:26.504Z","comments":true,"path":"api/articles/NODEJS05 【內建-緩衝區模組 ( Buffer )】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/node.js/what-is-npm.png?raw=true","text":"05 【內建-緩衝區模組 ( Buffer )】概念 Buffer 是一個類似於陣列的 物件 ，用於表示固定長度的字節序列 Buffer 本質是一段記憶體空間，...","permalink":"/post/NODEJS05 【內建-緩衝區模組 ( Buffer )】","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"node.js","slug":"node-js","count":6,"path":"api/categories/node-js.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":30,"path":"api/tags/桃園資展筆記.json"},{"name":"node.js","slug":"node-js","count":8,"path":"api/tags/node-js.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}