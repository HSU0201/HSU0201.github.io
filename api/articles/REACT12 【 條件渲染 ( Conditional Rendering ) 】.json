{"title":"條件渲染 ( Conditional Rendering )","uid":"5a75bf7974d2ba4d1e1f51fc63e2b540","slug":"REACT12 【 條件渲染 ( Conditional Rendering ) 】","date":"2024-01-29T04:20:05.000Z","updated":"2024-02-16T13:35:55.238Z","comments":true,"path":"api/articles/REACT12 【 條件渲染 ( Conditional Rendering ) 】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/blog-Article-Cover/734257355c559d394eb900a70ea03a08.jpg?raw=true","content":"<h1 id=\"12-【-條件渲染-Conditional-Rendering-】\"><a href=\"#12-【-條件渲染-Conditional-Rendering-】\" class=\"headerlink\" title=\"12 【 條件渲染 ( Conditional Rendering ) 】\"></a>12 【 條件渲染 ( Conditional Rendering ) 】</h1><p>在 React 中，您的組件通常需要根據不同的條件顯示不同的內容。可以使用 <strong>if 語句</strong> 、 <strong>&amp;&amp;</strong> 和 <strong>? :</strong> 運算子等 JavaScript 語法有條件地渲染 JSX。</p>\n<h2 id=\"1-條件判斷語句\"><a href=\"#1-條件判斷語句\" class=\"headerlink\" title=\"1.條件判斷語句\"></a>1.條件判斷語句</h2><p>React 中的條件渲染和 JavaScript 中的一樣，使用 JavaScript 運算子 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"><code>if</code></a> 或者<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">條件運算子</a>去創建元素來表現當前的狀態，然後讓 React 根據它們來更新 UI。</p>\n<ul>\n<li>適合邏輯較多的情況</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 第一種方法，聲明函式返回dom</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [type, setType] = <span class=\"title function_\">useState</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">showMsg</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>條件判斷語句的寫法：type值等於1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>第一種寫法：type值不等於1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;showMsg()&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>頁面展示：</p>\n<p><img src=\"https://github.com/HSU0201/images/blob/main/react/if.png\" alt=\"image\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isLogin, setIsLogin] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [welcome, setWelcome] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [btnText, setBtnText] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isLogin) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setWelcome</span>(<span class=\"string\">&quot;歡迎回來&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">setBtnText</span>(<span class=\"string\">&quot;退出&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setWelcome</span>(<span class=\"string\">&quot;請先登入~&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">setBtnText</span>(<span class=\"string\">&quot;登入&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [isLogin]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;welcome&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setIsLogin(!isLogin)&#125;&gt;&#123;btnText&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/HSU0201/images/blob/main/react/login.gif?raw=true\" alt=\"image\"></p>\n<h2 id=\"2-條件（三元）運算子\"><a href=\"#2-條件（三元）運算子\" class=\"headerlink\" title=\"2.條件（三元）運算子 ( ? : )\"></a>2.條件（三元）運算子 ( ? : )</h2><p>另一種編寫條件表達式的緊湊語法是使用 JavaScript 中的三元運算子 <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\"><code>condition ? true : false</code></a>。</p>\n<ul>\n<li>適合邏輯比較簡單</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [type, setType] = <span class=\"title function_\">useState</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 假設type的初始值為1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        // 根據type變數的值進行條件渲染</span></span><br><span class=\"line\"><span class=\"language-xml\">        type === 1 ? (</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>三元運算子的寫法：type值等於1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        ) : (</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>第三種寫法：type值不等於1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        )</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根據 type 的值呈現了不同的內容，從而實現了條件渲染的效果。<br><img src=\"https://github.com/HSU0201/images/blob/main/react/ternary.png?raw=true\" alt=\"image\"></p>\n<p>在下面這個示例中，我們用它來條件渲染一小段文本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isLoggedIn, setIsLoggedIn] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      The user is <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>&#123;isLoggedIn ? &quot;currently&quot; : &quot;not&quot;&#125;<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span> logged in.</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同樣的，它也可以用於較為複雜的表達式中，雖然看起來不是很直觀：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isLoggedIn, setIsLoggedIn] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleLoginClick</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setIsLoggedIn</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleLogoutClick</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setIsLoggedIn</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;isLoggedIn ? (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">LogoutButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleLogoutClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      ) : (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">LoginButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleLoginClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在撰寫 React 組件時，要考慮程式碼的可讀性和維護性。就像在 JavaScript 中一樣，遵循團隊的代碼風格慣例是很重要的。如果條件判斷變得過於複雜，那麼你可能需要考慮將相關的部分提取為一個獨立的組件。</p>\n<h2 id=\"3-邏輯與運算子\"><a href=\"#3-邏輯與運算子\" class=\"headerlink\" title=\"3.邏輯與運算子 ( &amp;&amp; )\"></a>3.邏輯與運算子 ( &amp;&amp; )</h2><p>通過大括號包裹代碼，你可以<a href=\"https://zh-hant.legacy.reactjs.org/docs/introducing-jsx.html\">在 JSX 中嵌入表達式</a>。這也包括 JavaScript 中的邏輯與 (&amp;&amp;) 運算子。它可以很方便地進行元素的條件渲染：</p>\n<ul>\n<li>適合如果條件成立，渲染某一個組件；如果條件不成立，什麼內容也不渲染；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [type, setType] = <span class=\"title function_\">useState</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;type === 1 &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>邏輯與運算子的寫法：type值等於1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;type !== 1 &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>邏輯與運算子的寫法：type值不等於1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/HSU0201/images/blob/main/react/logical.png?raw=true\" alt=\"image\"></p>\n<p>當我們使用 <code>&amp;&amp;</code> 運算符時，如果左側的操作數為<code>真（true）</code>，JavaScript 將會返回右側的操作數，無論它是什麼值；但如果左側的操作數為<code>假（false）</code>，JavaScript 將直接返回左側的操作數，並忽略右側的操作數。</p>\n<p>請注意，<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsy(偽值)表達式</a> 會使 <code>&amp;&amp;</code> 後面的元素被跳過，但會返回 falsy 表達式的值。在下面示例中，render 方法的返回值是 <code>&lt;div&gt;0&lt;/div&gt;</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">MessageComponent</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 將 count 變數改為狀態</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;count &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Messages: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* 因上面的語法會用falsy判斷，會呈現出來其不要看到的數值，要用下面的語法才會精準判斷 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;Boolean(count) &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Messages: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;count ? <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Messages: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span> : &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;!!count &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Messages: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;count !== 0 &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Messages: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MessageComponent</span>;</span><br></pre></td></tr></table></figure>\n\n<p>為了避免**falsy(偽值)**效果 可以使用 <code>Boolean(count)</code> 來檢查 <code>count</code> 是否為真，如果 <code>count</code> 為 <code>0</code> 則不渲染，或使用三元，避免有 <code>0</code> 或 <code>NaN</code> 的呈現情況</p>\n<h2 id=\"拓展閱讀-falsy-偽值-表達式\"><a href=\"#拓展閱讀-falsy-偽值-表達式\" class=\"headerlink\" title=\"[拓展閱讀-falsy(偽值)表達式]\"></a>[拓展閱讀-falsy(偽值)表達式]</h2><p>在 JavaScript 中，<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsy</a>（偽值）是指一個被視為布林上下文中為 false 的值。當一個值被視為偽值時，在條件判斷中會被當作 false，而在其他情況下可能被當作 true 或其他值。</p>\n<p>以下是 JavaScript 中被視為偽值的一些情況：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// false: 明確的布林值false。</span></span><br><span class=\"line\"><span class=\"comment\">// 0: 數值零。</span></span><br><span class=\"line\"><span class=\"comment\">// 空字串（&#x27;&#x27;）: 包含零個字符的字串。</span></span><br><span class=\"line\"><span class=\"comment\">// NaN（Not a Number）: 表示不是一個有效的數字。</span></span><br><span class=\"line\"><span class=\"comment\">// null: 表示空值或沒有物件。</span></span><br><span class=\"line\"><span class=\"comment\">// undefined: 表示未定義的值。</span></span><br><span class=\"line\"><span class=\"comment\">// document.all: 在老舊的瀏覽器中，document.all 在某些情況下被視為偽值。</span></span><br></pre></td></tr></table></figure>\n\n<p>在條件判斷中，如果值是上述任何一種，則被視為<strong>偽值</strong>，否則被視為真值（truthy）。當你在條件中使用這些值時，可以利用這種偽值的特性進行簡潔的判斷。</p>\n<h2 id=\"4-元素變量\"><a href=\"#4-元素變量\" class=\"headerlink\" title=\"4.元素變量\"></a>4.元素變量</h2><p>也使用變量來儲存元素。 它可以幫助你有條件地渲染組件的一部分，而其他的渲染部分並不會因此而改變。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [type, setType] = <span class=\"title function_\">useState</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> test = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    test = <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>變量來儲存元素寫法：type值等於1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    test = <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>變量來儲存元素第四種寫法：type值不等於1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;test&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其程式碼範例與第一個非常相似，第一種寫法的條件判斷語句將條件渲染的邏輯封裝在了 showMsg() 函式中，使得渲染邏輯更清晰，易於維護和管理。第二種寫法雖然更加客製化，但其可讀性並不好。</p>\n<p><img src=\"https://github.com/HSU0201/images/blob/main/react/var.png?raw=true\" alt=\"image\"></p>\n<h2 id=\"5-阻止組件渲染\"><a href=\"#5-阻止組件渲染\" class=\"headerlink\" title=\"5.阻止組件渲染\"></a>5.阻止組件渲染</h2><p>在某些情況下，您根本不想渲染任何內容。例如，假設您根本不想展示包裝好的物品。組件必須返回一些東西。在這種情況下，您可以回傳 null</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Item</span>(<span class=\"params\">&#123; name, isPacked &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isPacked) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">PackingList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Sally Ride&#x27;s Packing List<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Item</span> <span class=\"attr\">isPacked</span>=<span class=\"string\">&#123;true&#125;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Space suit&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Item</span> <span class=\"attr\">isPacked</span>=<span class=\"string\">&#123;true&#125;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Helmet with a golden leaf&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Item</span> <span class=\"attr\">isPacked</span>=<span class=\"string\">&#123;false&#125;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Photo of Tam&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 <code>isPacked</code> 為 <code>true</code>，則元件將不傳回任何內容， <code>null</code> 。否則，它將返回 JSX 進行渲染。</p>\n","feature":null,"text":"12 【 條件渲染 ( Conditional Rendering ) 】在 React 中，您的組件通常需要根據不同的條件顯示不同的內容。可以使用 if 語句...","permalink":"/post/REACT12 【 條件渲染 ( Conditional Rendering ) 】","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"React","slug":"React","count":8,"path":"api/categories/React.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":31,"path":"api/tags/桃園資展筆記.json"},{"name":"React","slug":"React","count":5,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#12-%E3%80%90-%E6%A2%9D%E4%BB%B6%E6%B8%B2%E6%9F%93-Conditional-Rendering-%E3%80%91\"><span class=\"toc-text\">12 【 條件渲染 ( Conditional Rendering ) 】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%A2%9D%E4%BB%B6%E5%88%A4%E6%96%B7%E8%AA%9E%E5%8F%A5\"><span class=\"toc-text\">1.條件判斷語句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%A2%9D%E4%BB%B6%EF%BC%88%E4%B8%89%E5%85%83%EF%BC%89%E9%81%8B%E7%AE%97%E5%AD%90\"><span class=\"toc-text\">2.條件（三元）運算子 ( ? : )</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E9%82%8F%E8%BC%AF%E8%88%87%E9%81%8B%E7%AE%97%E5%AD%90\"><span class=\"toc-text\">3.邏輯與運算子 ( &amp;&amp; )</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%93%E5%B1%95%E9%96%B1%E8%AE%80-falsy-%E5%81%BD%E5%80%BC-%E8%A1%A8%E9%81%94%E5%BC%8F\"><span class=\"toc-text\">[拓展閱讀-falsy(偽值)表達式]</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%85%83%E7%B4%A0%E8%AE%8A%E9%87%8F\"><span class=\"toc-text\">4.元素變量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E9%98%BB%E6%AD%A2%E7%B5%84%E4%BB%B6%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">5.阻止組件渲染</span></a></li></ol></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Sass 的安裝使用","uid":"aaa0ebbefcf540c7d2923da17a9fabb8","slug":"SASS01 【Sass的安装使用】","date":"2024-02-06T05:12:05.000Z","updated":"2024-02-10T05:23:22.670Z","comments":true,"path":"api/articles/SASS01 【Sass的安装使用】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/blog-Article-Cover/nav.png?raw=true","text":"01 【Sass 的安裝使用】1.介紹1.1 什麼是 CSS 預處理技術？CSS 預處理器是一種工具或語言，它們擴展了 CSS 的功能，讓開發者可以使用變量、嵌...","permalink":"/post/SASS01 【Sass的安装使用】","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Sass/SCSS","slug":"Sass-SCSS","count":1,"path":"api/categories/Sass-SCSS.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":31,"path":"api/tags/桃園資展筆記.json"},{"name":"Sass/SCSS","slug":"Sass-SCSS","count":1,"path":"api/tags/Sass-SCSS.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"列表 & Key & diff","uid":"f16d6f52c1fafc17fe797a458ea1c28e","slug":"REACT10 【列表 & Key & diff】","date":"2024-01-28T04:20:05.000Z","updated":"2024-02-16T13:35:51.918Z","comments":true,"path":"api/articles/REACT10 【列表 & Key & diff】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/blog-Article-Cover/734257355c559d394eb900a70ea03a08.jpg?raw=true","text":"06 【列表 &amp; Key &amp; diff】要顯示資料集合中的多個相似組件。可以使用 JavaScript 陣列方法來操作資料數組。 1.列表假定有...","permalink":"/post/REACT10 【列表 & Key & diff】","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"React","slug":"React","count":8,"path":"api/categories/React.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":31,"path":"api/tags/桃園資展筆記.json"},{"name":"React","slug":"React","count":5,"path":"api/tags/React.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}