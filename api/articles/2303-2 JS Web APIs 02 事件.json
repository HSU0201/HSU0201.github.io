{"title":"JavaScript Web APIs - 第2天","uid":"b74e92afe19531c6070a34e8d8d93dcd","slug":"2303-2 JS Web APIs 02 事件","date":"2023-03-24T01:22:08.000Z","updated":"2023-03-26T12:06:58.484Z","comments":true,"path":"api/articles/2303-2 JS Web APIs 02 事件.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>學會通過為DOM註冊事件來實現可交互的網頁特效。</p></blockquote>\n<ul>\n<li>能夠判斷函數運行的環境並確字 this 所指代的物件</li>\n<li>理解事件的作用，知道應用事件的 3 個步驟</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>學習會為 DOM 註冊事件，實現簡單可交互的網頁特交。</p></blockquote>\n<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><p>事件是程式設計語言中的術語，它是用來描述程式的行為或狀態的，<strong>一旦行為或狀態發生改變，便立即調用一個函數。</strong></p>\n<p>例如：使用者使用【滑鼠點擊】網頁中的一個按鈕、使用者使用【滑鼠拖拽】網頁中的一張圖片</p>\n<h2 id=\"事件監聽\"><a href=\"#事件監聽\" class=\"headerlink\" title=\"事件監聽\"></a>事件監聽</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>語法: 元素對象.addEventListener(‘事件類型’, 要執行的函數)</p></blockquote>\n<p>結合 DOM 使用事件時，需要為 DOM 物件添加事件監聽，等待事件發生（觸發）時，便立即調用一個函數。</p>\n<p><code>addEventListener</code> 是 DOM 物件專門用來添加事件監聽的方法，它的兩個參數分別為【事件類型】和【事件回檔】。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n  &lt;title&gt;事件監聽&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;h3&gt;事件監聽&lt;&#x2F;h3&gt;\n  &lt;p id&#x3D;&quot;text&quot;&gt;為 DOM 元素添加事件監聽，等待事件發生，便立即執行一個函數。&lt;&#x2F;p&gt;\n  &lt;button id&#x3D;&quot;btn&quot;&gt;點擊改變文字顏色&lt;&#x2F;button&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 1. 獲取 button 對應的 DOM 對象\n    const btn &#x3D; document.querySelector(&#39;#btn&#39;)\n\n    &#x2F;&#x2F; 2. 添加事件監聽\n    btn.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;等待事件被觸發...&#39;)\n      &#x2F;&#x2F; 改變 p 標籤的文字顏色\n      let text &#x3D; document.getElementById(&#39;text&#39;)\n      text.style.color &#x3D; &#39;red&#39;\n    &#125;)\n\n    &#x2F;&#x2F; 3. 只要使用者點擊了按鈕，事件便觸發了！！！\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>完成事件監聽分成3個步驟：</p>\n<ol>\n<li>獲取 DOM 元素</li>\n<li>通過 <code>addEventListener</code> 方法為 DOM 節點添加事件監聽</li>\n<li>等待事件觸發，如使用者點擊了某個按鈕時便會觸發 <code>click</code> 事件類型</li>\n<li>事件觸發後，相對應的回呼函數會被執行</li>\n</ol>\n<p>大白話描述：所謂的事件無非就是找個機會（事件觸發）調用一個函數（回呼函數）。</p>\n<h2 id=\"事件類型\"><a href=\"#事件類型\" class=\"headerlink\" title=\"事件類型\"></a>事件類型</h2><p><code>click</code> 譯成中文是【點擊】的意思，它的含義是監聽（等著）使用者滑鼠的按一下操作，除了【按一下】還有【按兩下】<code>dblclick</code></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 按兩下事件類型\n  btn.addEventListener(&#39;dblclick&#39;, function () &#123;\n    console.log(&#39;等待事件被觸發...&#39;);\n    &#x2F;&#x2F; 改變 p 標籤的文字顏色\n    const text &#x3D; document.querySelector(&#39;.text&#39;)\n    text.style.color &#x3D; &#39;red&#39;\n  &#125;)\n\n  &#x2F;&#x2F; 只要使用者按兩下擊了按鈕，事件便觸發了！！！\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>結論：【事件類型】決定了事件被觸發的方式，如 <code>click</code> 代表滑鼠按一下，<code>dblclick</code> 代表滑鼠按兩下。</p>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>說明</th>\n<th>舉例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>鼠標事件</td>\n<td>鼠標觸發</td>\n<td>click 鼠標點擊、mouseenter鼠標經過、mouseleave 鼠標離開</td>\n</tr>\n<tr>\n<td>焦點事件</td>\n<td>表單獲得光標</td>\n<td>focus 獲得焦點、blur 失去焦點</td>\n</tr>\n<tr>\n<td>鍵盤事件</td>\n<td>鍵盤觸發</td>\n<td>Keydown 鍵盤按下觸發、Keyup 鍵盤抬起觸發</td>\n</tr>\n<tr>\n<td>文本事件</td>\n<td>表單輸入觸發</td>\n<td>input 用戶輸入事件</td>\n</tr>\n</tbody></table>\n<h2 id=\"事件處理常式\"><a href=\"#事件處理常式\" class=\"headerlink\" title=\"事件處理常式\"></a>事件處理常式</h2><p><code>addEventListener</code> 的第2個參數是函數，這個函數會在事件被觸發時立即被調用，在這個函數中可以編寫任意邏輯的代碼，如改變 DOM 文本顏色、文本內容等。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 按兩下事件類型\n  btn.addEventListener(&#39;dblclick&#39;, function () &#123;\n    console.log(&#39;等待事件被觸發...&#39;)\n    \n    const text &#x3D; document.querySelector(&#39;.text&#39;)\n    &#x2F;&#x2F; 改變 p 標籤的文字顏色\n    text.style.color &#x3D; &#39;red&#39;\n    &#x2F;&#x2F; 改變 p 標籤的文本內容\n    text.style.fontSize &#x3D; &#39;20px&#39;\n  &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>結論：【事件處理常式】決定了事件觸發後應該執行的邏輯。</p>\n<h1 id=\"事件類型-1\"><a href=\"#事件類型-1\" class=\"headerlink\" title=\"事件類型\"></a>事件類型</h1><p>將眾多的事件類型分類可分為：滑鼠事件、鍵盤事件、表單事件、焦點事件等，我們逐一展開學習。</p>\n<h2 id=\"滑鼠事件\"><a href=\"#滑鼠事件\" class=\"headerlink\" title=\"滑鼠事件\"></a>滑鼠事件</h2><p>滑鼠事件是指跟滑鼠操作相關的事件，如按一下、按兩下、移動等。</p>\n<ol>\n<li>&#96;mouseenter 監聽滑鼠是否移入 DOM 元素</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;滑鼠事件&lt;&#x2F;h3&gt;\n  &lt;p&gt;監聽與滑鼠相關的操作&lt;&#x2F;p&gt;\n  &lt;hr&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 需要事件監聽的 DOM 元素\n    const box &#x3D; document.querySelector(&#39;.box&#39;);\n\n    &#x2F;&#x2F; 監聽滑鼠是移入當前 DOM 元素\n    box.addEventListener(&#39;mouseenter&#39;, function () &#123;\n      &#x2F;&#x2F; 修改文本內容\n      this.innerText &#x3D; &#39;滑鼠移入了...&#39;;\n      &#x2F;&#x2F; 修改游標的風格\n      this.style.cursor &#x3D; &#39;move&#39;;\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<ol>\n<li>&#96;mouseleave 監聽滑鼠是否移出 DOM 元素</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;滑鼠事件&lt;&#x2F;h3&gt;\n  &lt;p&gt;監聽與滑鼠相關的操作&lt;&#x2F;p&gt;\n  &lt;hr&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 需要事件監聽的 DOM 元素\n    const box &#x3D; document.querySelector(&#39;.box&#39;);\n\n    &#x2F;&#x2F; 監聽滑鼠是移出當前 DOM 元素\n    box.addEventListener(&#39;mouseleave&#39;, function () &#123;\n      &#x2F;&#x2F; 修改文本內容\n      this.innerText &#x3D; &#39;滑鼠移出了...&#39;;\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n\n<h2 id=\"焦點事件\"><a href=\"#焦點事件\" class=\"headerlink\" title=\"焦點事件\"></a>焦點事件</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>focus  獲得焦點<br>blur 失去焦點</p></blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;input type&#x3D;&quot;text&quot;&gt;\n  &lt;script&gt;\n    const input &#x3D; document.querySelector(&#39;input&#39;)\n    input.addEventListener(&#39;focus&#39;, function () &#123;\n      console.log(&#39;有焦點觸發&#39;)\n    &#125;)\n    input.addEventListener(&#39;blur&#39;, function () &#123;\n      console.log(&#39;失去焦點觸發&#39;)\n    &#125;)\n  &lt;&#x2F;script&gt;</code></pre>\n<h2 id=\"鍵盤事件\"><a href=\"#鍵盤事件\" class=\"headerlink\" title=\"鍵盤事件\"></a>鍵盤事件</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>keydown   鍵盤按下觸發<br>keyup   鍵盤抬起觸發</p></blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;input type&#x3D;&quot;text&quot;&gt;\n  &lt;script&gt;\n    const input &#x3D; document.querySelector(&#39;input&#39;)\n    &#x2F;&#x2F; 鍵盤事件\n    input.addEventListener(&#39;keydown&#39;, function () &#123;\n       console.log(&#39;鍵盤按下了&#39;)\n     &#125;)\n    input.addEventListener(&#39;keyup&#39;, function () &#123;\n      console.log(&#39;鍵盤談起了&#39;)\n     &#125;)\n  &lt;&#x2F;script&gt;</code></pre>\n<h2 id=\"文字方塊輸入事件\"><a href=\"#文字方塊輸入事件\" class=\"headerlink\" title=\"文字方塊輸入事件\"></a>文字方塊輸入事件</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>input</p></blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;input type&#x3D;&quot;text&quot;&gt;\n  &lt;script&gt;\n    const input &#x3D; document.querySelector(&#39;input&#39;)\n    &#x2F;&#x2F; 用戶輸入文本事件  input\n    input.addEventListener(&#39;input&#39;, function () &#123;\n      console.log(input.value)\n    &#125;)\n  &lt;&#x2F;script&gt;</code></pre>\n\n<h1 id=\"事件-對象-物件\"><a href=\"#事件-對象-物件\" class=\"headerlink\" title=\"事件(對象)物件\"></a>事件(對象)物件</h1><p>任意事件類型被觸發時與事件相關的資訊會被以物件的形式記錄下來，我們稱這個物件為事件物件。</p>\n<ul>\n<li>事件對像是什麼</li>\n<li>也是個對象，這個對象裡有事件觸發時的相關信息</li>\n<li>例如：鼠標點擊事件中，事件對象就存了鼠標點在哪個位置等信息</li>\n<li>使用場景</li>\n<li>可以判斷用戶按下哪個鍵，比如按下回車鍵可以發布新聞</li>\n<li>可以判斷鼠標點擊了哪個元素，從而做相應的操作<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>語法<br><code>元素.addEventListener(&#39;click&#39;, function (e)&#123;&#125;)</code></p></blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;事件物件&lt;&#x2F;h3&gt;\n  &lt;p&gt;任意事件類型被觸發時與事件相關的資訊會被以物件的形式記錄下來，我們稱這個物件為事件物件。&lt;&#x2F;p&gt;\n  &lt;hr&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 獲取 .box 元素\n    const box &#x3D; document.querySelector(&#39;.box&#39;)\n\n    &#x2F;&#x2F; 添加事件監聽\n    box.addEventListener(&#39;click&#39;, function (e) &#123;\n      console.log(&#39;任意事件類型被觸發後，相關資訊會以物件形式被記錄下來...&#39;);\n\n      &#x2F;&#x2F; 事件回呼函數的第1個參數即所謂的事件物件\n      console.log(e)\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>事件回呼函數的【第1個參數】即所謂的事件物件<br>通常習慣性的將這個對數命名為 <code>event</code>、<code>ev</code> 、<code>ev</code> 。</p></blockquote>\n<p>接下來簡單看一下事件物件中包含了哪些有用的資訊：</p>\n<ol>\n<li><code>ev.type</code> 當前事件的類型</li>\n<li><code>ev.clientX/Y</code> 游標相對流覽器窗口的位置</li>\n<li><code>ev.offsetX/Y</code> 游標相於當前 DOM 元素的位置</li>\n</ol>\n<ul>\n<li>補充 <code>key</code> 用户按下的鍵盤鍵的值</li>\n</ul>\n<p>注：在事件回呼函數內部通過 window.event 同樣可以獲取事件物件。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;input type&#x3D;&quot;text&quot;&gt;\n  &lt;script&gt;\n    const input &#x3D; document.querySelector(&#39;input&#39;)\n    input.addEventListener(&#39;keyup&#39;, function (e) &#123;\n      if (e.key &#x3D;&#x3D;&#x3D; &#39;Enter&#39;) &#123;\n        console.log(&#39;我按下了Enter&#39;)\n      &#125;\n    &#125;)\n  &lt;&#x2F;script&gt;</code></pre>\n<h1 id=\"環境-對象-物件\"><a href=\"#環境-對象-物件\" class=\"headerlink\" title=\"環境(對象)物件\"></a>環境(對象)物件</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>能夠分析判斷函數運行在不同環境中 this 所指代的物件。</p></blockquote>\n<p>環境物件指的是函數內部特殊的變數 <code>this</code> ，它代表著當前函數運行時所處的環境。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 聲明函數\n  function sayHi() &#123;\n    &#x2F;&#x2F; this 是一個變數\n    console.log(this);\n  &#125;\n\n  &#x2F;&#x2F; 聲明一個物件\n  let user &#x3D; &#123;\n    name: &#39;張三&#39;,\n    sayHi: sayHi &#x2F;&#x2F; 此處把 sayHi 函數，賦值給 sayHi 屬性\n  &#125;\n  \n  let person &#x3D; &#123;\n    name: &#39;李四&#39;,\n    sayHi: sayHi\n  &#125;\n\n  &#x2F;&#x2F; 直接調用\n  sayHi() &#x2F;&#x2F; window\n  window.sayHi() &#x2F;&#x2F; window\n\n  &#x2F;&#x2F; 做為物件方法調用\n  user.sayHi()&#x2F;&#x2F; user\n  person.sayHi()&#x2F;&#x2F; person\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>結論：</p>\n<ol>\n<li><code>this</code> 本質上是一個變數，資料類型為物件</li>\n<li>函數的調用方式不同 <code>this</code> 變數的值也不同</li>\n<li>【誰調用 <code>this</code> 就是誰】是判斷 <code>this</code> 值的粗略規則</li>\n<li>函數直接調用時實際上 <code>window.sayHi()</code> 所以 <code>this</code> 的值為 <code>window</code></li>\n</ol>\n<h1 id=\"回呼函數\"><a href=\"#回呼函數\" class=\"headerlink\" title=\"回呼函數\"></a>回呼函數</h1><p>如果將函數 A 做為參數傳遞給函數 B 時，我們稱函數 A 為回呼函數。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 聲明 foo 函數\n  function foo(arg) &#123;\n    console.log(arg);\n  &#125;\n\n  &#x2F;&#x2F; 普通的值做為參數\n  foo(10);\n  foo(&#39;hello world!&#39;);\n  foo([&#39;html&#39;, &#39;css&#39;, &#39;javascript&#39;]);\n\n  function bar() &#123;\n    console.log(&#39;函數也能當參數...&#39;);\n  &#125;\n  &#x2F;&#x2F; 函數也可以做為參數！！！！\n  foo(bar);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>函數 <code>bar</code> 做參數傳給了 <code>foo</code> 函數，<code>bar</code> 就是所謂的回呼函數了！！！</p>\n<p>回顧一下間歇函數 <code>setInterval</code> </p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  function fn() &#123;\n    console.log(&#39;我是回呼函數...&#39;);\n  &#125;\n  &#x2F;&#x2F; 調用計時器\n  setInterval(fn, 1000);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><code>fn</code> 函數做為參數傳給了 <code>setInterval</code> ，這便是回呼函數的實際應用了，結合剛剛學習的函數運算式上述代碼還有另一種更常見寫法。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 調用計時器，匿名函數做為參數\n  setInterval(function () &#123;\n    console.log(&#39;我是回呼函數...&#39;);\n  &#125;, 1000);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>結論：</p>\n<ol>\n<li>回呼函數本質還是函數，只不過把它當成參數使用</li>\n<li>使用匿名函數做為回呼函數比較常見</li>\n<li>把函數当做另外一个函数的参數傳遞，这个函數就叫回调函數</li>\n</ol>\n<h1 id=\"輪播圖練習\"><a href=\"#輪播圖練習\" class=\"headerlink\" title=\"輪播圖練習\"></a>輪播圖練習</h1><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot; &#x2F;&gt;\n  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n  &lt;title&gt;輪播圖點擊切換&lt;&#x2F;title&gt;\n  &lt;style&gt;\n    * &#123;\n      box-sizing: border-box;\n    &#125;\n\n    .slider &#123;\n      width: 560px;\n      height: 400px;\n      overflow: hidden;\n    &#125;\n\n    .slider-wrapper &#123;\n      width: 100%;\n      height: 320px;\n    &#125;\n\n    .slider-wrapper img &#123;\n      width: 100%;\n      height: 100%;\n      display: block;\n    &#125;\n\n    .slider-footer &#123;\n      height: 80px;\n      background-color: rgb(100, 67, 68);\n      padding: 12px 12px 0 12px;\n      position: relative;\n    &#125;\n\n    .slider-footer .toggle &#123;\n      position: absolute;\n      right: 0;\n      top: 12px;\n      display: flex;\n    &#125;\n\n    .slider-footer .toggle button &#123;\n      margin-right: 12px;\n      width: 28px;\n      height: 28px;\n      appearance: none;\n      border: none;\n      background: rgba(255, 255, 255, 0.1);\n      color: #fff;\n      border-radius: 4px;\n      cursor: pointer;\n    &#125;\n\n    .slider-footer .toggle button:hover &#123;\n      background: rgba(255, 255, 255, 0.2);\n    &#125;\n\n    .slider-footer p &#123;\n      margin: 0;\n      color: #fff;\n      font-size: 18px;\n      margin-bottom: 10px;\n    &#125;\n\n    .slider-indicator &#123;\n      margin: 0;\n      padding: 0;\n      list-style: none;\n      display: flex;\n      align-items: center;\n    &#125;\n\n    .slider-indicator li &#123;\n      width: 8px;\n      height: 8px;\n      margin: 4px;\n      border-radius: 50%;\n      background: #fff;\n      opacity: 0.4;\n      cursor: pointer;\n    &#125;\n\n    .slider-indicator li.active &#123;\n      width: 12px;\n      height: 12px;\n      opacity: 1;\n    &#125;\n  &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n  &lt;div class&#x3D;&quot;slider&quot;&gt;\n    &lt;div class&#x3D;&quot;slider-wrapper&quot;&gt;\n      &lt;img src&#x3D;&quot;.&#x2F;images&#x2F;slider01.jpg&quot; alt&#x3D;&quot;&quot; &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;slider-footer&quot;&gt;\n      &lt;p&gt;對人類來說會不會太超前了？ &lt;&#x2F;p&gt;\n      &lt;ul class&#x3D;&quot;slider-indicator&quot;&gt;\n        &lt;li class&#x3D;&quot;active&quot;&gt;&lt;&#x2F;li&gt;\n        &lt;li&gt;&lt;&#x2F;li&gt;\n        &lt;li&gt;&lt;&#x2F;li&gt;\n        &lt;li&gt;&lt;&#x2F;li&gt;\n        &lt;li&gt;&lt;&#x2F;li&gt;\n        &lt;li&gt;&lt;&#x2F;li&gt;\n        &lt;li&gt;&lt;&#x2F;li&gt;\n        &lt;li&gt;&lt;&#x2F;li&gt;\n      &lt;&#x2F;ul&gt;\n      &lt;div class&#x3D;&quot;toggle&quot;&gt;\n        &lt;button class&#x3D;&quot;prev&quot;&gt;&lt;&lt;&#x2F;button&gt;\n        &lt;button class&#x3D;&quot;next&quot;&gt;&gt;&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 1. 初始數據\n    const data &#x3D; [\n      &#123; url: &#39;.&#x2F;images&#x2F;slider01.jpg&#39;, title: &#39;對人類來說會不會太超前了？ &#39;, color: &#39;rgb(100, 67, 68)&#39; &#125;,\n      &#123; url: &#39;.&#x2F;images&#x2F;slider02.jpg&#39;, title: &#39;開啟劍與雪的黑暗傳說！ &#39;, color: &#39;rgb(43, 35, 26)&#39; &#125;,\n      &#123; url: &#39;.&#x2F;images&#x2F;slider03.jpg&#39;, title: &#39;真正的jo廚出現了！ &#39;, color: &#39;rgb(36, 31, 33)&#39; &#125;,\n      &#123; url: &#39;.&#x2F;images&#x2F;slider04.jpg&#39;, title: &#39;李玉剛：讓世界通過B站看到東方大國文化&#39;, color: &#39;rgb(139, 98, 66)&#39; &#125;,\n      &#123; url: &#39;.&#x2F;images&#x2F;slider05.jpg&#39;, title: &#39;快來分享你的寒假日常吧~&#39;, color: &#39;rgb(67, 90, 92)&#39; &#125;,\n      &#123; url: &#39;.&#x2F;images&#x2F;slider06.jpg&#39;, title: &#39;嗶哩嗶哩小年YEAH&#39;, color: &#39;rgb(166, 131, 143)&#39; &#125;,\n      &#123; url: &#39;.&#x2F;images&#x2F;slider07.jpg&#39;, title: &#39;一站式解決你的電腦配置問題！ ！ ！ &#39;, color: &#39;rgb(53, 29, 25)&#39; &#125;,\n      &#123; url: &#39;.&#x2F;images&#x2F;slider08.jpg&#39;, title: &#39;誰不想和小貓咪貼貼呢！ &#39;, color: &#39;rgb(99, 72, 114)&#39; &#125;,\n    ]\n    &#x2F;&#x2F; 獲取元素\n    const img &#x3D; document.querySelector(&#39;.slider-wrapper img&#39;)\n    const p &#x3D; document.querySelector(&#39;.slider-footer p&#39;)\n    const footer &#x3D; document.querySelector(&#39;.slider-footer&#39;)\n    &#x2F;&#x2F; 1. 右按鈕業務\n    &#x2F;&#x2F; 1.1 獲取右側按鈕 \n    const next &#x3D; document.querySelector(&#39;.next&#39;)\n    let i &#x3D; 0  &#x2F;&#x2F; 信號量 控製播放圖片張數\n    &#x2F;&#x2F; 1.2 註冊點擊事件\n\n    next.addEventListener(&#39;click&#39;, function () &#123;\n      &#x2F;&#x2F; console.log(11)\n      i++\n      &#x2F;&#x2F; 1.6判斷條件  如果大於8 就復原為 0\n      &#x2F;&#x2F; if (i &gt;&#x3D; 8) &#123;\n      &#x2F;&#x2F;   i &#x3D; 0\n      &#x2F;&#x2F; &#125;\n      i &#x3D; i &gt;&#x3D; data.length ? 0 : i\n      &#x2F;&#x2F; 1.3 得到對應的對象\n      &#x2F;&#x2F; console.log(data[i])\n      &#x2F;&#x2F; 調用函數\n      toggle()\n    &#125;)\n\n    &#x2F;&#x2F; 2. 左側按鈕業務\n    &#x2F;&#x2F; 2.1 獲取左側按鈕 \n    const prev &#x3D; document.querySelector(&#39;.prev&#39;)\n    &#x2F;&#x2F; 1.2 註冊點擊事件\n    prev.addEventListener(&#39;click&#39;, function () &#123;\n      i--\n      &#x2F;&#x2F; 判斷條件  如果小於0  則爬到最後一張圖片索引號是 7\n      &#x2F;&#x2F; if (i &lt; 0) &#123;\n      &#x2F;&#x2F;   i &#x3D; 7\n      &#x2F;&#x2F; &#125;\n      i &#x3D; i &lt; 0 ? data.length - 1 : i\n      &#x2F;&#x2F; 1.3 得到對應的對象\n      &#x2F;&#x2F; console.log(data[i])\n      &#x2F;&#x2F; 調用函數\n      toggle()\n    &#125;)\n\n    &#x2F;&#x2F; 聲明一個渲染的函數作為複用\n    function toggle() &#123;\n      &#x2F;&#x2F; 1.4 渲染對應的數據\n      img.src &#x3D; data[i].url\n      p.innerHTML &#x3D; data[i].title\n      footer.style.backgroundColor &#x3D; data[i].color\n      &#x2F;&#x2F; 1.5 更換小圓點    先移除原來的類名， 當前li再添加 這個 類名\n      document.querySelector(&#39;.slider-indicator .active&#39;).classList.remove(&#39;active&#39;)\n      document.querySelector(&#96;.slider-indicator li:nth-child($&#123;i + 1&#125;)&#96;).classList.add(&#39;active&#39;)\n    &#125;\n\n\n&#x2F;&#x2F; 3. 自動播放模塊\n    let timerId &#x3D; setInterval(function () &#123;\n      &#x2F;&#x2F; 利用js自動調用點擊事件  click()  一定加小括號調用函數\n      next.click()\n    &#125;, 1000)\n\n\n    &#x2F;&#x2F; 4. 鼠標經過大盒子，停止定時器\n    const slider &#x3D; document.querySelector(&#39;.slider&#39;)\n    &#x2F;&#x2F; 註冊事件\n    slider.addEventListener(&#39;mouseenter&#39;, function () &#123;\n      &#x2F;&#x2F; 停止定時器\n      clearInterval(timerId)\n    &#125;)\n\n    &#x2F;&#x2F; 5. 鼠標離開大盒子，開啟定時器\n    &#x2F;&#x2F; 註冊事件\n    slider.addEventListener(&#39;mouseleave&#39;, function () &#123;\n      &#x2F;&#x2F; 停止定時器\n      if (timerId) clearInterval(timerId)\n      &#x2F;&#x2F; 開啟定時器\n      timerId &#x3D; setInterval(function () &#123;\n        &#x2F;&#x2F; 利用js自動調用點擊事件  click()  一定加小括号调用函数\n        next.click()\n      &#125;, 1000)\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;</code></pre>\n\n\n\n\n\n\n\n","feature":null,"text":" 學會通過為DOM註冊事件來實現可交互的網頁特效。 能夠判斷函數運行的環境並確字 this 所指代的物件 理解事件的作用，知道應用事件的 3 個步驟 學習會為 DOM 註冊事件，實現簡單可交互的網頁特交。 事件事件是程式設計語言中的術語，它是用來描述程式的行為或狀態的，一旦行為或...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%9B%A3%E8%81%BD\"><span class=\"toc-text\">事件監聽</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E9%A1%9E%E5%9E%8B\"><span class=\"toc-text\">事件類型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E8%99%95%E7%90%86%E5%B8%B8%E5%BC%8F\"><span class=\"toc-text\">事件處理常式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E9%A1%9E%E5%9E%8B-1\"><span class=\"toc-text\">事件類型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BB%91%E9%BC%A0%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">滑鼠事件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%84%A6%E9%BB%9E%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">焦點事件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%8D%B5%E7%9B%A4%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">鍵盤事件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E5%AD%97%E6%96%B9%E5%A1%8A%E8%BC%B8%E5%85%A5%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">文字方塊輸入事件</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6-%E5%B0%8D%E8%B1%A1-%E7%89%A9%E4%BB%B6\"><span class=\"toc-text\">事件(對象)物件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%92%B0%E5%A2%83-%E5%B0%8D%E8%B1%A1-%E7%89%A9%E4%BB%B6\"><span class=\"toc-text\">環境(對象)物件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E5%91%BC%E5%87%BD%E6%95%B8\"><span class=\"toc-text\">回呼函數</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BC%AA%E6%92%AD%E5%9C%96%E7%B7%B4%E7%BF%92\"><span class=\"toc-text\">輪播圖練習</span></a></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript Web APIs - 第3天","uid":"4c656a1bef12133b7e372d516df2e64e","slug":"2303-2 JS Web APIs 03 事件流","date":"2023-03-25T01:22:08.000Z","updated":"2023-03-28T02:29:37.721Z","comments":true,"path":"api/articles/2303-2 JS Web APIs 03 事件流.json","keywords":null,"cover":[],"text":" 進一步學習 事件進階，實現更多交互的網頁特效，結合事件流的特徵優化事件執行的效率 掌握阻止事件冒泡的方法 理解事件委託的實現原理 事件流事件流是對事件執行過程的描述，瞭解事件的執行過程有助於加深對事件的理解，提升開發實踐中對事件運用的靈活度。 如上圖所示，任意事件被觸發時總會經...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"JavaScript Web APIs - 第1天","uid":"0a48fb7912b57657825a8de1e5528e6f","slug":"2303-2 JS Web APIs 01 DOM","date":"2023-03-23T01:22:08.000Z","updated":"2023-03-26T01:51:05.947Z","comments":true,"path":"api/articles/2303-2 JS Web APIs 01 DOM.json","keywords":null,"cover":null,"text":"複習：splice() 方法用於添加或刪除陣列中的元素。 注意：這種方法會改變原始陣列。 刪除陣列： splice(起始位置， 刪除的個數) 比如：1 let arr &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;] ...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}