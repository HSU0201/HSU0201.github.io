{"title":"資料庫概述","uid":"26478f3dfc6b501436963f38a4c764d1","slug":"MYSQL01 【資料庫概述】","date":"2023-11-17T08:22:05.000Z","updated":"2024-02-05T00:42:59.229Z","comments":true,"path":"api/articles/MYSQL01 【資料庫概述】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/blog-Article-Cover/34516.8338345.jpg?raw=true","content":"<h1 id=\"01-【資料庫概述】\"><a href=\"#01-【資料庫概述】\" class=\"headerlink\" title=\"01 【資料庫概述】\"></a>01 【資料庫概述】</h1><p>資料庫是用來存儲和組織資訊的系統，它可以有效地管理大量的數據，並提供對這些數據的快速訪問和檢索。在計算機科學和資訊技術領域中，有許多不同類型的資料庫，每種資料庫都有其自身的特點和適用場景。</p>\n<h2 id=\"1-為什麼要使用資料庫\"><a href=\"#1-為什麼要使用資料庫\" class=\"headerlink\" title=\"1.為什麼要使用資料庫\"></a>1.為什麼要使用資料庫</h2><ul>\n<li><p><strong>持久化 (Persistence)：</strong></p>\n<ul>\n<li>把資料儲存到可掉電式存儲設備中以供之後使用。即使在系統故障或停電情況下，數據也不會丟失，通過持久化機制確保數據的安全性和完整性。</li>\n<li>企業級應用中的意義：將內存中的資料<code>儲存到硬盤上加以固化</code>，通常通過<code>關聯式資料庫</code>來實現。</li>\n</ul>\n</li>\n<li><p><strong>資料組織和管理</strong>：</p>\n<ul>\n<li>資料庫幫助組織和管理大量的數據，提供結構化的方法存儲和維護數據，使數據易於<strong>管理</strong>、<strong>查找</strong>和<strong>更新</strong>。</li>\n<li>資料庫支持事務處理，確保一組操作要麼全部完成，要麼全部不完成，有助於確保數據的一致性和完整性。</li>\n<li>資料庫提供各種管理工具和功能，幫助管理員有效地管理數據庫系統，包括性能優化、數據備份和恢復、故障排除等。</li>\n</ul>\n</li>\n<li><p><strong>數據共享和協作</strong>：</p>\n<ul>\n<li>資料庫是多個用戶共享和協作的理想工具，多個用戶可以同時訪問和修改資料庫中的數據，實現數據的共享和協作。</li>\n</ul>\n</li>\n<li><p><strong>數據安全性</strong>：</p>\n<ul>\n<li>資料庫提供各種安全機制保護數據的安全性，包括訪問控制、加密、數據備份和恢復等功能，防止數據被未授權用戶訪問和修改。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i0.hdslb.com/bfs/album/cb722175a5ba048203bee951d9ee8c6d54f88cbd.png\" alt=\"image-20221010092111082\"></p>\n<h2 id=\"2-資料庫與資料庫管理系統\"><a href=\"#2-資料庫與資料庫管理系統\" class=\"headerlink\" title=\"2.資料庫與資料庫管理系統\"></a>2.資料庫與資料庫管理系統</h2><h3 id=\"2-1-相關概念\"><a href=\"#2-1-相關概念\" class=\"headerlink\" title=\"2.1 相關概念\"></a>2.1 相關概念</h3><table>\n<thead>\n<tr>\n<th>概念</th>\n<th>概述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DB：資料庫（Database）</td>\n<td>即存儲資料的“倉庫”，其本質是一個文件系統。它儲存了一系列有組織的資料。</td>\n</tr>\n<tr>\n<td>DBMS：資料庫管理系統（Database Management System）</td>\n<td>是一種操縱和管理資料庫的大型軟件，用於建立、使用和維護資料庫，對資料庫進行統一管理和控制。用戶通過資料庫管理系統存取資料庫中表內的資料。</td>\n</tr>\n<tr>\n<td>SQL：結構化查詢語言（Structured Query Language）</td>\n<td>專門用來與資料庫通信的語言。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-資料庫與資料庫管理系統的關係\"><a href=\"#2-2-資料庫與資料庫管理系統的關係\" class=\"headerlink\" title=\"2.2 資料庫與資料庫管理系統的關係\"></a>2.2 資料庫與資料庫管理系統的關係</h3><p>資料庫管理系統(DBMS)可以管理多個資料庫，一般開發人員會針對每一個應用創建一個資料庫。為儲存應用中實體的資料，一般會在資料庫創建多個表，以儲存程序中實體用戶的資料。</p>\n<p>資料庫管理系統、資料庫和表的關係如圖所示：</p>\n<p><img src=\"https://i0.hdslb.com/bfs/album/f2c2a8785a6275c72b7c472b10eb418b482e33f7.png\" alt=\"image-20221010092127924\"></p>\n<h3 id=\"2-3-常見的資料庫管理系統排名-DBMS\"><a href=\"#2-3-常見的資料庫管理系統排名-DBMS\" class=\"headerlink\" title=\"2.3 常見的資料庫管理系統排名(DBMS)\"></a>2.3 常見的資料庫管理系統排名(DBMS)</h3><p><img src=\"https://i0.hdslb.com/bfs/album/fd560e19485822a6d0108e7ea3d17fdeade5e0eb.png\" alt=\"image-20221010092139118\"></p>\n<p>對應的走勢圖：（<a href=\"https://db-engines.com/en/ranking_trend%EF%BC%89\">https://db-engines.com/en/ranking_trend）</a></p>\n<p><img src=\"https://i0.hdslb.com/bfs/album/8dc32c4db22f929441ff78b890e7131c65f93cc2.png\" alt=\"image-20221010092154044\"></p>\n<h3 id=\"2-4-常見的資料庫類型\"><a href=\"#2-4-常見的資料庫類型\" class=\"headerlink\" title=\"2.4 常見的資料庫類型\"></a>2.4 常見的資料庫類型</h3><ol>\n<li>關聯式資料庫（Relational Database）：</li>\n</ol>\n<ul>\n<li>關聯式資料庫是以表格的形式組織資料的，這些表格之間通過主鍵和外鍵關係進行連接。</li>\n<li>最常見的關聯式資料庫管理系統（RDBMS）包括 MySQL、PostgreSQL、Oracle、Microsoft SQL Server 等。</li>\n<li>使用結構化查詢語言（SQL）來操作和管理資料。</li>\n</ul>\n<ol start=\"2\">\n<li>非關聯式資料庫（NoSQL Database）：</li>\n</ol>\n<ul>\n<li>非關聯式資料庫不使用傳統的表格結構，而是使用其他方式來組織和存儲資料，如文檔、鍵值對、列族、圖形等。</li>\n<li>非關聯式資料庫通常用於需要處理大量非結構化或半結構化數據的應用場景，如大數據、即時分析等。</li>\n<li>常見的非關聯式資料庫包括 MongoDB、Cassandra、Redis、Couchbase 等。</li>\n</ul>\n<ol start=\"3\">\n<li>圖形資料庫（Graph Database）：</li>\n</ol>\n<ul>\n<li>圖形資料庫專門用於存儲圖形結構的資料，其中的數據以節點（node）和邊（edge）的形式表示，用於表示實體之間的關係。</li>\n<li>圖形資料庫對於需要進行複雜的關係查詢和分析的應用場景非常有用，如社交網絡、推薦系統等。</li>\n<li>Neo4j 是一個常見的圖形資料庫。</li>\n</ul>\n<ol start=\"4\">\n<li>內存資料庫（In-Memory Database）：</li>\n</ol>\n<ul>\n<li>內存資料庫將數據完全存儲在計算機的內存中，這樣可以實現非常快的數據讀寫速度。</li>\n<li>內存資料庫通常用於需要快速響應和處理大量事務的應用場景，如金融交易、在線遊戲等。</li>\n<li>Redis 和 Memcached 是兩個常見的內存資料庫。</li>\n</ul>\n<ol start=\"5\">\n<li>分佈式資料庫（Distributed Database）：</li>\n</ol>\n<ul>\n<li>分佈式資料庫將數據分散存儲在多個物理或邏輯位置上，這樣可以提高數據的可用性、可靠性和擴展性。</li>\n<li>分佈式資料庫常用於需要處理大量數據和提供高性能的應用場景，如互聯網應用、大數據分析等。</li>\n<li>Apache Hadoop、Apache Cassandra、Amazon DynamoDB 等都是常見的分佈式資料庫。</li>\n</ul>\n<h3 id=\"2-5-常見的資料庫介紹\"><a href=\"#2-5-常見的資料庫介紹\" class=\"headerlink\" title=\"2.5 常見的資料庫介紹\"></a>2.5 常見的資料庫介紹</h3><p><strong>MySQL：</strong><br>MySQL 是一個開源的關聯式資料庫管理系統（RDBMS），廣泛應用於各種網絡應用和中小型企業的資料管理中。<br>它支援多種操作系統，具有高性能、穩定性和可靠性，並且提供了廣泛的功能和工具。</p>\n<p><strong>PostgreSQL：</strong><br>PostgreSQL 是另一個開源的關聯式資料庫管理系統，被廣泛用於企業級應用和大型數據系統。<br>它提供了許多高級功能，如事務處理、外鍵支援、觸發器和存儲過程等，同時具有良好的擴展性和安全性。</p>\n<p><strong>Oracle Database：</strong><br>Oracle Database 是一個強大的關聯式資料庫管理系統，用於企業級應用和大型組織的資料管理。<br>它提供了廣泛的功能和工具，包括高級的數據處理、安全性、備份和恢復等功能。</p>\n<p><strong>MongoDB：</strong><br>MongoDB 是一個開源的非關聯式資料庫管理系統，使用文檔導向的資料模型，特別適用於處理大量非結構化數據。<br>它支援動態查詢、索引、負載平衡和數據複製等功能，並且具有良好的擴展性和性能。</p>\n<p><strong>Redis：</strong><br>Redis 是一個開源的內存資料庫管理系統，用於高速數據緩存、會話存儲、消息代理等場景。<br>它支援多種數據結構，如字符串、哈希、列表、集合和有序集合等，並且提供了持久化支援和集群功能。</p>\n<p><strong>Neo4j：</strong><br>Neo4j 是一個知名的圖形資料庫管理系統，專門用於存儲和查詢圖形結構的資料。<br>它提供了強大的圖形查詢語言和高性能的圖形算法，適用於複雜的關係分析和圖形數據可視化。</p>\n<h2 id=\"3-MySQL-介紹\"><a href=\"#3-MySQL-介紹\" class=\"headerlink\" title=\"3.MySQL 介紹\"></a>3.MySQL 介紹</h2><h3 id=\"3-1-概述\"><a href=\"#3-1-概述\" class=\"headerlink\" title=\"3.1 概述\"></a>3.1 概述</h3><ul>\n<li>MySQL 是一個<code>開放源代碼的關聯式資料庫管理系統</code>，由瑞典 MySQL AB（創始人 Michael Widenius）公司 1995 年開發，迅速成為開源資料庫的 No.1。</li>\n<li>2008 被<code>Sun</code>收購（10 億美金），2009 年 Sun 被<code>Oracle</code>收購。<code>MariaDB</code>應運而生。（MySQL 的創造者擔心 MySQL 有閉源的風險，因此創建了 MySQL 的分支項目 MariaDB）</li>\n<li>MySQL6.x 版本之後分為<code>社群版</code>和<code>商業版</code>。</li>\n<li>MySQL 是一種關聯資料庫管理系統，將資料儲存在不同的表中，而不是將所有資料放在一個大倉庫內，這樣就增加了速度並提高了靈活性。</li>\n<li>MySQL 是開源的，所以你不需要支付額外的費用。</li>\n<li>MySQL 是可以定製的，採用了<code>GPL（GNU General Public License）</code>協議，你可以修改源碼來開發自己的 MySQL 系統。</li>\n<li>MySQL 支持大型的資料庫。可以處理擁有上仟萬條記錄的大型資料庫。</li>\n<li>MySQL 支持大型資料庫，支持 5000 萬條記錄的資料倉庫，32 位系統表文件最大可支持<code>4GB</code>，64 位系統支持最大的表文件為<code>8TB</code>。</li>\n<li>MySQL 使用<code>標準的SQL資料語言</code>形式。</li>\n<li>MySQL 可以允許執行於多個系統上，並且支持多種語言。這些編程語言包括 C、C++、Python、Java、Perl、PHP 和 Ruby 等。</li>\n</ul>\n<h3 id=\"3-2-關於-MySQL-8-0\"><a href=\"#3-2-關於-MySQL-8-0\" class=\"headerlink\" title=\"3.2 關於 MySQL 8.0\"></a>3.2 關於 MySQL 8.0</h3><p><code>MySQL從5.7版本直接跳躍發布了8.0版本</code>，可見這是一個令人興奮的裏程碑版本。MySQL 8 版本在功能上做了顯著的改進與增強，開發者對 MySQL 的源代碼進行了重構，最突出的一點是多 MySQL Optimizer 優化器進行了改進。</p>\n<p>不僅在速度上得到了改善，還為用戶帶來了更好的性能和更棒的體驗。</p>\n<h3 id=\"3-3-Why-choose-MySQL\"><a href=\"#3-3-Why-choose-MySQL\" class=\"headerlink\" title=\"3.3 Why choose MySQL?\"></a>3.3 Why choose MySQL?</h3><p>為什麼如此多的廠商要選用 MySQL？大概總結的原因主要有以下幾點：</p>\n<ol>\n<li>開放源代碼，使用成本低。</li>\n<li>性能卓越，服務穩定。</li>\n<li>軟件體積小，使用簡單，並且易於維護。</li>\n<li>歷史悠久，社群用戶非常活躍，遇到問題可以尋求幫助。</li>\n<li>許多網際網路公司在用，經過了時間的驗證。</li>\n</ol>\n<h3 id=\"3-4-Oracle-vs-MySQL\"><a href=\"#3-4-Oracle-vs-MySQL\" class=\"headerlink\" title=\"3.4 Oracle vs MySQL\"></a>3.4 Oracle vs MySQL</h3><ul>\n<li>Oracle<ul>\n<li>更適合大型跨國企業的使用，因為他們對費用不敏感，但是對性能要求以及安全性有更高的要求。</li>\n</ul>\n</li>\n<li>MySQL<ul>\n<li>由於其體積小、速度快、總體擁有成本低，可處理上仟萬條記錄的大型資料庫，尤其是開放源碼這一特點，使得很多網際網路公司、中小型網站選擇了 MySQL 作為網站資料庫（Facebook，Twitter，YouTube，阿裏巴巴&#x2F;螞蟻金服，去哪兒，美團外賣，騰訊）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-RDBMS-與-非-RDBMS\"><a href=\"#4-RDBMS-與-非-RDBMS\" class=\"headerlink\" title=\"4.RDBMS 與 非 RDBMS\"></a>4.RDBMS 與 非 RDBMS</h2><h3 id=\"4-1-關聯式資料庫-RDBMS\"><a href=\"#4-1-關聯式資料庫-RDBMS\" class=\"headerlink\" title=\"4.1 關聯式資料庫(RDBMS)\"></a>4.1 關聯式資料庫(RDBMS)</h3><ul>\n<li>這種型別的資料庫是<code>最古老</code> 的資料庫型別，關聯式資料庫模型是把複雜的資料結構歸結為簡單的<code>二元關係</code>（即二維表格形式）。</li>\n</ul>\n<p><img src=\"https://github.com/HSU0201/images/blob/main/mySQL/mysql.png?raw=true\" alt=\"二維表格形式\"></p>\n<ul>\n<li><p>關聯式資料庫是一種以<code>行（row）</code>和<code>列（column）</code>的形式來組織和存儲資料的資料庫系統。在關聯式資料庫中，數據被組織成<code>表（table）</code>的形式，每個表包含一系列的行和列，行代表特定的資料記錄，而列則代表不同的資料屬性或字段。</p>\n</li>\n<li><p>表與表之間的資料記錄之間可以存在關係，這種關係可以通過不同表之間的共同字段來建立。這種<code>關係模型</code>有助於描述現實世界中各種實體（entities）以及這些實體之間的關係（relationships）。</p>\n</li>\n<li><p>關聯式資料庫建立在<code>關係模型</code>的基礎上，通過組織資料成表的形式，並且建立表之間的關係，實現了數據的結構化存儲和管理。這使得用戶可以通過簡單而直觀的方式來理解和操作資料。</p>\n</li>\n<li><p>SQL（Structured Query Language）是關聯式資料庫的查詢語言，它提供了一套標準化的語法和命令，用於對關聯式資料庫中的資料進行查詢、更新、添加和刪除等操作。SQL 的使用使得用戶可以以簡單、有效的方式與關聯式資料庫進行交互，執行各種數據操作，並獲取需要的資訊。</p>\n</li>\n</ul>\n<p><img src=\"https://i0.hdslb.com/bfs/album/e1526e63290953601aa7f335e40d596aba6b8e21.png\" alt=\"image-20221009193342894\"></p>\n<ul>\n<li>優勢<ul>\n<li><code>複雜查詢</code> 可以用 SQL 語句方便的在一個表以及多個表之間做非常複雜的資料查詢。</li>\n<li><code>事務支持</code> 使得對於安全性能很高的資料存取要求得以實現。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-非關聯式資料庫-非-RDBMS\"><a href=\"#4-2-非關聯式資料庫-非-RDBMS\" class=\"headerlink\" title=\"4.2 非關聯式資料庫(非 RDBMS)\"></a>4.2 非關聯式資料庫(非 RDBMS)</h3><p><strong>介紹</strong></p>\n<p>非關聯式資料庫，可看成傳統關聯式資料庫的功能 <code>閹割版本</code> ，基於鍵值對存儲資料，不需要經過 SQL 層的解析， <code>性能非常高</code> 。同時，通過減少不常用的功能，進一步<code>提高性能</code>。</p>\n<p><strong>有哪些非關聯式資料庫</strong></p>\n<ol>\n<li><p>鍵值型資料庫</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">鍵值型資料庫通過 Key-Value 鍵值的方式來存儲資料，其中 Key 和 Value 可以是簡單的物件，也可以是複雜的物件。`Key 作為唯一的標識符，優點是查找速度快`，在這方面明顯優於關聯式資料庫，缺點是無法像關聯式資料庫一樣使用條件過濾（比如 WHERE），如果你不知道去哪裏找資料，就要遍曆所有的鍵，這就會消耗大量的計算。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">鍵值型資料庫典型的使用場景是作為`內存緩存`。`Redis`是最流行的鍵值型資料庫。</span></span></code></pre></div><p><img src=\"https://i0.hdslb.com/bfs/album/6b962b85173ea15871694565f7c002ceadb35d8a.png\" alt=\"鍵值型資料庫\"></p>\n</li>\n<li><p>文檔型資料庫</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">此類資料庫可存放並獲取文檔，可以是 XML、JSON 等格式。在資料庫中文檔作為處理資訊的基本單位，一個文檔就相當於一條記錄。文檔資料庫所存放的文檔，就相當於鍵值資料庫所存放的“值”。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">MongoDB 是最流行的文檔型資料庫。此外，還有 CouchDB 等。</span></span></code></pre></div><p><img src=\"https://github.com/HSU0201/images/blob/main/mySQL/mysql2.png?raw=true\" alt=\"文檔型資料庫\"></p>\n</li>\n<li><p>搜索引擎資料庫</p>\n<p>搜索引擎資料庫是應用在搜索引擎領域的資料存儲形式，由於搜索引擎會爬取大量的資料，並以特定的格式進行存儲，這樣在檢索的時候才能保證性能最優。核心原理是“倒排索引”。</p>\n<p>典型産品：Solr、Elasticsearch、Splunk 等。</p>\n</li>\n<li><p>列式資料庫</p>\n<p>列式資料庫是相對於行式存儲的資料庫，Oracle、MySQL、SQL Server 等資料庫都是採用的行式存儲（Row-based），而列式資料庫是將資料按照列存儲到資料庫中，這樣做的好處是可以大量降低系統的 I&#x2F;O，適合於分布式文件系統，不足在於功能相對有限。典型産品：HBase 等。</p>\n</li>\n</ol>\n<p><img src=\"https://i0.hdslb.com/bfs/album/4fca5427bcc287414d5eb71fb0e3af90d2b5ff95.png\" alt=\"image-20221009193746733\"></p>\n<ol start=\"5\">\n<li>圖形資料庫</li>\n</ol>\n<p>圖形資料庫，利用了圖這種資料結構存儲了實體（物件）之間的關係。圖形資料庫最典型的例子就是社交網絡中人與人的關係，資料模型主要是以節點和邊（關係）來實現，特點在於能高效地解決複雜的關係問題。</p>\n<p>圖形資料庫顧名思義，就是一種存儲圖形關係的資料庫。它利用了圖這種資料結構存儲了實體（物件）之間的關係。關係型資料用於存儲明確關係的資料，但對於複雜關係的資料存儲卻有些力不從心。如社交網絡中人物之間的關係，如果用關聯式資料庫則非常複雜，用圖形資料庫將非常簡單。典型産品：Neo4J、InfoGrid 等。</p>\n<h3 id=\"4-3-小結\"><a href=\"#4-3-小結\" class=\"headerlink\" title=\"4.3 小結\"></a>4.3 小結</h3><p>在數據庫管理系統（DBMS）的排名中，關聯式資料庫的比重仍然佔主導地位，這在一定程度上反映了 SQL 的重要性和廣泛應用。儘管 NoSQL 技術的發展和應用在某些場景下已經展示出了優勢，但是關聯式資料庫仍然是許多企業和組織的首選，特別是在傳統業務和企業級應用中。</p>\n<p>影響力前 5 的 DBMS 中有 4 個是關聯式資料庫，而排名前 20 的 DBMS 中也有 12 個是關聯式資料庫。所以說，掌握 SQL 是非常有必要的。</p>\n<h2 id=\"5-關聯式資料庫設計規則\"><a href=\"#5-關聯式資料庫設計規則\" class=\"headerlink\" title=\"5.關聯式資料庫設計規則\"></a>5.關聯式資料庫設計規則</h2><ul>\n<li>關聯式資料庫的典型資料結構就是<code>資料表</code>，這些資料表的組成都是結構化的（Structured）。</li>\n<li>將資料放到表中，表再放到庫中。</li>\n<li>一個資料庫中可以有多個表，每個表都有一個名字，用來標識自己。表名具有唯一性。</li>\n<li>表具有一些特性，這些特性定義了資料在表中如何存儲，類似 Java 和 Python 中 “類”的設計。</li>\n</ul>\n<h3 id=\"5-1-表、記錄、字段\"><a href=\"#5-1-表、記錄、字段\" class=\"headerlink\" title=\"5.1 表、記錄、字段\"></a>5.1 表、記錄、字段</h3><ul>\n<li>E-R（entity-relationship，實體-關係模型）模型中有三個主要概念是： <code>實體集</code> 、<code>屬性</code> 、<code>關係集</code>。</li>\n<li>一個實體集（class）對應於資料庫中的一個表（table），一個實體（instance）則對應於資料庫表中的一行（row），也稱為一條記錄（record）。一個屬性（attribute）對應於資料庫表中的一列（column），也稱為一個字段（field）。</li>\n</ul>\n<p>​ <img src=\"https://i0.hdslb.com/bfs/album/fe3326c0ea9c11d14eb0378595932c9841a76ece.png\" alt=\"image-20221009193923504\"></p>\n<h3 id=\"擴展閱讀-ORM（Object-Relational-Mapping）\"><a href=\"#擴展閱讀-ORM（Object-Relational-Mapping）\" class=\"headerlink\" title=\"[擴展閱讀]ORM（Object-Relational Mapping）\"></a>[擴展閱讀]ORM（Object-Relational Mapping）</h3><p><code>ORM思想</code>(Object Relational Mapping)體現解決關聯式資料庫和物件導向程式設計之間的不匹配。它通過將資料庫中的資料映射到程式中的物件，以及將物件的操作映射到資料庫的操作，實現了資料庫和應用程式之間的無縫整合。</p>\n<ol>\n<li>映射：ORM 將資料庫中的表、行和列映射到程式中的物件和屬性。</li>\n<li>減少重複性的代碼：ORM 能夠自動生成資料庫操作代碼，減少了重複性的代碼量。</li>\n<li>提高開發效率：ORM 提供了簡潔、直觀的 API，使開發人員能夠更快地開發出具有資料庫支援的應用程式。</li>\n<li>提高可維護性：ORM 將資料庫操作封裝在物件的方法中，使程式碼更加模組化和可維護。</li>\n<li>跨平台性：ORM 框架通常支援多種資料庫系統，使得應用程式更具彈性。</li>\n<li>提供事務支援：ORM 框架提供了事務管理的功能，保證資料庫操作的原子性和一致性。</li>\n</ol>\n<h3 id=\"5-2-表的關聯關係\"><a href=\"#5-2-表的關聯關係\" class=\"headerlink\" title=\"5.2 表的關聯關係\"></a>5.2 表的關聯關係</h3><ul>\n<li>表與表之間的資料記錄有關係(relationship)。現實世界中的各種實體以及實體之間的各種關係均用關係模型來表示。</li>\n<li>四種：<ul>\n<li>一對一（One-to-One）關係</li>\n<li>一對多（One-to-Many）關係</li>\n<li>多對多（Many-to-Many）關係</li>\n<li>自我引用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-2-1-一對一關聯（one-to-one）\"><a href=\"#5-2-1-一對一關聯（one-to-one）\" class=\"headerlink\" title=\"5.2.1 一對一關聯（one-to-one）\"></a>5.2.1 一對一關聯（one-to-one）</h4><ul>\n<li><p>在實際的開發中應用不多，因為一對一可以創建成一張表。</p>\n</li>\n<li><p>兩個資料表之間的關係，其中一個記錄在一個表中只對應另一個表中的一個記錄。</p>\n</li>\n<li><p>舉例：設計<code>學生表</code>：學號、姓名、手機號碼、班級、係別、身份證號碼、家庭住址、籍貫、緊急關係人、…</p>\n<ul>\n<li>拆為兩個表：兩個表的記錄是一一對應關係。</li>\n<li><code>基礎資訊表</code>（常用資訊）：學號、姓名、手機號碼、班級、係別</li>\n<li><code>檔案資訊表</code>（不常用資訊）：學號、身份證號碼、家庭住址、籍貫、緊急關係人、…</li>\n</ul>\n</li>\n<li><p>兩種建表原則：</p>\n<ul>\n<li><p>外鍵唯一：主表的主鍵和從表的外鍵（唯一），形成主外鍵關係，外鍵唯一。</p>\n</li>\n<li><p>外鍵是主鍵：主表的主鍵和從表的主鍵，形成主外鍵關係。</p>\n<p>（主表和從表的區分：從表一般需要創建一個外鍵來引用主表的主鍵）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i0.hdslb.com/bfs/album/16fb1f06fdace7c1e103ebc11b711791a950f699.png\" alt=\"image-20221010092502050\"></p>\n<h4 id=\"5-2-2-一對多關係（one-to-many）\"><a href=\"#5-2-2-一對多關係（one-to-many）\" class=\"headerlink\" title=\"5.2.2 一對多關係（one-to-many）\"></a>5.2.2 一對多關係（one-to-many）</h4><ul>\n<li>兩個資料表之間的關係，其中一個記錄在一個表中可以對應另一個表中的多個記錄。</li>\n<li>常見實例場景：<code>客戶表和訂單表</code>，<code>分類表和商品表</code>，<code>部門表和員工表</code>。</li>\n<li>舉例：<ul>\n<li>部門表：編號、名稱、簡介</li>\n<li>員工表：編號、姓名、…、所屬部門</li>\n</ul>\n</li>\n<li>一對多建表原則：在從表(多方)創建一個字段，字段作為外鍵指向主表(一方)的主鍵</li>\n</ul>\n<p><img src=\"https://i0.hdslb.com/bfs/album/ee4609f88cbd952cf81b2f7f1748d620cb29224c.png\" alt=\"image-20221010092610370\"></p>\n<p><img src=\"https://i0.hdslb.com/bfs/album/dcd021fe5db02d3d6f729dba318ea613c2cfd942.png\" alt=\"image-20221010092617886\"></p>\n<p><img src=\"https://i0.hdslb.com/bfs/album/f7fb71b0c31fe0cd9c9a172830b36d382fa1992f.png\" alt=\"image-20221010092624579\"></p>\n<h4 id=\"5-2-3-多對多（many-to-many）\"><a href=\"#5-2-3-多對多（many-to-many）\" class=\"headerlink\" title=\"5.2.3 多對多（many-to-many）\"></a>5.2.3 多對多（many-to-many）</h4><ul>\n<li>兩個資料表之間的關係，其中一個記錄在一個表中可以對應多個記錄，同時另一個表中的記錄也可以對應多個記錄。通常需要通過中間表（Join Table）來實現多對多關係。它將多對多關係劃分為兩個一對多關係。將這兩個表的主鍵都插入到第三個表中。</li>\n</ul>\n<p><img src=\"https://github.com/HSU0201/images/blob/main/mySQL/%E5%9C%96%E7%89%871.png?raw=true\" alt=\"圖片\"></p>\n<p><img src=\"https://i0.hdslb.com/bfs/album/71ff697832b14a10329d0b75acf592cad775293e.png\" alt=\"image-20221010104845271\"></p>\n<ul>\n<li><p><strong>舉例 1：學生-課程</strong></p>\n<ul>\n<li><p><code>學生資訊表</code>：一行代表一個學生的資訊（學號、姓名、手機號碼、班級、係別…）</p>\n</li>\n<li><p><code>課程資訊表</code>：一行代表一個課程的資訊（課程編號、授課老師、簡介…）</p>\n</li>\n<li><p><code>選課資訊表</code>：一個學生可以選多門課，一門課可以被多個學生選擇</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">學號</span>     <span class=\"string\">課程編號</span></span><br><span class=\"line\"><span class=\"number\">1</span>        <span class=\"number\">1001</span></span><br><span class=\"line\"><span class=\"number\">2</span>        <span class=\"number\">1001</span></span><br><span class=\"line\"><span class=\"number\">1</span>        <span class=\"number\">1002</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>舉例 2：産品-訂單</strong></p>\n<p>“訂單”表和“産品”表有一種多對多的關係，這種關係是通過與“訂單明細”表建立兩個一對多關係來定義的。一個訂單可以有多個産品，每個産品可以出現在多個訂單中。</p>\n<ul>\n<li><code>産品表</code>：“産品”表中的每條記錄表示一個産品。</li>\n<li><code>訂單表</code>：“訂單”表中的每條記錄表示一個訂單。</li>\n<li><code>訂單明細表</code>：每個産品可以與“訂單”表中的多條記錄對應，即出現在多個訂單中。一個訂單可以與“産品”表中的多條記錄對應，即包含多個産品。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i0.hdslb.com/bfs/album/a3b849e8a8577810db4fabf3d5525e2c286e13ba.png\" alt=\"image-20221010104950169\"></p>\n<ul>\n<li><strong>舉例 3：用戶-角色</strong></li>\n<li>多對多關係建表原則：需要創建第三張表，中間表中至少兩個字段，這兩個字段分別作為外鍵指向各自一方的主鍵。</li>\n</ul>\n<p><img src=\"https://i0.hdslb.com/bfs/album/90fb58e1714464953234ad5da1edb950b3eafbb5.png\" alt=\"image-20221010105044644\"></p>\n<h4 id=\"5-2-4-自我引用-Self-reference\"><a href=\"#5-2-4-自我引用-Self-reference\" class=\"headerlink\" title=\"5.2.4 自我引用(Self reference)\"></a>5.2.4 自我引用(Self reference)</h4><p><img src=\"https://i0.hdslb.com/bfs/album/d72ab5b2de9c3f867efc39eb034dbf10691b0a37.png\" alt=\"image-20221010105126645\"></p>\n","feature":null,"text":"01 【資料庫概述】資料庫是用來存儲和組織資訊的系統，它可以有效地管理大量的數據，並提供對這些數據的快速訪問和檢索。在計算機科學和資訊技術領域中，有許多不同類型...","permalink":"/post/MYSQL01 【資料庫概述】","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"mySQL","slug":"mySQL","count":1,"path":"api/categories/mySQL.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":17,"path":"api/tags/桃園資展筆記.json"},{"name":"mySQL","slug":"mySQL","count":1,"path":"api/tags/mySQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#01-%E3%80%90%E8%B3%87%E6%96%99%E5%BA%AB%E6%A6%82%E8%BF%B0%E3%80%91\"><span class=\"toc-text\">01 【資料庫概述】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E4%BD%BF%E7%94%A8%E8%B3%87%E6%96%99%E5%BA%AB\"><span class=\"toc-text\">1.為什麼要使用資料庫</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E8%B3%87%E6%96%99%E5%BA%AB%E8%88%87%E8%B3%87%E6%96%99%E5%BA%AB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%B5%B1\"><span class=\"toc-text\">2.資料庫與資料庫管理系統</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E7%9B%B8%E9%97%9C%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">2.1 相關概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E8%B3%87%E6%96%99%E5%BA%AB%E8%88%87%E8%B3%87%E6%96%99%E5%BA%AB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%B5%B1%E7%9A%84%E9%97%9C%E4%BF%82\"><span class=\"toc-text\">2.2 資料庫與資料庫管理系統的關係</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E5%B8%B8%E8%A6%8B%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%B5%B1%E6%8E%92%E5%90%8D-DBMS\"><span class=\"toc-text\">2.3 常見的資料庫管理系統排名(DBMS)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E5%B8%B8%E8%A6%8B%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB%E9%A1%9E%E5%9E%8B\"><span class=\"toc-text\">2.4 常見的資料庫類型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E5%B8%B8%E8%A6%8B%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB%E4%BB%8B%E7%B4%B9\"><span class=\"toc-text\">2.5 常見的資料庫介紹</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-MySQL-%E4%BB%8B%E7%B4%B9\"><span class=\"toc-text\">3.MySQL 介紹</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">3.1 概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E9%97%9C%E6%96%BC-MySQL-8-0\"><span class=\"toc-text\">3.2 關於 MySQL 8.0</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-Why-choose-MySQL\"><span class=\"toc-text\">3.3 Why choose MySQL?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-Oracle-vs-MySQL\"><span class=\"toc-text\">3.4 Oracle vs MySQL</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-RDBMS-%E8%88%87-%E9%9D%9E-RDBMS\"><span class=\"toc-text\">4.RDBMS 與 非 RDBMS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB-RDBMS\"><span class=\"toc-text\">4.1 關聯式資料庫(RDBMS)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E9%9D%9E%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB-%E9%9D%9E-RDBMS\"><span class=\"toc-text\">4.2 非關聯式資料庫(非 RDBMS)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E5%B0%8F%E7%B5%90\"><span class=\"toc-text\">4.3 小結</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB%E8%A8%AD%E8%A8%88%E8%A6%8F%E5%89%87\"><span class=\"toc-text\">5.關聯式資料庫設計規則</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E8%A1%A8%E3%80%81%E8%A8%98%E9%8C%84%E3%80%81%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">5.1 表、記錄、字段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%B4%E5%B1%95%E9%96%B1%E8%AE%80-ORM%EF%BC%88Object-Relational-Mapping%EF%BC%89\"><span class=\"toc-text\">[擴展閱讀]ORM（Object-Relational Mapping）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E8%A1%A8%E7%9A%84%E9%97%9C%E8%81%AF%E9%97%9C%E4%BF%82\"><span class=\"toc-text\">5.2 表的關聯關係</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-1-%E4%B8%80%E5%B0%8D%E4%B8%80%E9%97%9C%E8%81%AF%EF%BC%88one-to-one%EF%BC%89\"><span class=\"toc-text\">5.2.1 一對一關聯（one-to-one）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-2-%E4%B8%80%E5%B0%8D%E5%A4%9A%E9%97%9C%E4%BF%82%EF%BC%88one-to-many%EF%BC%89\"><span class=\"toc-text\">5.2.2 一對多關係（one-to-many）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-3-%E5%A4%9A%E5%B0%8D%E5%A4%9A%EF%BC%88many-to-many%EF%BC%89\"><span class=\"toc-text\">5.2.3 多對多（many-to-many）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-4-%E8%87%AA%E6%88%91%E5%BC%95%E7%94%A8-Self-reference\"><span class=\"toc-text\">5.2.4 自我引用(Self reference)</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"版本控制和 Git 的安裝介紹","uid":"0d39cf4a28042b6e57e14b1a8dcd5529","slug":"GIT01 【版本控制和Git的安装介绍】","date":"2023-12-05T08:35:08.000Z","updated":"2024-02-03T14:44:33.820Z","comments":true,"path":"api/articles/GIT01 【版本控制和Git的安装介绍】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/blog-Article-Cover/v2-34314ce0fb41340f4337eb6b107f6206_r.jpg?raw=true","text":"01 【版本控制和 Git 的安裝介紹】工程設計領域中，使用“版本控制”管理工程藍圖的設計過程。在 IT 開發中也可以使用版本控制思想管理代碼的版本叠代。 1....","permalink":"/post/GIT01 【版本控制和Git的安装介绍】","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"git","slug":"git","count":3,"path":"api/categories/git.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":17,"path":"api/tags/桃園資展筆記.json"},{"name":"git","slug":"git","count":3,"path":"api/tags/git.json"},{"name":"指令列表","slug":"指令列表","count":3,"path":"api/tags/指令列表.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"JavaScript 進階 - 第4天","uid":"956114e1932534f6adc2e3848138c40e","slug":"2303-3 JS 進階4-1 深淺拷貝","date":"2023-04-01T01:22:08.000Z","updated":"2023-04-13T09:16:37.267Z","comments":true,"path":"api/articles/2303-3 JS 進階4-1 深淺拷貝.json","keywords":null,"cover":null,"text":"深淺拷貝淺拷貝首先淺拷貝和深拷貝只針對參考類型 淺拷貝：拷貝的是位址 常見方法： 拷貝物件：Object.assgin() &#x2F; 展開運運算元 {…ob...","permalink":"/post/2303-3 JS 進階4-1 深淺拷貝","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}