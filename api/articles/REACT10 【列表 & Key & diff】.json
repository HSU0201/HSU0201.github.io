{"title":"列表 & Key & diff","uid":"f16d6f52c1fafc17fe797a458ea1c28e","slug":"REACT10 【列表 & Key & diff】","date":"2024-01-25T04:20:05.000Z","updated":"2024-02-13T07:03:35.555Z","comments":true,"path":"api/articles/REACT10 【列表 & Key & diff】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/blog-Article-Cover/734257355c559d394eb900a70ea03a08.jpg?raw=true","content":"<h1 id=\"06-【列表-Key-diff】\"><a href=\"#06-【列表-Key-diff】\" class=\"headerlink\" title=\"06 【列表 &amp; Key &amp; diff】\"></a>06 【列表 &amp; Key &amp; diff】</h1><p>要顯示資料集合中的多個相似組件。可以使用 JavaScript 陣列方法來操作資料數組。</p>\n<h2 id=\"1-列表\"><a href=\"#1-列表\" class=\"headerlink\" title=\"1.列表\"></a>1.列表</h2><p>假定有以下數據</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>China: Forbidden City (Beijing)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>South Korea: N Seoul Tower (Seoul)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Japan: Mount Fuji (Fuji Five Lakes)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Taiwan: Taipei 101 (Taipei City)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>United States: Statue of Liberty (New York City)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Germany: Cologne Cathedral (Cologne)<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>將其轉為陣列的模式，並命名變數為<code>attractions</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> attractions = [</span><br><span class=\"line\">  <span class=\"string\">&quot;China: Forbidden City (Beijing)&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;South Korea: N Seoul Tower (Seoul)&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Japan: Mount Fuji (Fuji Five Lakes)&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Taiwan: Taipei 101 (Taipei City)&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;United States: Statue of Liberty (New York City)&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Germany: Cologne Cathedral (Cologne)&quot;</span>,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-渲染多個組件\"><a href=\"#1-1-渲染多個組件\" class=\"headerlink\" title=\"1.1 渲染多個組件\"></a>1.1 渲染多個組件</h3><p>可以通過使用 <code>&#123;&#125;</code> 在 JSX 內建構一個<a href=\"https://react.dev/learn/writing-markup-with-jsx\">元素集合</a>。</p>\n<p>下面，將使用 Javascript 中的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a> 方法來遍曆 <code>attractions</code> 陣列。將陣列中的每個元素變成 <code>&lt;li&gt;</code> 標簽，最後將得到的陣列賦值給 <code>listItems</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> attractions = [</span><br><span class=\"line\">  <span class=\"string\">&quot;China: Forbidden City (Beijing)&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;South Korea: N Seoul Tower (Seoul)&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Japan: Mount Fuji (Fuji Five Lakes)&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Taiwan: Taipei 101 (Taipei City)&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;United States: Statue of Liberty (New York City)&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Germany: Cologne Cathedral (Cologne)&quot;</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">List</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = attractions.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">place</span>) =&gt;</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;place&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;listItems&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此時，會發現在編寫程式時跳出紅色的警示字樣</p>\n<img src=\"https://github.com/HSU0201/images/blob/main/react/error.png?raw=true\" style=\"zoom: 50%;\" />\n\n<img src=\"https://github.com/HSU0201/images/blob/main/react/reeor.png?raw=true\" style=\"zoom: 50%;\" />\n\n<p>當我們執行這段代碼，將會看到一個警告 <code>Warning: Each child in a list should have a unique “key” prop.</code>，意思是當你創建一個元素時，必須包括一個特殊的 <code>key</code> 屬性。</p>\n<h3 id=\"1-2-將資料結構化\"><a href=\"#1-2-將資料結構化\" class=\"headerlink\" title=\"1.2 將資料結構化\"></a>1.2 將資料結構化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> attractions = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">country</span>: <span class=\"string\">&quot;China&quot;</span>, <span class=\"attr\">landmark</span>: <span class=\"string\">&quot;Forbidden City&quot;</span>, <span class=\"attr\">city</span>: <span class=\"string\">&quot;Beijing&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">country</span>: <span class=\"string\">&quot;South Korea&quot;</span>, <span class=\"attr\">landmark</span>: <span class=\"string\">&quot;N Seoul Tower&quot;</span>, <span class=\"attr\">city</span>: <span class=\"string\">&quot;Seoul&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">country</span>: <span class=\"string\">&quot;Japan&quot;</span>, <span class=\"attr\">landmark</span>: <span class=\"string\">&quot;Mount Fuji&quot;</span>, <span class=\"attr\">city</span>: <span class=\"string\">&quot;Fuji Five Lakes&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">country</span>: <span class=\"string\">&quot;Taiwan&quot;</span>, <span class=\"attr\">landmark</span>: <span class=\"string\">&quot;Taipei 101&quot;</span>, <span class=\"attr\">city</span>: <span class=\"string\">&quot;Taipei City&quot;</span> &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"attr\">country</span>: <span class=\"string\">&quot;United States&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">landmark</span>: <span class=\"string\">&quot;Statue of Liberty&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">city</span>: <span class=\"string\">&quot;New York City&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">country</span>: <span class=\"string\">&quot;Germany&quot;</span>, <span class=\"attr\">landmark</span>: <span class=\"string\">&quot;Cologne Cathedral&quot;</span>, <span class=\"attr\">city</span>: <span class=\"string\">&quot;Cologne&quot;</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-配置key-屬性\"><a href=\"#1-3-配置key-屬性\" class=\"headerlink\" title=\"1.3 配置key 屬性\"></a>1.3 配置<code>key</code> 屬性</h3><p>此時給每個列表元素配置一個 <code>key</code> 屬性來解決上面的那個警告</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>直接在 map() 呼叫中的 JSX 元素始終需要<code>key</code>！</p></blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">List</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = attractions.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">place</span>) =&gt;</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;place.id&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>國家：&#123;place.country&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>地標：&#123;place.landmark&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>城市：&#123;place.city&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">  ));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;listItems&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://github.com/HSU0201/images/blob/main/react/0.png?raw=true\" style=\"zoom:50%\">\n\n<p><a href=\"https://react.dev/learn/rendering-lists\">擴展閱讀 - Rendering Lists</a></p>\n<h2 id=\"Pitfall-return-的使用時機\"><a href=\"#Pitfall-return-的使用時機\" class=\"headerlink\" title=\"[ Pitfall ] - return 的使用時機\"></a>[ <strong>Pitfall</strong> ] - return 的使用時機</h2><p>在箭頭函數隱式傳回 <code>=&gt;</code> 之後的表達式，不需要 <code>return</code> 語句：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> listItems = chemists.<span class=\"title function_\">map</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">person</span>) =&gt;</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span> <span class=\"comment\">// Implicit return!</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>但是，如果 <code>=&gt;</code> 後面跟著 <code>&#123;</code> 大括號，則必須明確編寫 <code>return</code> ！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> listItems = chemists.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">person</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Curly brace</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>包含 <code>=&gt; &#123;</code> 的箭頭函數稱為具有 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#function_body\">“block body”</a>。它們允許編寫多行程式碼，但您必須自己編寫 <code>return</code> 語句。如果您忘記了，則不會有任何回報！</p>\n<h2 id=\"2-key\"><a href=\"#2-key\" class=\"headerlink\" title=\"2.key\"></a>2.key</h2><p>當元件生成的標籤在渲染後不會改變其內容時，你可以不必明確指定 <code>key</code> 屬性，因為 React 會生成預設的標識。</p>\n<p>或者，可以使用 map 方法產生的索引 <code>index</code> 作為 <code>key</code>，只要確保 key 不重複即可。</p>\n<p>然而，如果你的標籤是<strong>動態</strong>的，可能<strong>會重新渲染</strong>，那麼你就需要明確指定 key (使用獨一無二的值作為 key)。在使用 map 方法時，總是要為每個元素提供一個獨特的 key。</p>\n<h3 id=\"2-1-基本使用\"><a href=\"#2-1-基本使用\" class=\"headerlink\" title=\"2.1 基本使用\"></a>2.1 基本使用</h3><p>key 幫助 React 識別哪些元素改變了，比如被加入或刪除。因此你應當給陣列中的每一個元素賦予一個確定的標識。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> listItems = numbers.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span> (</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;number.toString()&#125;</span>&gt;</span>&#123;number&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n\n<p>一個元素的 key 最好是這個元素在列表中擁有的一個獨一無二的字符串。通常，我們使用資料中的 id 來作為元素的 key：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItems = todos.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;todo.id&#125;</span>&gt;</span>&#123;todo.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure>\n\n<p>當元素沒有確定 id 的時候，萬不得已你可以使用元素索引 index 作為 key：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItems = todos.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">todo, index</span>) =&gt;</span> (</span><br><span class=\"line\">  <span class=\"comment\">// Only do this if items have no stable IDs</span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;todo.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n\n<p>因為列表項目的順序可能會變化，通常不建議使用索引來用作 key 值，這樣做會導致性能變差，還可能引起組件狀態的問題。可以看看 Robin Pokorny 的<a href=\"https://robinpokorny.com/blog/index-as-a-key-is-an-anti-pattern/\">深度解析使用索引作為 key 的負面影響</a>這一篇文章。如果你選擇不指定顯式的 key 值，那麼 React 將預設使用索引用作為列表項目的 key 值。</p>\n<p>或者也可以查看官方的文檔文章<a href=\"https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key\">Keeping list items in order with key\n</a>作為參考。</p>\n<h3 id=\"2-2-用-key-提取組件\"><a href=\"#2-2-用-key-提取組件\" class=\"headerlink\" title=\"2.2 用 key 提取組件\"></a>2.2 用 key 提取組件</h3><p>元素的 key 只有放在就近的陣列上下文中才有意義。</p>\n<p>比方說，如果你<a href=\"https://zh-hans.reactjs.org/docs/components-and-props.html#extracting-components\">提取</a>出一個 <code>ListItem</code> 組件，你應該把 key 保留在陣列中的這個 <code>&lt;ListItem /&gt;</code> 元素上，而不是放在 <code>ListItem</code> 組件中的 <code>&lt;li&gt;</code> 元素上。</p>\n<p><strong>例子：不正確的使用 key 的方式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">ListItem</span> = (<span class=\"params\">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 錯誤！這裡不需要指定 key：</span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;value.toString()&#125;</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">NumberList</span> = (<span class=\"params\">&#123; numbers &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = numbers.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 錯誤！元素的 key 應該在這裡指定：</span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;number&#125;</span> /&gt;</span></span></span><br><span class=\"line\">  ));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;listItems&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">NumberList</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例子：正確的使用 key 的方式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">ListItem</span> = (<span class=\"params\">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 正確！這裏不需要指定 key：</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">NumberList</span> = (<span class=\"params\">&#123; numbers &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = numbers.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 正確！key 應該在陣列的上下文中被指定</span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;number.toString()&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;number&#125;</span> /&gt;</span></span></span><br><span class=\"line\">  ));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;listItems&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">NumberList</span>;</span><br></pre></td></tr></table></figure>\n\n<p>一個好的經驗法則是：在 <code>map()</code> 方法中的元素需要設定 key 屬性。</p>\n<h3 id=\"2-3-key-值在兄弟節點之間必須唯一\"><a href=\"#2-3-key-值在兄弟節點之間必須唯一\" class=\"headerlink\" title=\"2.3 key 值在兄弟節點之間必須唯一\"></a>2.3 key 值在兄弟節點之間必須唯一</h3><p>陣列元素中使用的 key 在其兄弟節點之間應該是獨一無二的。然而，它們不需要是全局唯一的。當我們生成兩個不同的陣列時，我們可以使用相同的 key 值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Blog</span>(<span class=\"params\">&#123; posts &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sidebar = (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;posts.map((post) =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;post.id&#125;</span>&gt;</span>&#123;post.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      ))&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = posts.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;post.id&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;post.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;post.content&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  ));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;sidebar&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;content&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> posts = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">title</span>: <span class=\"string\">&quot;Hello World&quot;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&quot;Welcome to learning React!&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">title</span>: <span class=\"string\">&quot;Installation&quot;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&quot;You can install React from npm.&quot;</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Blog</span> <span class=\"attr\">posts</span>=<span class=\"string\">&#123;posts&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>key 會傳遞資訊給 React ，但不會傳遞給你的組件。如果你的組件中需要使用 <code>key</code> 屬性的值，請用其他屬性名顯式傳遞這個值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> content = posts.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span> (</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Post</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;post.id&#125;</span> <span class=\"attr\">id</span>=<span class=\"string\">&#123;post.id&#125;</span> <span class=\"attr\">title</span>=<span class=\"string\">&#123;post.title&#125;</span> /&gt;</span></span></span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，<code>Post</code> 組件可以讀出 <code>props.id</code>，但是不能讀出 <code>props.key</code>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>key</code> 並不是一個有效的 <code>prop</code>，因此它不會以 <code>props</code> 的形式傳遞給子組件。</p></blockquote>\n<h3 id=\"2-4-在-JSX-中嵌入-map\"><a href=\"#2-4-在-JSX-中嵌入-map\" class=\"headerlink\" title=\"2.4 在 JSX 中嵌入 map()\"></a>2.4 在 JSX 中嵌入 map()</h3><p>在下面的例子中，我們聲明了一個單獨的 <code>listItems</code> 變量並將其包含在 JSX 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">NumberList</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.<span class=\"property\">numbers</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = numbers.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;number.toString()&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;number&#125;</span> /&gt;</span></span></span><br><span class=\"line\">  ));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;listItems&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JSX 允許在大括號中<a href=\"https://react.dev/learn/javascript-in-jsx-with-curly-braces\">嵌入任何表達式</a>，所以我們可以內聯 <code>map()</code> 返回的結果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">NumberList</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> numbers = props.<span class=\"property\">numbers</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;numbers.map((number) =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;number.toString()&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;number&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      ))&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這麼做有時可以使你的代碼更清晰，但有時這種風格也會被濫用。就像在 JavaScript 中一樣，何時需要為了可讀性提取出一個變量，這完全取決於你。但請記住，如果一個 <code>map()</code> 嵌套了太多層級，那可能就是你<a href=\"https://zh-hans.reactjs.org/docs/components-and-props.html#extracting-components\">提取組件</a>的一個好時機。</p>\n<h3 id=\"DEEP-DIVE-每個項目顯示多個-DOM-節點\"><a href=\"#DEEP-DIVE-每個項目顯示多個-DOM-節點\" class=\"headerlink\" title=\"[DEEP DIVE] - 每個項目顯示多個 DOM 節點\"></a>[<strong>DEEP DIVE</strong>] - 每個項目顯示多個 DOM 節點</h3><p>當每一項需要渲染的不是一個而是多個 DOM 節點時，因為簡短的<code> &lt;&gt;...&lt;/&gt;</code> 片段語法不允許您傳遞鍵，因此您需要將它們分組為單一 <code>&lt;div&gt;</code> ，或使用稍長且更明確的 <code>&lt;Fragment&gt;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Fragment</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> listItems = people.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">person</span>) =&gt;</span> (</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;person.id&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;person.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;person.bio&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-diff-演算法\"><a href=\"#3-diff-演算法\" class=\"headerlink\" title=\"3.diff 演算法\"></a>3.diff 演算法</h2><h3 id=\"3-1-什麼是-Virtual-DOM（虛擬-DOM）-？\"><a href=\"#3-1-什麼是-Virtual-DOM（虛擬-DOM）-？\" class=\"headerlink\" title=\"3.1 什麼是 Virtual DOM（虛擬 DOM） ？\"></a>3.1 什麼是 Virtual DOM（虛擬 DOM） ？</h3><p>Virtual DOM（虛擬 DOM）是 DOM 的抽象，本質上就是 JavaScript 對象，而這個物件就是更輕量級的對 DOM 的描述。簡寫為 vdom。它是一種程式概念，在這個概念裏，以一種虛擬的表現形式被儲存在記憶體中。在 React 中，render 執行的結果得到的並不是真正的 DOM 節點，而是 JavaScript 物件</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>虛擬 DOM 只保留了真實 DOM 節點的一些<strong>基本屬性，和節點之間的層次關係</strong>，它相當於建立在 JavaScript 和 DOM 之間的一層“緩存”</p></blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is Virtual DOM<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的這段代碼會轉化可以轉化為虛擬 DOM 結構</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">className</span>: <span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;h1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">children</span>: <span class=\"string\">&#x27;hello world!&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;p&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">children</span>: <span class=\"string\">&#x27;This is Virtual DOM&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>其中對於一個節點必備的三個屬性 <code>tag，props，children</code></p>\n<ul>\n<li>type 指定元素的<strong>標簽</strong>型別，如“<code>li</code>，<code>div</code>”</li>\n<li>props 指定元素身上的屬性，如 <code>class</code> ，<code>style</code>，自定義屬性</li>\n<li>children 指定元素是否有<strong>子節點</strong>，參數以<strong>陣列</strong>形式傳入</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在 render 中編寫的 JSX 代碼就是一種虛擬 DOM 結構。</p></blockquote>\n<h3 id=\"3-2-初識-diff-演算法\"><a href=\"#3-2-初識-diff-演算法\" class=\"headerlink\" title=\"3.2 初識 diff 演算法\"></a>3.2 初識 diff 演算法</h3><p>差異演算法（Diff Algorithm）是 React 用於處理虛擬 DOM 更新的核心算法之一。它使 React 能夠有效地比較虛擬 DOM 樹的前後狀態，並只更新必要的部分，從而提高了應用程序的性能。</p>\n<p>diff 演算法的基本思想是比較兩個樹的差異，找出其中的變化，並將這些變化應用於真實 DOM。</p>\n<p><img src=\"https://github.com/HSU0201/images/blob/main/react/3.jpg?raw=true\" alt=\"3\"></p>\n<p>React 的差異演算法具有以下特點：</p>\n<ul>\n<li><p><strong>比較效率高</strong>: React 使用了一種稱為「雙端比較」（double-ended diffing）的技術，它從虛擬 DOM 樹的根節點開始比較，同時從樹的頂部和底部進行比較。這樣可以節省大量的比較時間。</p>\n</li>\n<li><p><strong>遞歸比較</strong>: React 的差異演算法遞歸地遍歷虛擬 DOM 樹的每個節點，比較它們的類型、屬性和子節點。這樣可以找出樹中的差異，並且保持了結構的一致性。</p>\n</li>\n<li><p><strong>最小化 DOM 操作</strong>: 通過比較前後兩個樹的差異，React 能夠最小化對真實 DOM 的操作。它只會更新必要的部分，而不是重新渲染整個 DOM 樹，從而提高了性能。</p>\n</li>\n<li><p><strong>鍵（Keys）的重要性</strong>: 在 React 的差異演算法中，鍵是非常重要的。鍵用於幫助 React 識別列表中的每個項目，從而確保在列表中插入、刪除或重新排序時能夠正確地更新 DOM。</p>\n</li>\n</ul>\n<p><a href=\"https://juejin.cn/post/6844904078196097031\">擴展閱讀-詳解：虛擬 dom 及 dIff 演算法</a></p>\n<h3 id=\"3-3-用-index-作為-key-可能會引發的問題\"><a href=\"#3-3-用-index-作為-key-可能會引發的問題\" class=\"headerlink\" title=\"3.3 用 index 作為 key 可能會引發的問題\"></a>3.3 用 index 作為 key 可能會引發的問題</h3><p>key 不需要全局唯一，只需在當前列表中唯一即可。元素的 key 最好是固定的，舉個反例：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">StudentList</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> students = [<span class=\"string\">&quot;孫悟空&quot;</span>, <span class=\"string\">&quot;豬八戒&quot;</span>, <span class=\"string\">&quot;沙和尚&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;students.map((item, index) =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      ))&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">StudentList</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如上述程式碼雖然顯示的指定了 key，但是<strong>React 官方並不推薦使用 Index 作為 Key 去使用</strong>；</p>\n<p>當使用索引作為元素的 key 時，如果重新渲染後，組件中的項目位置發生變化，這可能導致 key 的變化，從而影響 React 的虛擬 DOM 比較。</p>\n<p>若是將新創建的元素置於陣列的開頭時，它們的索引改變了，導致所有的 <code>key</code> 都發生了變化。這將導致 React 無法有效地重用虛擬 DOM，而是<strong>重新渲染所有元素</strong>，從而影響性能。</p>\n<p>也因此 React 官方不推薦使用索引作為 key，而是建議使用唯一且穩定的標識符（如 ID）作為 key 值。</p>\n<h4 id=\"3-3-1-使用索引作為-key-的主要問題包括：\"><a href=\"#3-3-1-使用索引作為-key-的主要問題包括：\" class=\"headerlink\" title=\"3.3.1 使用索引作為 key 的主要問題包括：\"></a>3.3.1 使用索引作為 key 的主要問題包括：</h4><ol>\n<li><p><strong>順序操作可能導致不必要的 DOM 更新</strong>： 如果對列表進行逆序加入、逆序刪除等破壞順序操作，會導致不必要的真實 DOM 更新，這會降低效率。</p>\n</li>\n<li><p><strong>存在輸入類的 DOM 時可能導致錯誤的 DOM 更新</strong>： 如果列表中的項目包含輸入類的 DOM 元素，使用索引作為 key 可能導致錯誤的 DOM 更新，因為 React 可能會將輸入的狀態與不正確的元素關聯起來。</p>\n</li>\n</ol>\n<h4 id=\"3-3-2-選擇-key-的準則：\"><a href=\"#3-3-2-選擇-key-的準則：\" class=\"headerlink\" title=\"3.3.2 選擇 key 的準則：\"></a>3.3.2 選擇 key 的準則：</h4><ul>\n<li>最好使用每一條資料的唯一標識作為 <code>key</code>，比如每條資料的 <code>id</code>，<code>手機號</code>，<code>身份證號</code>等。這樣確保了每個元素有一個穩定且<strong>唯一</strong>的識別符。</li>\n<li>如果資料結構<strong>不包含唯一</strong>標識符，且確定只是簡單的展示資料，使用索引（Index）也是一個選擇。但要注意，只有當項目的<strong>順序不會改變</strong>時才能使用索引作為 <code>key</code>。</li>\n</ul>\n<h4 id=\"3-3-3-Diff-演算法比較規則：\"><a href=\"#3-3-3-Diff-演算法比較規則：\" class=\"headerlink\" title=\"3.3.3 Diff 演算法比較規則：\"></a>3.3.3 Diff 演算法比較規則：</h4><ul>\n<li>React 使用 Diff 算法比較新虛擬 DOM 與舊虛擬 DOM，從而決定是否重新渲染 DOM 元素。</li>\n<li>當 React 在新虛擬 DOM 中找到與舊虛擬 DOM 相同的 <code>key</code> 時：<ul>\n<li>如果元素的內容沒有變化，React 將直接重用以前的真實 DOM 元素，不重新渲染。</li>\n<li>如果元素的內容發生了變化，React 將生成新的真實 DOM 元素，並進行重新渲染。</li>\n</ul>\n</li>\n<li>當 React 在新虛擬 DOM 中沒有找到與舊虛擬 DOM 相同的 <code>key</code> 時，它會根據新的資料創建新的真實 DOM 元素，並將其渲染到頁面上。</li>\n</ul>\n<h3 id=\"3-4-李立超老師對於虛擬-DOM-的解釋\"><a href=\"#3-4-李立超老師對於虛擬-DOM-的解釋\" class=\"headerlink\" title=\"3.4 李立超老師對於虛擬 DOM 的解釋\"></a>3.4 李立超老師對於虛擬 DOM 的解釋</h3><p>在 React 中，我們通過操作 React 元素而不是真正的 DOM 物件來進行 DOM 操作。React 元素是 React 應用的最小組成部分，是一個普通的 JS 對象。</p>\n<ol>\n<li><p>React 元素與 DOM 元素的區別<br>React 元素不同於真實的 DOM 元素。它們是 React 應用的構建塊，通過 JSX 或<code>React.createElement()</code>創建。React 元素是不可變的，一旦創建就無法更改。</p>\n</li>\n<li><p>虛擬 DOM 的作用<br>虛擬 DOM 是 React 元素和真實 DOM 之間的橋樑。通過虛擬 DOM，我們可以對 React 元素進行操作，最終將操作映射到真實的 DOM 元素上。</p>\n</li>\n<li><p>虛擬 DOM 的優點</p>\n</li>\n</ol>\n<ul>\n<li><strong>簡化 DOM 操作：</strong> 虛擬 DOM 將各種 DOM 操作簡化為創建操作，使得操作更加清晰和簡單。</li>\n<li><strong>解決 DOM 相容性問題：</strong> 使用虛擬 DOM 可以避免原生 DOM 的相容性問題，所有操作都在虛擬 DOM 上進行。</li>\n<li><strong>提升性能：</strong> 引入 diff 算法，React 可以根據前後兩次狀態的比較，僅對發生變化的部分進行 DOM 更新，從而提高性能。</li>\n</ul>\n<ol start=\"4\">\n<li>結論:<br>使用虛擬 DOM 使得 React 應用更加高效、易於維護和跨瀏覽器相容。它簡化了 DOM 操作、解決了相容性問題，同時提高了應用的性能和可擴展性。</li>\n</ol>\n<h3 id=\"3-5-張天禹老師總結面試題\"><a href=\"#3-5-張天禹老師總結面試題\" class=\"headerlink\" title=\"3.5 張天禹老師總結面試題\"></a>3.5 張天禹老師總結面試題</h3><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">1). react/vue中的key的作用/內部原理</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">2). 為什麼列表的key盡量不要用index?</span></span></code></pre></div><ul>\n<li>虛擬 DOM 的 key 的作用?<ul>\n<li>A. 簡單的說: key 是虛擬 DOM 物件的標識, 在更新顯示時 key 起著極其重要的作用</li>\n<li>B. 詳細的說: 當列表陣列中的資料發生變化生成新的虛擬 DOM 後, React 進行新舊虛擬 DOM 的 diff 比較<ul>\n<li>a. key 沒有變<br>對應 item 資料沒變, 直接使用原來的真實 DOM<br>對應 item 資料變了, 對原來的真實 DOM 進行資料更新</li>\n<li>b. key 變了<br>–原 key 變化：銷毀原來的真實 DOM, 根據 item 資料創建新的虛擬 DOM，隨後渲染真實 DOM 到頁面(即使 item 資料沒有變)<br>–新 key 産生：根據 item 資料創建新的虛擬 DOM，隨後渲染真實 DOM 到頁面</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>key 為 index 的問題<ul>\n<li>A. 加入&#x2F;刪除&#x2F;排序 &#x3D;&gt; 産生沒有必要的真實 DOM 更新 &#x3D;&#x3D;&gt; 界面效果沒問題, 但效率低</li>\n<li>B. 如果 item 界面還有輸入框 &#x3D;&gt; 産生錯誤的真實 DOM 更新 - &#x3D;&#x3D;&gt; 界面有問題<br>注意: 如果不存在加入&#x2F;刪除&#x2F;排序操作,僅用於渲染列表用於展示，使用 index 作為 key 沒有問題。</li>\n</ul>\n</li>\n<li>解決:<ul>\n<li>使用 item 資料的標識資料作為 key, 比如 id 屬性值</li>\n</ul>\n</li>\n</ul>\n","feature":null,"text":"06 【列表 &amp; Key &amp; diff】要顯示資料集合中的多個相似組件。可以使用 JavaScript 陣列方法來操作資料數組。 1.列表假定有...","permalink":"/post/REACT10 【列表 & Key & diff】","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"React","slug":"React","count":8,"path":"api/categories/React.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":30,"path":"api/tags/桃園資展筆記.json"},{"name":"React","slug":"React","count":5,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#06-%E3%80%90%E5%88%97%E8%A1%A8-Key-diff%E3%80%91\"><span class=\"toc-text\">06 【列表 &amp; Key &amp; diff】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">1.列表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E6%B8%B2%E6%9F%93%E5%A4%9A%E5%80%8B%E7%B5%84%E4%BB%B6\"><span class=\"toc-text\">1.1 渲染多個組件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E5%B0%87%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E5%8C%96\"><span class=\"toc-text\">1.2 將資料結構化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E9%85%8D%E7%BD%AEkey-%E5%B1%AC%E6%80%A7\"><span class=\"toc-text\">1.3 配置key 屬性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Pitfall-return-%E7%9A%84%E4%BD%BF%E7%94%A8%E6%99%82%E6%A9%9F\"><span class=\"toc-text\">[ Pitfall ] - return 的使用時機</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-key\"><span class=\"toc-text\">2.key</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.1 基本使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E7%94%A8-key-%E6%8F%90%E5%8F%96%E7%B5%84%E4%BB%B6\"><span class=\"toc-text\">2.2 用 key 提取組件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-key-%E5%80%BC%E5%9C%A8%E5%85%84%E5%BC%9F%E7%AF%80%E9%BB%9E%E4%B9%8B%E9%96%93%E5%BF%85%E9%A0%88%E5%94%AF%E4%B8%80\"><span class=\"toc-text\">2.3 key 值在兄弟節點之間必須唯一</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E5%9C%A8-JSX-%E4%B8%AD%E5%B5%8C%E5%85%A5-map\"><span class=\"toc-text\">2.4 在 JSX 中嵌入 map()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DEEP-DIVE-%E6%AF%8F%E5%80%8B%E9%A0%85%E7%9B%AE%E9%A1%AF%E7%A4%BA%E5%A4%9A%E5%80%8B-DOM-%E7%AF%80%E9%BB%9E\"><span class=\"toc-text\">[DEEP DIVE] - 每個項目顯示多個 DOM 節點</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-diff-%E6%BC%94%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">3.diff 演算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E4%BB%80%E9%BA%BC%E6%98%AF-Virtual-DOM%EF%BC%88%E8%99%9B%E6%93%AC-DOM%EF%BC%89-%EF%BC%9F\"><span class=\"toc-text\">3.1 什麼是 Virtual DOM（虛擬 DOM） ？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%88%9D%E8%AD%98-diff-%E6%BC%94%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">3.2 初識 diff 演算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E7%94%A8-index-%E4%BD%9C%E7%82%BA-key-%E5%8F%AF%E8%83%BD%E6%9C%83%E5%BC%95%E7%99%BC%E7%9A%84%E5%95%8F%E9%A1%8C\"><span class=\"toc-text\">3.3 用 index 作為 key 可能會引發的問題</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-1-%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E4%BD%9C%E7%82%BA-key-%E7%9A%84%E4%B8%BB%E8%A6%81%E5%95%8F%E9%A1%8C%E5%8C%85%E6%8B%AC%EF%BC%9A\"><span class=\"toc-text\">3.3.1 使用索引作為 key 的主要問題包括：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-2-%E9%81%B8%E6%93%87-key-%E7%9A%84%E6%BA%96%E5%89%87%EF%BC%9A\"><span class=\"toc-text\">3.3.2 選擇 key 的準則：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-3-Diff-%E6%BC%94%E7%AE%97%E6%B3%95%E6%AF%94%E8%BC%83%E8%A6%8F%E5%89%87%EF%BC%9A\"><span class=\"toc-text\">3.3.3 Diff 演算法比較規則：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E6%9D%8E%E7%AB%8B%E8%B6%85%E8%80%81%E5%B8%AB%E5%B0%8D%E6%96%BC%E8%99%9B%E6%93%AC-DOM-%E7%9A%84%E8%A7%A3%E9%87%8B\"><span class=\"toc-text\">3.4 李立超老師對於虛擬 DOM 的解釋</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E5%BC%B5%E5%A4%A9%E7%A6%B9%E8%80%81%E5%B8%AB%E7%B8%BD%E7%B5%90%E9%9D%A2%E8%A9%A6%E9%A1%8C\"><span class=\"toc-text\">3.5 張天禹老師總結面試題</span></a></li></ol></li></ol></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"條件渲染 ( Conditional Rendering )","uid":"5a75bf7974d2ba4d1e1f51fc63e2b540","slug":"REACT12 【 條件渲染 ( Conditional Rendering ) 】","date":"2024-01-25T04:20:05.000Z","updated":"2024-02-13T03:17:19.206Z","comments":true,"path":"api/articles/REACT12 【 條件渲染 ( Conditional Rendering ) 】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/blog-Article-Cover/734257355c559d394eb900a70ea03a08.jpg?raw=true","text":"12 【 條件渲染 ( Conditional Rendering ) 】在 React 中，您的組件通常需要根據不同的條件顯示不同的內容。可以使用 if 語句...","permalink":"/post/REACT12 【 條件渲染 ( Conditional Rendering ) 】","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"React","slug":"React","count":8,"path":"api/categories/React.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":30,"path":"api/tags/桃園資展筆記.json"},{"name":"React","slug":"React","count":5,"path":"api/tags/React.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"240124React零碎知識點","uid":"6587c0dcefcdc69eda60933087e365f3","slug":"240124React零碎知識點","date":"2024-01-24T11:28:08.000Z","updated":"2024-01-28T04:24:25.865Z","comments":true,"path":"api/articles/240124React零碎知識點.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/blog-Article-Cover/734257355c559d394eb900a70ea03a08.jpg?raw=true","text":"單向資料流程（One-Way Data Flow）單向資料流程是一種軟體設計模式，其中資料在應用程式中的流動方向是單一且明確的。這種模式通常應用在使用者介面（U...","permalink":"/post/240124React零碎知識點","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"React","slug":"React","count":8,"path":"api/categories/React.json"}],"tags":[{"name":"資策會上課筆記","slug":"資策會上課筆記","count":5,"path":"api/tags/資策會上課筆記.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}