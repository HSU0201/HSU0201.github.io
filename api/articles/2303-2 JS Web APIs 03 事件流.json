{"title":"JavaScript Web APIs - 第3天","uid":"4c656a1bef12133b7e372d516df2e64e","slug":"2303-2 JS Web APIs 03 事件流","date":"2023-03-25T01:22:08.000Z","updated":"2023-03-28T02:29:37.721Z","comments":true,"path":"api/articles/2303-2 JS Web APIs 03 事件流.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>進一步學習 事件進階，實現更多交互的網頁特效，結合事件流的特徵優化事件執行的效率</p></blockquote>\n<ul>\n<li>掌握阻止事件冒泡的方法</li>\n<li>理解事件委託的實現原理</li>\n</ul>\n<h1 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h1><p>事件流是對事件執行過程的描述，瞭解事件的執行過程有助於加深對事件的理解，提升開發實踐中對事件運用的靈活度。</p>\n<p><img src=\"/../img/event.png\" alt=\"event\"></p>\n<p>如上圖所示，任意事件被觸發時總會經歷兩個階段：【捕獲階段】和【冒泡階段】。</p>\n<p>簡言之，捕獲階段是【從父到子】的傳導過程，冒泡階段是【從子向父】的傳導過程。</p>\n<h2 id=\"捕獲和冒泡\"><a href=\"#捕獲和冒泡\" class=\"headerlink\" title=\"捕獲和冒泡\"></a>捕獲和冒泡</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>事件捕獲語法<br><code>DOM.addEventListener(&#39;事件類型&#39;, 事件處理函數, 是否使用捕獲機制)</code></p></blockquote>\n<ul>\n<li><p><strong>事件捕獲概念：</strong></p>\n<ul>\n<li>從DOM的根項目開始去執行對應的事件 (從外到裡)</li>\n</ul>\n</li>\n<li><p>說明：</p>\n<ul>\n<li>addEventListener第三個參數傳入 true 代表是捕獲階段觸發（很少使用）</li>\n<li>若傳入false代表冒泡階段觸發，<strong>默認就是false</strong></li>\n<li>若是用 L0 事件監聽，則只有冒泡階段，沒有捕獲</li>\n</ul>\n</li>\n<li><p><strong>事件冒泡概念:</strong></p>\n<ul>\n<li>當一個元素的事件被觸發時，同樣的事件將會在該元素的所有父項目中依次被觸發。這一過程被稱為事件冒泡</li>\n</ul>\n</li>\n<li><p>簡單理解：當一個元素觸發事件後，會依次向上調用所有父級元素的 <strong>同名事件</strong></p>\n</li>\n<li><p>事件冒泡是默認存在的</p>\n</li>\n<li><p>L2事件監聽第三個參數是 false，或者默認都是冒泡</p>\n</li>\n</ul>\n<p>事件流是如何影響事件執行的：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;事件流&lt;&#x2F;h3&gt;\n  &lt;p&gt;事件流是事件在執行時的底層機制，主要體現在父子盒子之間事件的執行上。&lt;&#x2F;p&gt;\n  &lt;div class&#x3D;&quot;outer&quot;&gt;\n    &lt;div class&#x3D;&quot;inner&quot;&gt;\n      &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 獲取嵌套的3個節點\n    const outer &#x3D; document.querySelector(&#39;.outer&#39;);\n    const inner &#x3D; document.querySelector(&#39;.inner&#39;);\n    const child &#x3D; document.querySelector(&#39;.child&#39;);\n    \n    &#x2F;&#x2F; html 元素添加事件\n    document.documentElement.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;html...&#39;)\n    &#125;)\n    \n    &#x2F;&#x2F; body 元素添加事件\n    document.body.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;body...&#39;)\n    &#125;)\n\n    &#x2F;&#x2F; 外層的盒子添加事件\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;outer...&#39;)\n    &#125;)\n    \n    &#x2F;&#x2F; 中間的盒子添加事件\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;inner...&#39;)\n    &#125;)\n    \n    &#x2F;&#x2F; 內層的盒子添加事件\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;child...&#39;)\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>執行上述代碼後發現，當按一下事件觸發時，其父項目的按一下事件也【相繼觸發】，這是為什麼呢？</p>\n<p>結合事件流的特徵，我們知道當某個元素的事件被觸發時，事件總是會先經過其祖先才能到達當前元素，然後再由當前元素向祖先傳遞，事件在流動的過程中遇到相同的事件便會被觸發。</p>\n<p>再來關注一個細節就是事件相繼觸發的【執行順序】，事件的執行順序是可控制的，即可以在捕獲階段被執行，也可以在冒泡階段被執行。</p>\n<p>如果事件是在冒泡階段執行的，我們稱為冒泡模式，它會先執行子盒子事件再去執行父盒子事件，預設是冒泡模式。</p>\n<p>如果事件是在捕獲階段執行的，我們稱為捕獲模式，它會先執行父盒子事件再去執行子盒子事件。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;事件流&lt;&#x2F;h3&gt;\n  &lt;p&gt;事件流是事件在執行時的底層機制，主要體現在父子盒子之間事件的執行上。&lt;&#x2F;p&gt;\n  &lt;div class&#x3D;&quot;outer&quot;&gt;\n    &lt;div class&#x3D;&quot;inner&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 獲取嵌套的3個節點\n    const outer &#x3D; document.querySelector(&#39;.outer&#39;)\n    const inner &#x3D; document.querySelector(&#39;.inner&#39;)\n\n    &#x2F;&#x2F; 外層的盒子\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;outer...&#39;)\n    &#125;, true) &#x2F;&#x2F; true 表示在捕獲階段執行事件\n    \n    &#x2F;&#x2F; 中間的盒子\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;inner...&#39;)\n    &#125;, true)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>結論：</p>\n<ol>\n<li><code>addEventListener</code> 第3個參數決定了事件是在捕獲階段觸發還是在冒泡階段觸發</li>\n<li><code>addEventListener</code> 第3個參數為  <code>true</code> 表示捕獲階段觸發，<code>false</code> 表示冒泡階段觸發，預設值為 <code>false</code></li>\n<li>事件流只會在父子元素具有相同事件類型時才會產生影響</li>\n<li>絕大部分場景都採用預設的冒泡模式（其中一個原因是早期 IE 不支援捕獲）</li>\n</ol>\n<h2 id=\"阻止冒泡\"><a href=\"#阻止冒泡\" class=\"headerlink\" title=\"阻止冒泡\"></a>阻止冒泡</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>語法:<br><code>事件對象.stopPropagation()</code><br>阻止冒泡是指阻斷事件的流動，保證事件只在當前元素被執行，而不再去影響到其對應的父項目。</p></blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;阻止冒泡&lt;&#x2F;h3&gt;\n  &lt;p&gt;阻止冒泡是指阻斷事件的流動，保證事件只在當前元素被執行，而不再去影響到其對應的父項目。&lt;&#x2F;p&gt;\n  &lt;div class&#x3D;&quot;outer&quot;&gt;\n    &lt;div class&#x3D;&quot;inner&quot;&gt;\n      &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 獲取嵌套的3個節點\n    const outer &#x3D; document.querySelector(&#39;.outer&#39;)\n    const inner &#x3D; document.querySelector(&#39;.inner&#39;)\n    const child &#x3D; document.querySelector(&#39;.child&#39;)\n\n    &#x2F;&#x2F; 外層的盒子\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;outer...&#39;)\n    &#125;)\n\n    &#x2F;&#x2F; 中間的盒子\n    inner.addEventListener(&#39;click&#39;, function (ev) &#123;\n      console.log(&#39;inner...&#39;)\n\n      &#x2F;&#x2F; 阻止事件冒泡\n      ev.stopPropagation()\n    &#125;)\n\n    &#x2F;&#x2F; 內層的盒子\n    child.addEventListener(&#39;click&#39;, function (ev) &#123;\n      console.log(&#39;child...&#39;)\n\n      &#x2F;&#x2F; 借助事件物件，阻止事件向上冒泡\n      ev.stopPropagation()\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>結論：事件物件中的 <code>ev.stopPropagation</code> 方法，專門用來阻止事件冒泡。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>滑鼠經過事件：</p>\n<p>mouseover 和 mouseout 會有冒泡效果</p>\n<p>mouseenter  和 mouseleave   沒有冒泡效果 (推薦)</p></blockquote>\n<h2 id=\"解綁事件\"><a href=\"#解綁事件\" class=\"headerlink\" title=\"解綁事件\"></a>解綁事件</h2><p><strong>1. on事件方式</strong><br><strong>直接使用<code>null</code>覆蓋偶就可以實現事件的解綁</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;button&gt;點擊&lt;&#x2F;button&gt;\n  &lt;script&gt;\n    const btn &#x3D; document.querySelector(&#39;button&#39;)\n    &#x2F;&#x2F;綁定事件\n    btn.onclick &#x3D; function () &#123;\n      alert(&#39;點擊了&#39;)\n      &#x2F;&#x2F; L0 事件移除解綁\n      btn.onclick &#x3D; null\n    &#125;\n    \n  &lt;&#x2F;script&gt;</code></pre>\n<p><strong>addEventListener方式，必須使用：</strong><br><code>removeEventListener(事件類型, 事件處理函數, [獲取捕獲或者冒泡階段])</code></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;button&gt;點擊&lt;&#x2F;button&gt;\n  &lt;script&gt;\n    const btn &#x3D; document.querySelector(&#39;button&#39;)\n    function fn() &#123;\n      alert(&#39;點擊了&#39;)\n    &#125;\n    &#x2F;&#x2F;綁定事件\n    btn.addEventListener(&#39;click&#39;, fn)\n    &#x2F;&#x2F; L2 事件移除解綁\n    btn.removeEventListener(&#39;click&#39;, fn)\n  &lt;&#x2F;script&gt;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：匿名函數無法被解綁</p></blockquote>\n<h3 id=\"兩種註冊事件的區別\"><a href=\"#兩種註冊事件的區別\" class=\"headerlink\" title=\"兩種註冊事件的區別\"></a>兩種註冊事件的區別</h3><ul>\n<li><strong>傳統on註冊（L0）</strong><ul>\n<li>同一個對象,後面註冊的事件會覆蓋前面註冊(同一個事件)</li>\n<li>直接使用null覆蓋偶就可以實現事件的解綁</li>\n<li>都是冒泡階段執行的</li>\n</ul>\n</li>\n<li><strong>事件監聽註冊（L2）</strong><ul>\n<li>語法: addEventListener(事件類型, 事件處理函數, 是否使用捕獲)</li>\n<li>後面註冊的事件不會覆蓋前面註冊的事件(同一個事件)</li>\n<li>可以通過第三個參數去確定是在冒泡或者捕獲階段執行</li>\n<li>必須使用removeEventListener(事件類型, 事件處理函數, 獲取捕獲或者冒泡階段)</li>\n<li>匿名函數無法被解綁</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"鼠標經過事件的區別\"><a href=\"#鼠標經過事件的區別\" class=\"headerlink\" title=\"鼠標經過事件的區別\"></a>鼠標經過事件的區別</h3><ul>\n<li>鼠標經過事件：<ul>\n<li>mouseover 和 mouseout 會有冒泡效果</li>\n<li>mouseenter 和 mouseleave 沒有冒泡效果 (推薦)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"事件委託\"><a href=\"#事件委託\" class=\"headerlink\" title=\"事件委託\"></a>事件委託</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>事件委託是利用事件流的特徵解決一些現實開發需求的知識技巧，主要的作用是提升程式效率。</p></blockquote>\n<ul>\n<li>事件委託是利用事件流的特徵解決一些開發需求的知識技巧<ul>\n<li>優點：減少註冊次數，可以提高程式性能</li>\n<li>原理：事件委託其實是利用事件冒泡的特點。<ul>\n<li>給父元素註冊事件，當我們觸發子元素的時候，會冒泡到父元素身上，從而觸發父元素的事件</li>\n</ul>\n</li>\n<li>實現：<code>事件對象.target.tagName ===&#39;標籤名&#39;</code> 可以獲得真正觸發事件的元素<br>ev.target.tagName &#x3D;&#x3D;&#x3D; ‘BUTTON’<br>大量的事件監聽是比較耗費性能的，如下代碼所示</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 假設頁面中有 10000 個 button 元素\n  const buttons &#x3D; document.querySelectorAll(&#39;table button&#39;);\n\n  for(let i &#x3D; 0; i &lt;&#x3D; buttons.length; i++) &#123;\n    &#x2F;&#x2F; 為 10000 個 button 元素添加了事件\n    buttons.addEventListener(&#39;click&#39;, function () &#123;\n      &#x2F;&#x2F; 省略具體執行邏輯...\n    &#125;)\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>利用事件流的特徵，可以對上述的代碼進行優化，事件的的冒泡模式總是會將事件流向其父元素的，如果父元素監聽了相同的事件類型，那麼父元素的事件就會被觸發並執行，正是利用這一特徵對上述代碼進行優化，如下代碼所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 假設頁面中有 10000 個 button 元素\n  let buttons &#x3D; document.querySelectorAll(&#39;table button&#39;);\n  \n  &#x2F;&#x2F; 假設上述的 10000 個 buttom 元素共同的父項目是 table\n  let parents &#x3D; document.querySelector(&#39;table&#39;);\n  parents.addEventListener(&#39;click&#39;, function () &#123;\n    console.log(&#39;點擊任意子元素都會觸發事件...&#39;);\n  &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>我們的最終目的是保證只有點擊 button 子元素才去執行事件的回呼函數，如何判斷用戶點擊是哪一個子元素呢？</p>\n<p>事件物件中的屬性 <code>target</code> 或 <code>srcElement</code>屬性工作表示真正觸發事件的元素，它是一個元素類型的節點。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 假設頁面中有 10000 個 button 元素\n  const buttons &#x3D; document.querySelectorAll(&#39;table button&#39;)\n  \n  &#x2F;&#x2F; 假設上述的 10000 個 buttom 元素共同的父項目是 table\n  const parents &#x3D; document.querySelector(&#39;table&#39;)\n  parents.addEventListener(&#39;click&#39;, function (ev) &#123;\n    &#x2F;&#x2F; console.log(ev.target);\n    &#x2F;&#x2F; 只有 button 元素才會真正去執行邏輯\n    if(ev.target.tagName &#x3D;&#x3D;&#x3D; &#39;BUTTON&#39;) &#123;\n      &#x2F;&#x2F; 執行的邏輯\n    &#125;\n  &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>優化過的代碼只對父項目添加事件監聽，相比對 10000 個元素添加事件監聽執行效率要高許多！！！</p>\n<h1 id=\"其他事件\"><a href=\"#其他事件\" class=\"headerlink\" title=\"其他事件\"></a>其他事件</h1><h2 id=\"頁面載入事件\"><a href=\"#頁面載入事件\" class=\"headerlink\" title=\"頁面載入事件\"></a>頁面載入事件</h2><p>載入外部資源（如圖片、外聯CSS和JavaScript等）載入完畢時觸發的事件</p>\n<p>有些時候需要等頁面資源全部處理完了做一些事情</p>\n<p><strong>load 事件</strong><br>監聽頁面所有資源載入完畢：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>監聽整個頁面資源給 window 加</li>\n</ul></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window.addEventListener(&#39;load&#39;, function() &#123;\n    &#x2F;&#x2F; 執行的操作~~~~~\n&#125;)</code></pre>\n\n<p><strong>DOMContentLoaded</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>給 document 加</li>\n<li>無需等待樣式表、圖像等完全加載</li>\n</ul></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document.addEventListener(&#39;DOMContentLoaded&#39;, function () &#123;\n  &#x2F;&#x2F; 執行的操作~~~~~\n&#125;)</code></pre>\n\n\n<h2 id=\"元素滾動事件\"><a href=\"#元素滾動事件\" class=\"headerlink\" title=\"元素滾動事件\"></a>元素滾動事件</h2><p>很多網頁需要檢測用戶把頁面滾動到某個區域後做一些處理， 比如固定導航欄，比如返回頂部</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>捲軸在滾動的時候持續觸發的事件</p></blockquote>\n<p><strong>scroll 事件</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window.addEventListener(&#39;scroll&#39;, function() &#123;\n    &#x2F;&#x2F; 執行的操作~~~~~\n&#125;)</code></pre>\n<p>監聽某個元素的內部滾動直接給某個元素加即可</p>\n<h3 id=\"頁面滾動事件-獲取位置\"><a href=\"#頁面滾動事件-獲取位置\" class=\"headerlink\" title=\"頁面滾動事件-獲取位置\"></a>頁面滾動事件-獲取位置</h3><ul>\n<li>scrollLeft和scrollTop （屬性）<ul>\n<li>獲取被卷去的大小</li>\n<li>獲取元素內容往左、往上滾出去看不到的距離</li>\n<li>這兩個值是可讀寫的</li>\n</ul>\n</li>\n</ul>\n<p><strong>div滾動</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const div &#x3D; document.querySelector(&#39;div&#39;)\ndiv.addEventListener(&#39;scroll&#39;, function () &#123;\n  &#x2F;&#x2F; console.log(111)\n  &#x2F;&#x2F; scrollTop 被卷去的頭部\n  console.log(div.scrollTop)\n&#125;)</code></pre>\n<p><strong>頁面滾動</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const div &#x3D; document.querySelector(&#39;div&#39;)\n&#x2F;&#x2F; 頁面滾動事件\nwindow.addEventListener(&#39;scroll&#39;, function () &#123;\n  &#x2F;&#x2F; console.log(&#39;我滾了&#39;)\n  &#x2F;&#x2F; 我想知道頁面到底滾動了多少圖元， 被卷去了多少  scrollTop\n  &#x2F;&#x2F; 獲取html元素寫法  \n  &#x2F;&#x2F; document.documentElement  \n  &#x2F;&#x2F; console.log(document.documentElement.scrollTop)\n  const n &#x3D; document.documentElement.scrollTop\n  if (n &gt;&#x3D; 100) &#123;\n    div.style.display &#x3D; &#39;block&#39;\n  &#125; else &#123;\n    div.style.display &#x3D; &#39;none&#39;\n  &#125;\n&#125;)</code></pre>\n<p><strong>細節注意</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document.documentElement.scrollTop &#x3D; 800\nwindow.addEventListener(&#39;scroll&#39;, function () &#123;\n  &#x2F;&#x2F; 必須寫到裡面\n  const n &#x3D; document.documentElement.scrollTop\n  &#x2F;&#x2F; 得到是什麼資料   數字型 不帶單位\n  &#x2F;&#x2F; console.log(n)\n&#125;)</code></pre>\n\n<h3 id=\"頁面滾動事件-滾動到指定的坐標\"><a href=\"#頁面滾動事件-滾動到指定的坐標\" class=\"headerlink\" title=\"頁面滾動事件-滾動到指定的坐標\"></a>頁面滾動事件-滾動到指定的坐標</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>scrollTo() 方法可把內容滾動到指定的坐標</p></blockquote>\n<ul>\n<li>語法：<code>元素.scrollTo(x, y)</code></li>\n</ul>\n<h2 id=\"頁面尺寸事件\"><a href=\"#頁面尺寸事件\" class=\"headerlink\" title=\"頁面尺寸事件\"></a>頁面尺寸事件</h2><p>會在視窗尺寸改變的時候觸發事件：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window.addEventListener(&#39;resize&#39;, function() &#123;\n    &#x2F;&#x2F; 執行的操作~~~~~\n&#125;)</code></pre>\n\n<h1 id=\"元素尺寸與位置\"><a href=\"#元素尺寸與位置\" class=\"headerlink\" title=\"元素尺寸與位置\"></a>元素尺寸與位置</h1><ul>\n<li><p>獲取寬高</p>\n<ul>\n<li>獲取元素的自身寬高、包含元素自身設置的寬高、<code>padding</code>、<code>border</code></li>\n<li><code>offsetWidth</code>和<code>offsetHeight </code> </li>\n<li>獲取出來的是數值,方便計算</li>\n<li>注意: 獲取的是可視寬高, 如果盒子是隱藏的,獲取的結果是0</li>\n</ul>\n</li>\n<li><p>獲取位置：</p>\n<ul>\n<li>獲取元素距離自己定位父級元素的左、上距離</li>\n<li><code>offsetLeft</code>和<code>offsetTop</code> <ul>\n<li>注意是只讀屬性</li>\n</ul>\n</li>\n<li><code>element.getBoundingClientRect()</code><ul>\n<li>方法返回元素的大小及其相對於視口的位</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><code>offsetWidth</code>和<code>offsetHeight</code>是得到元素什麼的寬高？</li>\n</ol>\n<ul>\n<li>內容 + <code>padding</code> + <code>border</code></li>\n</ul>\n<ol start=\"2\">\n<li><code>offsetTop</code>和<code>offsetLeft</code> 得到位置以誰為準？</li>\n</ol>\n<ul>\n<li>帶有定位的父級</li>\n<li>如果都沒有則以 文檔左上角 為準</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>屬性</th>\n<th>作用</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>scrollLeft</code>和<code>scrollTop</code></td>\n<td>被捲去的頭部和左側</td>\n<td>配合頁面滾動來用，可讀寫</td>\n</tr>\n<tr>\n<td><code>clientWidth</code> 和 <code>clientHeight</code></td>\n<td>獲得元素寬度和高度</td>\n<td>不包含border,margin，滾動條 用於js獲取元素大小，只讀屬性</td>\n</tr>\n<tr>\n<td><code>offsetWidth</code>和<code>offsetHeight</code></td>\n<td>獲得元素寬度和高度</td>\n<td>包含border、padding，滾動條等，只讀</td>\n</tr>\n<tr>\n<td><code>offsetLeft</code>和<code>offsetTop</code></td>\n<td>獲取元素距離自己定位父級元素的左、上距離</td>\n<td>獲取元素位置的時候使用，只讀屬性</td>\n</tr>\n</tbody></table>\n","feature":null,"text":" 進一步學習 事件進階，實現更多交互的網頁特效，結合事件流的特徵優化事件執行的效率 掌握阻止事件冒泡的方法 理解事件委託的實現原理 事件流事件流是對事件執行過程的描述，瞭解事件的執行過程有助於加深對事件的理解，提升開發實踐中對事件運用的靈活度。 如上圖所示，任意事件被觸發時總會經...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E6%B5%81\"><span class=\"toc-text\">事件流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8D%95%E7%8D%B2%E5%92%8C%E5%86%92%E6%B3%A1\"><span class=\"toc-text\">捕獲和冒泡</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1\"><span class=\"toc-text\">阻止冒泡</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E7%B6%81%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">解綁事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A9%E7%A8%AE%E8%A8%BB%E5%86%8A%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%8D%80%E5%88%A5\"><span class=\"toc-text\">兩種註冊事件的區別</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BC%A0%E6%A8%99%E7%B6%93%E9%81%8E%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%8D%80%E5%88%A5\"><span class=\"toc-text\">鼠標經過事件的區別</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%A7%94%E8%A8%97\"><span class=\"toc-text\">事件委託</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">其他事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A0%81%E9%9D%A2%E8%BC%89%E5%85%A5%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">頁面載入事件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%B4%A0%E6%BB%BE%E5%8B%95%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">元素滾動事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A0%81%E9%9D%A2%E6%BB%BE%E5%8B%95%E4%BA%8B%E4%BB%B6-%E7%8D%B2%E5%8F%96%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">頁面滾動事件-獲取位置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A0%81%E9%9D%A2%E6%BB%BE%E5%8B%95%E4%BA%8B%E4%BB%B6-%E6%BB%BE%E5%8B%95%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9A%84%E5%9D%90%E6%A8%99\"><span class=\"toc-text\">頁面滾動事件-滾動到指定的坐標</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A0%81%E9%9D%A2%E5%B0%BA%E5%AF%B8%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">頁面尺寸事件</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%B4%A0%E5%B0%BA%E5%AF%B8%E8%88%87%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">元素尺寸與位置</span></a></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript Web APIs - 第4天","uid":"00643405d99d1bca34738d1b7609799a","slug":"2303-2 JS Web APIs 04","date":"2023-03-26T01:22:08.000Z","updated":"2023-04-13T09:55:14.689Z","comments":true,"path":"api/articles/2303-2 JS Web APIs 04.json","keywords":null,"cover":null,"text":" 進一步學習 DOM 相關知識，實現可交互的網頁特效 能夠插入、刪除和替換元素節點 能夠依據元素節點關係查找節點 日期對象掌握 Date 日期物件的使用，動態獲取當前電腦的時間。 ECMAScript 中內置了獲取系統時間的物件 Date，使用 Date 時與之前學習的內置物件 ...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"JavaScript Web APIs - 第2天","uid":"b74e92afe19531c6070a34e8d8d93dcd","slug":"2303-2 JS Web APIs 02 事件","date":"2023-03-24T01:22:08.000Z","updated":"2023-03-26T12:06:58.484Z","comments":true,"path":"api/articles/2303-2 JS Web APIs 02 事件.json","keywords":null,"cover":null,"text":" 學會通過為DOM註冊事件來實現可交互的網頁特效。 能夠判斷函數運行的環境並確字 this 所指代的物件 理解事件的作用，知道應用事件的 3 個步驟 學習會為 DOM 註冊事件，實現簡單可交互的網頁特交。 事件事件是程式設計語言中的術語，它是用來描述程式的行為或狀態的，一旦行為或...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}