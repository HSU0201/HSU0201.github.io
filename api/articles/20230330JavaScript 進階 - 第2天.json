{"title":"JavaScript 進階 - 第2天","uid":"b57064d0869ba36d27730b8b11beee0b","slug":"20230330JavaScript 進階 - 第2天","date":"2023-03-30T01:22:08.000Z","updated":"2023-04-03T02:16:01.016Z","comments":true,"path":"api/articles/20230330JavaScript 進階 - 第2天.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>瞭解物件導向程式設計的基礎概念及構造函數的作用，體會 JavaScript 一切皆物件的語言特徵，掌握常見的物件屬性和方法的使用。</p></blockquote>\n<ul>\n<li>瞭解物件導向程式設計中的一般概念</li>\n<li>能夠基於構造函數創建物件</li>\n<li>理解 JavaScript 中一切皆物件的語言特徵</li>\n<li>理解引用物件類型值存儲的的特徵</li>\n<li>掌握包裝類型物件常見方法的使用</li>\n</ul>\n<h1 id=\"深入對象\"><a href=\"#深入對象\" class=\"headerlink\" title=\"深入對象\"></a>深入對象</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>瞭解物件導向的基礎概念，能夠利用構造函數創建物件。</p></blockquote>\n<h2 id=\"構造函數\"><a href=\"#構造函數\" class=\"headerlink\" title=\"構造函數\"></a>構造函數</h2><p>構造函數是專門用於創建物件的函數，如果一個函數使用 <code>new</code> 關鍵字調用，那麼這個函數就是構造函數。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 定義函數\n  function foo() &#123;\n    console.log(&#39;通過 new 也能調用函數...&#39;);\n  &#125;\n  &#x2F;&#x2F; 調用函數\n  new foo;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>總結：</p>\n<ol start=\"2\">\n<li>使用 <code>new</code> 關鍵字調用函數的行為被稱為產生實體</li>\n<li>產生實體構造函數時沒有參數時可以省略 <code>()</code></li>\n<li>構造函數的返回值即為新創建的物件</li>\n<li>構造函數內部的 <code>return</code> 返回的值無效！</li>\n</ol>\n<p>注：實踐中為了從視覺上區分構造函數和普通函數，習慣將構造函數的首字母大寫。</p>\n<h2 id=\"實例成員\"><a href=\"#實例成員\" class=\"headerlink\" title=\"實例成員\"></a>實例成員</h2><p>通過構造函數創建的物件稱為實例物件，實例物件中的屬性和方法稱為實例成員。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 構造函數\n  function Person() &#123;\n    &#x2F;&#x2F; 構造函數內部的 this 就是實例物件\n    &#x2F;&#x2F; 實例物件中動態添加屬性\n    this.name &#x3D; &#39;小明&#39;\n    &#x2F;&#x2F; 實例物件動態添加方法\n    this.sayHi &#x3D; function () &#123;\n      console.log(&#39;大家好~&#39;)\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 產生實體，p1 是實例物件\n  &#x2F;&#x2F; p1 實際就是 構造函數內部的 this\n  const p1 &#x3D; new Person()\n  console.log(p1)\n  console.log(p1.name) &#x2F;&#x2F; 訪問實例屬性\n  p1.sayHi() &#x2F;&#x2F; 調用實例方法\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>總結：</p>\n<ol>\n<li>構造函數內部 <code>this</code> 實際上就是實例物件，為其動態添加的屬性和方法即為實例成員</li>\n<li>為構造函數傳入參數，動態創建結構相同但值不同的物件</li>\n</ol>\n<p>注：構造函數創建的實例物件彼此獨立互不影響。</p>\n<h2 id=\"靜態成員\"><a href=\"#靜態成員\" class=\"headerlink\" title=\"靜態成員\"></a>靜態成員</h2><p>在 JavaScript 中底層函數本質上也是物件類型，因此允許直接為函數動態添加屬性或方法，構造函數的屬性和方法被稱為靜態成員。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 構造函數\n  function Person(name, age) &#123;\n    &#x2F;&#x2F; 省略實例成員\n  &#125;\n  &#x2F;&#x2F; 靜態屬性\n  Person.eyes &#x3D; 2\n  Person.arms &#x3D; 2\n  &#x2F;&#x2F; 靜態方法\n  Person.walk &#x3D; function () &#123;\n    console.log(&#39;^_^人都會走路...&#39;)\n    &#x2F;&#x2F; this 指向 Person\n    console.log(this.eyes)\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>總結：</p>\n<ol>\n<li>靜態成員指的是添加到構造函數本身的屬性和方法</li>\n<li>一般公共特徵的屬性或方法靜態成員設置為靜態成員</li>\n<li>靜態成員方法中的 <code>this</code> 指向構造函數本身</li>\n</ol>\n<h1 id=\"內置構造函數\"><a href=\"#內置構造函數\" class=\"headerlink\" title=\"內置構造函數\"></a>內置構造函數</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>掌握各參考類型和包裝類型物件屬性和方法的使用。</p></blockquote>\n<p>在 JavaScript 中<strong>最主要</strong>的資料類型有 6 種，分別是字串、數值、布林、undefined、null 和 物件，常見的物件類型資料包括陣列和普通物件。其中字串、數值、布林、undefined、null 也被稱為簡單類型或基礎類型，物件也被稱為參考類型。</p>\n<p>在 JavaScript 內置了一些構造函數，絕大部的資料處理都是基於這些構造函數實現的，JavaScript 基礎階段學習的 <code>Date</code> 就是內置的構造函數。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 產生實體\n  let date &#x3D; new Date();\n  \n  &#x2F;&#x2F; date 即為實例物件\n  console.log(date);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>甚至字串、數值、布林、陣列、普通物件也都有專門的構造函數，用於創建對應類型的資料。</p>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><p><code>Object</code> 是內置的構造函數，用於創建普通物件。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 通過構造函數創建普通物件\n  const user &#x3D; new Object(&#123;name: &#39;小明&#39;, age: 15&#125;)\n\n  &#x2F;&#x2F; 這種方式聲明的變數稱為【字面量】\n  let student &#x3D; &#123;name: &#39;杜子騰&#39;, age: 21&#125;\n  \n  &#x2F;&#x2F; 物件語法簡寫\n  let name &#x3D; &#39;小紅&#39;;\n  let people &#x3D; &#123;\n    &#x2F;&#x2F; 相當於 name: name\n    name,\n    &#x2F;&#x2F; 相當於 walk: function () &#123;&#125;\n    walk () &#123;\n      console.log(&#39;人都要走路...&#39;);\n    &#125;\n  &#125;\n\n  console.log(student.constructor);\n  console.log(user.constructor);\n  console.log(student instanceof Object);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>。</p>\n<p>總結：</p>\n<ol>\n<li>推薦使用字面量方式聲明物件，而不是 <code>Object</code> 構造函數</li>\n<li><code>Object.assign</code> 靜態方法創建新的物件</li>\n<li><code>Object.keys</code> 靜態方法獲取物件中所有屬性</li>\n<li><code>Object.values</code> 表態方法獲取物件中所有屬性值</li>\n</ol>\n<h2 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h2><p><code>Array</code> 是內置的構造函數，用於創建陣列。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 構造函數創建陣列\n  let arr &#x3D; new Array(5, 7, 8);\n\n  &#x2F;&#x2F; 字面量方式創建陣列\n  let list &#x3D; [&#39;html&#39;, &#39;css&#39;, &#39;javascript&#39;]\n\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>陣列賦值後，無論修改哪個變數另一個物件的資料值也會相當發生改變。</p>\n<p>總結：</p>\n<ol>\n<li><p>推薦使用字面量方式聲明陣列，而不是 <code>Array</code> 構造函數</p>\n</li>\n<li><p>實例方法 <code>forEach</code> 用於遍歷陣列，替代 <code>for</code> 迴圈 (重點)</p>\n</li>\n<li><p>實例方法 <code>filter</code> 過濾陣列單元值，生成新陣列(重點)</p>\n</li>\n<li><p>實例方法 <code>map</code> 反覆運算原陣列，生成新陣列(重點)</p>\n</li>\n<li><p>實例方法 <code>join</code> 陣列元素拼接為字串，返回字串(重點)</p>\n</li>\n<li><p>實例方法  <code>find</code>  查找元素， 返回符合測試條件的第一個陣列元素值，如果沒有符合條件的則返回 undefined(重點)</p>\n</li>\n<li><p>實例方法<code>every</code> 檢測陣列所有元素是否都符合指定條件，如果<strong>所有元素</strong>都通過檢測返回 true，否則返回 false(重點)</p>\n</li>\n<li><p>實例方法<code>some</code> 檢測陣列中的元素是否滿足指定條件   <strong>如果陣列中有</strong>元素滿足條件返回 true，否則返回 false</p>\n</li>\n<li><p>實例方法 <code>concat</code>  合併兩個陣列，返回生成新陣列</p>\n</li>\n<li><p>實例方法 <code>sort</code> 對原陣列單元值排序</p>\n</li>\n<li><p>實例方法 <code>splice</code> 刪除或替換原陣列單元</p>\n</li>\n<li><p>實例方法 <code>reverse</code> 反轉陣列</p>\n</li>\n<li><p>實例方法 <code>findIndex</code>  查找元素的索引值</p>\n</li>\n</ol>\n<h2 id=\"包裝類型\"><a href=\"#包裝類型\" class=\"headerlink\" title=\"包裝類型\"></a>包裝類型</h2><p>在 JavaScript 中的字串、數值、布林具有物件的使用特徵，如具有屬性和方法，如下代碼舉例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 字串類型\n  const str &#x3D; &#39;hello world!&#39;\n  &#x2F;&#x2F; 統計字元的長度（字元數量）\n  console.log(str.length)\n  \n  &#x2F;&#x2F; 數數值型別\n  const price &#x3D; 12.345\n  &#x2F;&#x2F; 保留兩位小數\n  price.toFixed(2) &#x2F;&#x2F; 12.34\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>之所以具有物件特徵的原因是字串、數值、布林類型資料是 JavaScript 底層使用 Object 構造函數“包裝”來的，被稱為包裝類型。</p>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p><code>String</code> 是內置的構造函數，用於創建字串。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 使用構造函數創建字串\n  let str &#x3D; new String(&#39;hello world!&#39;);\n\n  &#x2F;&#x2F; 字面量創建字串\n  let str2 &#x3D; &#39;你好，世界！&#39;;\n\n  &#x2F;&#x2F; 檢測是否屬於同一個構造函數\n  console.log(str.constructor &#x3D;&#x3D;&#x3D; str2.constructor); &#x2F;&#x2F; true\n  console.log(str instanceof String); &#x2F;&#x2F; false\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>總結：</p>\n<ol>\n<li>實例屬性 <code>length</code> 用來獲取字串的度長(重點)</li>\n<li>實例方法 <code>split(&#39;分隔符號&#39;)</code> 用來將字串拆分成陣列(重點)</li>\n<li>實例方法 <code>substring（需要截取的第一個字元的索引[,結束的索引號]）</code> 用於字串截取(重點)</li>\n<li>實例方法 <code>startsWith(檢測字串[, 檢測位置索引號])</code> 檢測是否以某字元開頭(重點)</li>\n<li>實例方法 <code>includes(搜索的字串[, 檢測位置索引號])</code> 判斷一個字串是否包含在另一個字串中，根據情況返回 true 或 false(重點)</li>\n<li>實例方法 <code>toUpperCase</code> 用於將字母轉換成大寫</li>\n<li>實例方法 <code>toLowerCase</code> 用於將就轉換成小寫</li>\n<li>實例方法 <code>indexOf</code>  檢測是否包含某字元</li>\n<li>實例方法 <code>endsWith</code> 檢測是否以某字元結尾</li>\n<li>實例方法 <code>replace</code> 用於替換字串，支援正則匹配</li>\n<li>實例方法 <code>match</code> 用於查找字串，支援正則匹配</li>\n</ol>\n<p>注：String 也可以當做普通函數使用，這時它的作用是強制轉換成字串資料型別。</p>\n<h3 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number\"></a>Number</h3><p><code>Number</code> 是內置的構造函數，用於創建數值。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 使用構造函數創建數值\n  let x &#x3D; new Number(&#39;10&#39;)\n  let y &#x3D; new Number(5)\n\n  &#x2F;&#x2F; 字面量創建數值\n  let z &#x3D; 20\n\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>總結：</p>\n<ol>\n<li>推薦使用字面量方式聲明數值，而不是 <code>Number</code> 構造函數</li>\n<li>實例方法 <code>toFixed</code> 用於設置保留小數位的長度</li>\n</ol>\n","feature":true,"text":" 瞭解物件導向程式設計的基礎概念及構造函數的作用，體會 JavaScript 一切皆物件的語言特徵，掌握常見的物件屬性和方法的使用。 瞭解物件導向程式設計中的一般概念 能夠基於構造函數創建物件 理解 JavaScript 中一切皆物件的語言特徵 理解引用物件類型值存儲的的特徵 掌...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":15,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":15,"path":"api/tags/javaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%85%A5%E5%B0%8D%E8%B1%A1\"><span class=\"toc-text\">深入對象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A7%8B%E9%80%A0%E5%87%BD%E6%95%B8\"><span class=\"toc-text\">構造函數</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%A6%E4%BE%8B%E6%88%90%E5%93%A1\"><span class=\"toc-text\">實例成員</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%9C%E6%85%8B%E6%88%90%E5%93%A1\"><span class=\"toc-text\">靜態成員</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%A7%E7%BD%AE%E6%A7%8B%E9%80%A0%E5%87%BD%E6%95%B8\"><span class=\"toc-text\">內置構造函數</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object\"><span class=\"toc-text\">Object</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Array\"><span class=\"toc-text\">Array</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%85%E8%A3%9D%E9%A1%9E%E5%9E%8B\"><span class=\"toc-text\">包裝類型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#String\"><span class=\"toc-text\">String</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Number\"><span class=\"toc-text\">Number</span></a></li></ol></li></ol></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"(./source/img/1.jpg)","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript 進階 - 第3天","uid":"c43b2d50b25bb22e84622db700db53eb","slug":"20230331JavaScript 進階 - 第3天","date":"2023-03-31T01:22:08.000Z","updated":"2023-03-25T02:06:48.240Z","comments":true,"path":"api/articles/20230331JavaScript 進階 - 第3天.json","keywords":null,"cover":[],"text":"JavaScript 進階 - 第3天筆記 瞭解構造函數原型物件的語法特徵，掌握 JavaScript 中物件導向程式設計的實現方式，基於物件導向程式設計思想實現 DOM 操作的封裝。 瞭解物件導向程式設計的一般特徵 掌握基於構造函數原型物件的邏輯封裝 掌握基於原型物件實現的繼承...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":15,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":15,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"(./source/img/1.jpg)","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"JavaScript 進階 - 第1天","uid":"35ba1b013b453118df98cec61f2a93fb","slug":"20230329JavaScript 進階 - 第1天","date":"2023-03-29T01:22:08.000Z","updated":"2023-04-01T13:58:55.500Z","comments":true,"path":"api/articles/20230329JavaScript 進階 - 第1天.json","keywords":null,"cover":null,"text":" 學習作用域、變數提升、閉包等語言特徵，加深對 JavaScript 的理解，掌握變數賦值、函式宣告的簡潔語法，降低代碼的冗餘度。 理解作用域對程式執行的影響 能夠分析程式執行的作用域範圍 理解閉包本質，利用閉包創建隔離作用域 瞭解什麼變數提升及函數提升 掌握箭頭函數、解析剩餘參...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"19 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":15,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":15,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"(./source/img/1.jpg)","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}