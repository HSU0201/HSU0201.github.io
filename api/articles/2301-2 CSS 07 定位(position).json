{"title":"CSS 07-定位(position)","uid":"a80bc05c620a4e285b16be71646cc7c5","slug":"2301-2 CSS 07 定位(position)","date":"2023-03-16T02:50:27.000Z","updated":"2023-03-27T01:38:16.278Z","comments":true,"path":"api/articles/2301-2 CSS 07 定位(position).json","keywords":null,"cover":null,"content":"<h1 id=\"定位-position\"><a href=\"#定位-position\" class=\"headerlink\" title=\"定位(position)\"></a>定位(position)</h1><h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><ul>\n<li><strong>理解</strong><ul>\n<li>為什麼要用定位</li>\n<li>定位的4種分類</li>\n<li>4種定位的各自特點</li>\n<li>為什麼常用子絕父相佈局</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-CSS-佈局的三種機制\"><a href=\"#1-CSS-佈局的三種機制\" class=\"headerlink\" title=\"1. CSS 佈局的三種機制\"></a>1. CSS 佈局的三種機制</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>網頁佈局的核心 —— 就是<strong>用 CSS 來擺放盒子位置</strong>。</p></blockquote>\n<p>CSS 提供了 <strong>3 種機制</strong>來設置盒子的擺放位置，分別是<strong>普通流</strong>、<strong>浮動</strong>和<strong>定位</strong>，其中：</p>\n<ol>\n<li><p><strong>普通流</strong>（<strong>標準流</strong>）</p>\n</li>\n<li><p><strong>浮動</strong></p>\n<ul>\n<li>讓盒子從普通流中<strong>浮</strong>起來 —— <strong>讓多個盒子(div)水準排列成一行</strong>。</li>\n</ul>\n</li>\n<li><p><strong>定位</strong></p>\n<ul>\n<li>將盒子<strong>定</strong>在某一個<strong>位</strong>置  自由的漂浮在其他盒子的上面  —— CSS 離不開定位，特別是後面的 js 特效。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-為什麼使用定位\"><a href=\"#2-為什麼使用定位\" class=\"headerlink\" title=\"2. 為什麼使用定位\"></a>2. 為什麼使用定位</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>將盒子<strong>定</strong>在某一個<strong>位</strong>置，<br>自由的漂浮在其他盒子(包括標準流和浮動)的上面 </p></blockquote>\n<p>所以，我們腦海應該有三種佈局機制的上下順序</p>\n<p><strong>定位</strong>的盒子在最<strong>上</strong>層  （天空）<br> <strong>浮動</strong>的盒子在<strong>中間</strong>層  (海面)<br>   <strong>標準</strong>流在最<strong>底</strong>層 (海底) </p>\n<h2 id=\"3-定位詳解\"><a href=\"#3-定位詳解\" class=\"headerlink\" title=\"3. 定位詳解\"></a>3. 定位詳解</h2><p>定位也是用來佈局的，它有兩部分組成：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>定位 = 定位模式 + 邊偏移</code></p></blockquote>\n<h3 id=\"3-1-邊偏移\"><a href=\"#3-1-邊偏移\" class=\"headerlink\" title=\"3.1 邊偏移\"></a>3.1 邊偏移</h3><p>簡單說， 我們定位的盒子，是通過邊偏移來移動位置的。</p>\n<p>在 CSS 中，通過 <code>top</code>、<code>bottom</code>、<code>left</code> 和 <code>right</code> 屬性定義元素的<strong>邊偏移</strong>：（方位名詞）</p>\n<table>\n<thead>\n<tr>\n<th>邊偏移屬性</th>\n<th align=\"left\">示例</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>top</code></td>\n<td align=\"left\"><code>top: 10px</code></td>\n<td><strong>頂端</strong>偏移量，定義元素相對于其父元素<strong>上邊線的距離</strong>。</td>\n</tr>\n<tr>\n<td><code>bottom</code></td>\n<td align=\"left\"><code>bottom: 10px</code></td>\n<td><strong>底部</strong>偏移量，定義元素相對于其父元素<strong>下邊線的距離</strong>。</td>\n</tr>\n<tr>\n<td><code>left</code></td>\n<td align=\"left\"><code>left: 10px</code></td>\n<td><strong>左側</strong>偏移量，定義元素相對于其父元素<strong>左邊線的距離</strong>。</td>\n</tr>\n<tr>\n<td><code>right</code></td>\n<td align=\"left\"><code>right: 10px</code></td>\n<td><strong>右側</strong>偏移量，定義元素相對于其父元素<strong>右邊線的距離</strong></td>\n</tr>\n</tbody></table>\n<p>定位的盒子有了邊偏移才有價值。 一般情況下，凡是有定位地方必定有邊偏移。</p>\n<h3 id=\"3-2-定位模式-position\"><a href=\"#3-2-定位模式-position\" class=\"headerlink\" title=\"3.2  定位模式 (position)\"></a>3.2  定位模式 (position)</h3><p>在 CSS 中，通過 <code>position</code> 屬性定義元素的<strong>定位模式</strong>，語法如下：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">選擇器 &#123; position: 屬性值; &#125;</code></pre>\n<p>定位模式是有不同分類的，在不同情況下，我們用到不同的定位模式。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th align=\"center\">語義</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>static</code></td>\n<td align=\"center\"><strong>靜態</strong>定位</td>\n</tr>\n<tr>\n<td><code>relative</code></td>\n<td align=\"center\"><strong>相對</strong>定位</td>\n</tr>\n<tr>\n<td><code>absolute</code></td>\n<td align=\"center\"><strong>絕對</strong>定位</td>\n</tr>\n<tr>\n<td><code>fixed</code></td>\n<td align=\"center\"><strong>固定</strong>定位</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-2-1-靜態定位-static-瞭解\"><a href=\"#3-2-1-靜態定位-static-瞭解\" class=\"headerlink\" title=\"3.2.1 靜態定位(static) - 瞭解\"></a>3.2.1 靜態定位(static) - 瞭解</h4><ul>\n<li><strong>靜態定位</strong>是元素的預設定位方式，無定位的意思。它相當於 border 裡面的none， 不要定位的時候用。</li>\n<li>靜態定位 按照標準流特性擺放位置，它沒有邊偏移。</li>\n<li>靜態定位在佈局時我們幾乎不用的</li>\n</ul>\n<h4 id=\"3-2-1-相對定位-relative-重要\"><a href=\"#3-2-1-相對定位-relative-重要\" class=\"headerlink\" title=\"3.2.1 相對定位(relative) - 重要\"></a>3.2.1 相對定位(relative) - 重要</h4><ul>\n<li><strong>相對定位</strong>是元素<strong>相對</strong>于它  原來在標準流中的位置 來說的。（自戀型）</li>\n</ul>\n<p>相對定位的特點：（務必記住）</p>\n<ul>\n<li>相對于 自己原來在標準流中位置來移動的</li>\n<li>原來<strong>在標準流的區域繼續佔有</strong>，後面的盒子仍然以標準流的方式對待它。</li>\n</ul>\n<h4 id=\"3-2-3-絕對定位-absolute-重要\"><a href=\"#3-2-3-絕對定位-absolute-重要\" class=\"headerlink\" title=\"3.2.3 絕對定位(absolute) - 重要\"></a>3.2.3 絕對定位(absolute) - 重要</h4><p><strong>絕對定位</strong>是元素以帶有定位的父級元素來移動位置 （拼爹型）</p>\n<ol>\n<li><p><strong>完全脫標</strong> —— 完全不占位置；  </p>\n</li>\n<li><p><strong>父元素沒有定位</strong>，則以<strong>流覽器</strong>為准定位（Document 文檔）。</p>\n</li>\n<li><p><strong>父元素要有定位</strong></p>\n<ul>\n<li>將元素依據最近的已經定位（絕對、固定或相對定位）的父元素（祖先）進行定位。</li>\n</ul>\n</li>\n</ol>\n<p>絕對定位的特點：（務必記住）</p>\n<ul>\n<li>絕對是以帶有定位的父級元素來移動位置 （拼爹型） 如果父級都沒有定位，則以流覽器文檔為准移動位置</li>\n<li>不保留原來的位置，完全是脫標的。</li>\n</ul>\n<p>因為絕對定位的盒子是拼爹的，所以要和父級搭配一起來使用。</p>\n<h5 id=\"定位口訣-——-子絕父相\"><a href=\"#定位口訣-——-子絕父相\" class=\"headerlink\" title=\"定位口訣 —— 子絕父相\"></a>定位口訣 —— 子絕父相</h5><p>剛才咱們說過，絕對定位，要和帶有定位的父級搭配使用，那麼父級要用什麼定位呢？</p>\n<p><strong>子絕父相</strong> —— <strong>子級</strong>是<strong>絕對</strong>定位，<strong>父級</strong>要用<strong>相對</strong>定位。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>子絕父相</strong>是使用絕對定位的口訣，要牢牢記住！</p></blockquote>\n<p><strong>疑問</strong>：為什麼在佈局時，<strong>子級元素</strong>使用<strong>絕對定位</strong>時，<strong>父級元素</strong>就要用<strong>相對定位</strong>呢？</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li><strong>方向箭頭</strong>疊加在其他圖片上方，應該使用<strong>絕對定位</strong>，因為<strong>絕對定位完全脫標</strong>，完全不占位置。</li>\n<li><strong>父級盒子</strong>應該使用<strong>相對定位</strong>，因為<strong>相對定位不脫標</strong>，後續盒子仍然以標準流的方式對待它。<ul>\n<li>如果父級盒子也使用<strong>絕對定位</strong>，會完全脫標，那麼下方的<strong>廣告盒子</strong>會上移，這顯然不是我們想要的。</li>\n</ul>\n</li>\n</ol>\n<p><strong>結論</strong>：<strong>父級要佔有位置，子級要任意擺放</strong>，這就是<strong>子絕父相</strong>的由來。</p>\n<h4 id=\"3-2-4-固定定位-fixed-重要\"><a href=\"#3-2-4-固定定位-fixed-重要\" class=\"headerlink\" title=\"3.2.4 固定定位(fixed) - 重要\"></a>3.2.4 固定定位(fixed) - 重要</h4><p><strong>固定定位</strong>是<strong>絕對定位</strong>的一種特殊形式： （認死理型）   如果說絕對定位是一個矩形 那麼 固定定位就類似於正方形</p>\n<ol>\n<li><strong>完全脫標</strong> —— 完全不占位置；</li>\n<li>只認<strong>流覽器的可視窗口</strong> —— <code>流覽器可視視窗 + 邊偏移屬性</code> 來設置元素的位置；<ul>\n<li>跟父元素沒有任何關係；單獨使用的</li>\n<li>不隨捲軸滾動。</li>\n</ul>\n</li>\n</ol>\n<p><strong>提示</strong>：IE 6 等低版本流覽器不支援固定定位。</p>\n<h2 id=\"4-定位-position-的擴展\"><a href=\"#4-定位-position-的擴展\" class=\"headerlink\" title=\"4. 定位(position)的擴展\"></a>4. 定位(position)的擴展</h2><h3 id=\"4-1-絕對定位的盒子居中\"><a href=\"#4-1-絕對定位的盒子居中\" class=\"headerlink\" title=\"4.1 絕對定位的盒子居中\"></a>4.1 絕對定位的盒子居中</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意</strong>：<strong>絕對定位&#x2F;固定定位的盒子</strong>不能通過設置 <code>margin: auto</code> 設置<strong>水準居中</strong>。</p></blockquote>\n<p>在使用<strong>絕對定位</strong>時要想實現水準居中，可以按照以下的方法：</p>\n<ol>\n<li><code>left: 50%;</code>：讓<strong>盒子的左側</strong>移動到<strong>父級元素的水準中心位置</strong>；</li>\n<li><code>margin-left: -100px;</code>：讓盒子<strong>向左</strong>移動<strong>自身寬度的一半</strong>。</li>\n</ol>\n<h3 id=\"4-2-堆疊順序（z-index）\"><a href=\"#4-2-堆疊順序（z-index）\" class=\"headerlink\" title=\"4.2 堆疊順序（z-index）\"></a>4.2 堆疊順序（z-index）</h3><p>在使用<strong>定位</strong>佈局時，可能會<strong>出現盒子重疊的情況</strong>。</p>\n<p>加了定位的盒子，默認<strong>後來者居上</strong>， 後面的盒子會壓住前面的盒子。</p>\n<p>應用 <code>z-index</code> 層疊等級屬性可以<strong>調整盒子的堆疊順序</strong>。</p>\n<p><code>z-index</code> 的特性如下：</p>\n<ol>\n<li><strong>屬性值</strong>：<strong>正整數</strong>、<strong>負整數</strong>或 <strong>0</strong>，預設值是 0，數值越大，盒子越靠上；</li>\n<li>如果<strong>屬性值相同</strong>，則按照書寫順序，<strong>後來居上</strong>；</li>\n<li><strong>數位後面不能加單位</strong>。</li>\n</ol>\n<p><strong>注意</strong>：<code>z-index</code> 只能應用於<strong>相對定位</strong>、<strong>絕對定位</strong>和<strong>固定定位</strong>的元素，其他<strong>標準流</strong>、<strong>浮動</strong>和<strong>靜態定位</strong>無效。</p>\n<h3 id=\"4-3-定位改變display屬性\"><a href=\"#4-3-定位改變display屬性\" class=\"headerlink\" title=\"4.3 定位改變display屬性\"></a>4.3 定位改變display屬性</h3><p> 前面我們講過， display 是 顯示模式， 可以改變顯示模式有以下方式:</p>\n<ul>\n<li>可以用inline-block  轉換為行內塊</li>\n<li>可以用浮動 float 默認轉換為行內塊（類似，並不完全一樣，因為浮動是脫標的）</li>\n<li>絕對定位和固定定位也和浮動類似， 默認轉換的特性 轉換為行內塊。</li>\n</ul>\n<p>所以說， 一個行內的盒子，如果加了<strong>浮動</strong>、<strong>固定定位</strong>和<strong>絕對定位</strong>，不用轉換，就可以給這個盒子直接設置寬度和高度等。</p>\n<p><strong>同時注意：</strong></p>\n<p>浮動元素、絕對定位(固定定位）元素的都不會觸發外邊距合併的問題。 （我們以前是用padding border overflow解決的）</p>\n<p>也就是說，我們給盒子改為了浮動或者定位，就不會有垂直外邊距合併的問題了。</p>\n<h2 id=\"5-定位小結\"><a href=\"#5-定位小結\" class=\"headerlink\" title=\"5. 定位小結\"></a>5. 定位小結</h2><table>\n<thead>\n<tr>\n<th>定位模式</th>\n<th>是否脫標佔有位置</th>\n<th align=\"left\">移動位置基準</th>\n<th>模式轉換（行內塊）</th>\n<th>使用情況</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>靜態static</td>\n<td>不脫標，正常模式</td>\n<td align=\"left\">正常模式</td>\n<td>不能</td>\n<td>幾乎不用</td>\n</tr>\n<tr>\n<td>相對定位relative</td>\n<td>不脫標，佔有位置</td>\n<td align=\"left\">相對自身位置移動</td>\n<td>不能</td>\n<td>基本單獨使用</td>\n</tr>\n<tr>\n<td>絕對定位absolute</td>\n<td>完全脫標，不佔有位置</td>\n<td align=\"left\">相對于定位父級移動位置</td>\n<td>能</td>\n<td>要和定位父級元素搭配使用</td>\n</tr>\n<tr>\n<td>固定定位fixed</td>\n<td>完全脫標，不佔有位置</td>\n<td align=\"left\">相對於流覽器移動位置</td>\n<td>能</td>\n<td>單獨使用，不需要父級</td>\n</tr>\n</tbody></table>\n<p><strong>注意</strong>：</p>\n<ol>\n<li><strong>邊偏移</strong>需要和<strong>定位模式</strong>聯合使用，<strong>單獨使用無效</strong>；</li>\n<li><code>top</code> 和 <code>bottom</code> 不要同時使用；</li>\n<li><code>left</code> 和 <code>right</code> 不要同時使用。</li>\n</ol>\n<h2 id=\"6-網頁佈局總結\"><a href=\"#6-網頁佈局總結\" class=\"headerlink\" title=\"6. 網頁佈局總結\"></a>6. 網頁佈局總結</h2><p>一個完整的網頁，有標準流 、 浮動 、 定位 一起完成佈局的。每個都有自己的專門用法。</p>\n<h4 id=\"1-標準流\"><a href=\"#1-標準流\" class=\"headerlink\" title=\"1). 標準流\"></a>1). 標準流</h4><p>可以讓盒子上下排列 或者 左右排列的</p>\n<h4 id=\"2-浮動\"><a href=\"#2-浮動\" class=\"headerlink\" title=\"2). 浮動\"></a>2). 浮動</h4><p>可以讓多個塊級元素一行顯示  或者 左右對齊盒子   浮動的盒子就是按照順序左右排列 </p>\n<h4 id=\"3-定位\"><a href=\"#3-定位\" class=\"headerlink\" title=\"3). 定位\"></a>3). 定位</h4><p>定位最大的特點是有層疊的概念，就是可以讓多個盒子 前後 疊壓來顯示。 但是每個盒子需要測量數值。</p>\n","feature":null,"text":"定位(position)目標 理解 為什麼要用定位 定位的4種分類 4種定位的各自特點 為什麼常用子絕父相佈局 1. CSS 佈局的三種機制 網頁佈局的核心 —— 就是用 CSS 來擺放盒子位置。 CSS 提供了 3 種機制來設置盒子的擺放位置，分別是普通流、浮動和定位，其中： ...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"CSS","slug":"CSS","count":8,"path":"api/categories/CSS.json"}],"tags":[{"name":"CSS","slug":"CSS","count":8,"path":"api/tags/CSS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%BD%8D-position\"><span class=\"toc-text\">定位(position)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A8%99\"><span class=\"toc-text\">目標</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-CSS-%E4%BD%88%E5%B1%80%E7%9A%84%E4%B8%89%E7%A8%AE%E6%A9%9F%E5%88%B6\"><span class=\"toc-text\">1. CSS 佈局的三種機制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%BF%E7%94%A8%E5%AE%9A%E4%BD%8D\"><span class=\"toc-text\">2. 為什麼使用定位</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%AE%9A%E4%BD%8D%E8%A9%B3%E8%A7%A3\"><span class=\"toc-text\">3. 定位詳解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E9%82%8A%E5%81%8F%E7%A7%BB\"><span class=\"toc-text\">3.1 邊偏移</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%AE%9A%E4%BD%8D%E6%A8%A1%E5%BC%8F-position\"><span class=\"toc-text\">3.2  定位模式 (position)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-1-%E9%9D%9C%E6%85%8B%E5%AE%9A%E4%BD%8D-static-%E7%9E%AD%E8%A7%A3\"><span class=\"toc-text\">3.2.1 靜態定位(static) - 瞭解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-1-%E7%9B%B8%E5%B0%8D%E5%AE%9A%E4%BD%8D-relative-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">3.2.1 相對定位(relative) - 重要</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-3-%E7%B5%95%E5%B0%8D%E5%AE%9A%E4%BD%8D-absolute-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">3.2.3 絕對定位(absolute) - 重要</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%BD%8D%E5%8F%A3%E8%A8%A3-%E2%80%94%E2%80%94-%E5%AD%90%E7%B5%95%E7%88%B6%E7%9B%B8\"><span class=\"toc-text\">定位口訣 —— 子絕父相</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-4-%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D-fixed-%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">3.2.4 固定定位(fixed) - 重要</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%AE%9A%E4%BD%8D-position-%E7%9A%84%E6%93%B4%E5%B1%95\"><span class=\"toc-text\">4. 定位(position)的擴展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E7%B5%95%E5%B0%8D%E5%AE%9A%E4%BD%8D%E7%9A%84%E7%9B%92%E5%AD%90%E5%B1%85%E4%B8%AD\"><span class=\"toc-text\">4.1 絕對定位的盒子居中</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E5%A0%86%E7%96%8A%E9%A0%86%E5%BA%8F%EF%BC%88z-index%EF%BC%89\"><span class=\"toc-text\">4.2 堆疊順序（z-index）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E5%AE%9A%E4%BD%8D%E6%94%B9%E8%AE%8Adisplay%E5%B1%AC%E6%80%A7\"><span class=\"toc-text\">4.3 定位改變display屬性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%AE%9A%E4%BD%8D%E5%B0%8F%E7%B5%90\"><span class=\"toc-text\">5. 定位小結</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E7%B6%B2%E9%A0%81%E4%BD%88%E5%B1%80%E7%B8%BD%E7%B5%90\"><span class=\"toc-text\">6. 網頁佈局總結</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%A8%99%E6%BA%96%E6%B5%81\"><span class=\"toc-text\">1). 標準流</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%B5%AE%E5%8B%95\"><span class=\"toc-text\">2). 浮動</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%AE%9A%E4%BD%8D\"><span class=\"toc-text\">3). 定位</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CSS 08-高級技巧","uid":"e6004c997fa8a9529d5026785922b3ae","slug":"2301-2 CSS 08 高級技巧","date":"2023-03-17T02:50:27.000Z","updated":"2023-03-27T01:38:20.131Z","comments":true,"path":"api/articles/2301-2 CSS 08 高級技巧.json","keywords":null,"cover":null,"text":"CSS高級技巧目標 理解 元素顯示隱藏最常見的寫法 精靈圖產生的目的 去除圖片底側空白縫隙的方法 應用 寫出最常見的滑鼠樣式 使用精靈圖技術 用滑動門做巡覽列案例 1. 元素的顯示與隱藏 目的：讓一個元素在頁面中消失或者顯示出來 場景：類似網站廣告，當我們點擊關閉就不見了，但是我...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"CSS","slug":"CSS","count":8,"path":"api/categories/CSS.json"}],"tags":[{"name":"CSS","slug":"CSS","count":8,"path":"api/tags/CSS.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"CSS 06-浮動(float)","uid":"9ff528d9337f78a8c4f9529b9dd287e6","slug":"2301-2 CSS 06 浮動(float)","date":"2023-03-15T02:50:27.000Z","updated":"2023-03-27T01:38:12.086Z","comments":true,"path":"api/articles/2301-2 CSS 06 浮動(float).json","keywords":null,"cover":null,"text":"1. 浮動(float)目標 記憶 CSS 的佈局的三種機制 理解 普通流在佈局中的特點 為什麼用浮動 為什麼要清除浮動 應用 利用浮動完成巡覽列案例 清除浮動 1.1 CSS 佈局的三種機制 網頁佈局的核心——就是用 CSS 來擺放盒子。 CSS 提供了 3 種機制來設置盒子的...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"CSS","slug":"CSS","count":8,"path":"api/categories/CSS.json"}],"tags":[{"name":"CSS","slug":"CSS","count":8,"path":"api/tags/CSS.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}