{"title":"內建-緩衝區模組 ( Buffer )","uid":"b4f37f72e1016ef379212405ddab2ded","slug":"NODEJS05 【內建-緩衝區模組 ( Buffer )】","date":"2024-01-09T11:30:05.000Z","updated":"2024-02-16T13:35:30.295Z","comments":true,"path":"api/articles/NODEJS05 【內建-緩衝區模組 ( Buffer )】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/node.js/what-is-npm.png?raw=true","content":"<h1 id=\"05-【內建-緩衝區模組-Buffer-】\"><a href=\"#05-【內建-緩衝區模組-Buffer-】\" class=\"headerlink\" title=\"05 【內建-緩衝區模組 ( Buffer )】\"></a>05 【內建-緩衝區模組 ( Buffer )】</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li><p>Buffer 是一個類似於陣列的 物件 ，用於表示固定長度的字節序列</p>\n</li>\n<li><p>Buffer 本質是一段記憶體空間，專門用來處理 二進位資料 。</p>\n</li>\n<li><p>在 NodeJS 6.0 以及之後的版本中，儘管 Buffer 是全域的，但還是建議通過 require(‘buffer’).Buffer 來取得 Buffer 類別，這樣可以提高程式碼的模組化和可移植性</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>檔案讀入後的基本單位就是 Buffer</p></blockquote>\n<h2 id=\"特點\"><a href=\"#特點\" class=\"headerlink\" title=\"特點\"></a>特點</h2><ul>\n<li>對這些 Buffer 進行各種操作，如讀取和寫入資料、獲取長度、比較 Buffer 等</li>\n<li>Buffer 大小固定且無法調整</li>\n<li>Buffer 性能較好，可以直接對計算機記憶體進行操作</li>\n<li>每個元素的大小為 1 字節（byte）</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"創建-Buffer\"><a href=\"#創建-Buffer\" class=\"headerlink\" title=\"創建 Buffer\"></a>創建 Buffer</h3><p>Node.js 中創建 Buffer 的方式主要如下幾種：</p>\n<p><strong>Buffer.alloc</strong></p>\n<ul>\n<li>使用 alloc 建立的 buffer 最後都會歸零</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 創建了一個長度為 10 字節的 Buffer，相當於申請了 10 字節的記憶體空間，每個字節的值為 0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> buf1 = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">alloc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buf1);</span><br><span class=\"line\"><span class=\"comment\">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Buffer.allocUnsafe</strong></p>\n<ul>\n<li>allocUnsafe 不會歸零，所以使用它建的立的 buffer 有可能會含有其他程式的 buffer</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 創建了一個長度為 10 字節的 Buffer，buffer 中可能存在舊資料，可能會影響執行結果，所以叫 unsafe ，但是效率比 alloc 高</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> buf2 = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">allocUnsafe</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buf2);</span><br><span class=\"line\"><span class=\"comment\">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Buffer.from</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通過字符串創建 Buffer</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> buf3 = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 通過陣列創建 Buffer</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> buf4 = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>([<span class=\"number\">105</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>, <span class=\"number\">118</span>, <span class=\"number\">101</span>, <span class=\"number\">121</span>, <span class=\"number\">111</span>, <span class=\"number\">117</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 建立一個 Buffer，包含 UTF-8 字串 &#x27;你好&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> buf5 = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(<span class=\"string\">&quot;你好&quot;</span>, <span class=\"string\">&quot;utf8&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Buffer-與字符串的轉化\"><a href=\"#Buffer-與字符串的轉化\" class=\"headerlink\" title=\"Buffer 與字符串的轉化\"></a>Buffer 與字符串的轉化</h3><p>我們可以借助 toString 方法將 Buffer 轉為字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> buf6 = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>([<span class=\"number\">105</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>, <span class=\"number\">118</span>, <span class=\"number\">101</span>, <span class=\"number\">121</span>, <span class=\"number\">111</span>, <span class=\"number\">117</span>]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buf6.<span class=\"title function_\">toString</span>()); <span class=\"comment\">//=&gt;iloveyou</span></span><br></pre></td></tr></table></figure>\n\n<p>**注意: **toString 預設是按照 utf-8 編碼方式進行轉換的</p>\n<h3 id=\"Buffer-的讀寫\"><a href=\"#Buffer-的讀寫\" class=\"headerlink\" title=\"Buffer 的讀寫\"></a>Buffer 的讀寫</h3><p>Buffer 可以直接通過 [] 的方式對資料進行處理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> buf7 = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 讀取</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buf7[<span class=\"number\">1</span>]); <span class=\"comment\">//=&gt;101</span></span><br><span class=\"line\"><span class=\"comment\">// 對應的是 ASCII 編碼中的字符 &#x27;e&#x27;，其 ASCII 值為 101。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改</span></span><br><span class=\"line\">buf7[<span class=\"number\">1</span>] = <span class=\"number\">97</span>;</span><br><span class=\"line\"><span class=\"comment\">// 將 Buffer 中索引為 1 的字節的值更改為 97，對應 ASCII 編碼中的字符 &#x27;a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看字符串結果</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buf7.<span class=\"title function_\">toString</span>()); <span class=\"comment\">//=&gt;hallo</span></span><br><span class=\"line\"><span class=\"comment\">// 字符串由 &quot;hello&quot; 變為 &quot;hallo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong></p>\n<p>如果修改的數值超過 255 ，則超過 8 位資料會被捨棄<br>一個 utf-8 的字符 一般 佔 3 個字節</p>\n","feature":null,"text":"05 【內建-緩衝區模組 ( Buffer )】概念 Buffer 是一個類似於陣列的 物件 ，用於表示固定長度的字節序列 Buffer 本質是一段記憶體空間，...","permalink":"/post/NODEJS05 【內建-緩衝區模組 ( Buffer )】","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"node.js","slug":"node-js","count":6,"path":"api/categories/node-js.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":30,"path":"api/tags/桃園資展筆記.json"},{"name":"node.js","slug":"node-js","count":8,"path":"api/tags/node-js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#05-%E3%80%90%E5%85%A7%E5%BB%BA-%E7%B7%A9%E8%A1%9D%E5%8D%80%E6%A8%A1%E7%B5%84-Buffer-%E3%80%91\"><span class=\"toc-text\">05 【內建-緩衝區模組 ( Buffer )】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E9%BB%9E\"><span class=\"toc-text\">特點</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%B5%E5%BB%BA-Buffer\"><span class=\"toc-text\">創建 Buffer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Buffer-%E8%88%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%89%E5%8C%96\"><span class=\"toc-text\">Buffer 與字符串的轉化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Buffer-%E7%9A%84%E8%AE%80%E5%AF%AB\"><span class=\"toc-text\">Buffer 的讀寫</span></a></li></ol></li></ol></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"內建-路徑處理模組 ( path )","uid":"1033bc320af8e95a06637ef625a7542f","slug":"NODEJS06 【內建-路徑處理模組 ( path ) 】","date":"2024-01-10T11:30:05.000Z","updated":"2024-02-16T13:35:23.188Z","comments":true,"path":"api/articles/NODEJS06 【內建-路徑處理模組 ( path ) 】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/node.js/what-is-npm.png?raw=true","text":"06 【內建-路徑處理模組 ( path ) 】1. path模組簡介路徑處理模組（path module）是 Node.js 核心模組之一，用於處理文件路徑和...","permalink":"/post/NODEJS06 【內建-路徑處理模組 ( path ) 】","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"node.js","slug":"node-js","count":6,"path":"api/categories/node-js.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":30,"path":"api/tags/桃園資展筆記.json"},{"name":"node.js","slug":"node-js","count":8,"path":"api/tags/node-js.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"npm 的使用","uid":"66ca433af84363e4484d96dff2659208","slug":"NODEJS03 【npm的使用】","date":"2024-01-07T11:30:05.000Z","updated":"2024-02-16T13:35:13.624Z","comments":true,"path":"api/articles/NODEJS03 【npm的使用】.json","keywords":null,"cover":"https://github.com/HSU0201/images/blob/main/node.js/what-is-npm.png?raw=true","text":"03 【npm 的使用】1. Package 和 npm1.1 什麼是 Package(套件)Package（套件）是指將一系列相關的功能、程式碼或資源打包在一...","permalink":"/post/NODEJS03 【npm的使用】","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"node.js","slug":"node-js","count":6,"path":"api/categories/node-js.json"}],"tags":[{"name":"桃園資展筆記","slug":"桃園資展筆記","count":30,"path":"api/tags/桃園資展筆記.json"},{"name":"node.js","slug":"node-js","count":8,"path":"api/tags/node-js.json"},{"name":"npm","slug":"npm","count":1,"path":"api/tags/npm.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}