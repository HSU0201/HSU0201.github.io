{"title":"JavaScript 基礎 - 第2天","uid":"119b4406e4e9c28d94cef591716ce0ed","slug":"2303-1 JS 基礎2 運算子&語句","date":"2023-03-18T16:00:00.000Z","updated":"2023-03-25T02:06:36.479Z","comments":true,"path":"api/articles/2303-1 JS 基礎2 運算子&語句.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>理解什麼是流程控制，知道條件控制的種類並掌握其對應的語法規則，具備利用迴圈編寫簡易ATM取款機程式能力</p></blockquote>\n<ul>\n<li>運算子</li>\n<li>語句</li>\n<li>綜合案例</li>\n</ul>\n<h2 id=\"運算子\"><a href=\"#運算子\" class=\"headerlink\" title=\"運算子\"></a>運算子</h2><h3 id=\"算術運算子\"><a href=\"#算術運算子\" class=\"headerlink\" title=\"算術運算子\"></a>算術運算子</h3><p>數字是用來計算的，比如：乘法 * 、除法 &#x2F; 、加法 + 、減法 - 等等，所以經常和算術運算子一起。</p>\n<p>算術運算子：也叫數學運算子，主要包括加、減、乘、除、取餘（求模）等</p>\n<table>\n<thead>\n<tr>\n<th>運算子</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>求和</td>\n</tr>\n<tr>\n<td>-</td>\n<td>求差</td>\n</tr>\n<tr>\n<td>*</td>\n<td>求積</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>求商</td>\n</tr>\n<tr>\n<td><strong>%</strong></td>\n<td>取模（取餘數），開發中經常用於作為某個數位是否被整除</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：在計算失敗時，顯示的結果是 NaN （not a number）</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 算術運算子\nconsole.log(1 + 2 * 3 &#x2F; 2) &#x2F;&#x2F;  4 \nlet num &#x3D; 10\nconsole.log(num + 10)  &#x2F;&#x2F; 20\nconsole.log(num + num)  &#x2F;&#x2F; 20\n\n&#x2F;&#x2F; 1. 取模(取餘數)  使用場景：  用來判斷某個數是否能夠被整除\nconsole.log(4 % 2) &#x2F;&#x2F;  0  \nconsole.log(6 % 3) &#x2F;&#x2F;  0\nconsole.log(5 % 3) &#x2F;&#x2F;  2\nconsole.log(3 % 5) &#x2F;&#x2F;  3\n\n&#x2F;&#x2F; 2. 注意事項 : 如果我們計算失敗，則返回的結果是 NaN (not a number)\nconsole.log(&#39;老徐&#39; - 2)\nconsole.log(&#39;老徐&#39; * 2)\nconsole.log(&#39;老徐&#39; + 2)   &#x2F;&#x2F; pink老師2</code></pre>\n\n<h3 id=\"設定運算子\"><a href=\"#設定運算子\" class=\"headerlink\" title=\"設定運算子\"></a>設定運算子</h3><p>設定運算子：對變數進行賦值的運算子</p>\n<p> &#x3D;     將等號右邊的值賦予給左邊, 要求左邊必須是一個容器</p>\n<table>\n<thead>\n<tr>\n<th>運算子</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+&#x3D;</td>\n<td>加法賦值</td>\n</tr>\n<tr>\n<td>-+</td>\n<td>減法賦值</td>\n</tr>\n<tr>\n<td>*&#x3D;</td>\n<td>乘法賦值</td>\n</tr>\n<tr>\n<td>&#x2F;&#x3D;</td>\n<td>除法賦值</td>\n</tr>\n<tr>\n<td>%&#x3D;</td>\n<td>取餘賦值</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\nlet num &#x3D; 1\n&#x2F;&#x2F; num &#x3D; num + 1\n&#x2F;&#x2F; 採取設定運算子\n&#x2F;&#x2F; num +&#x3D; 1\nnum +&#x3D; 3\nconsole.log(num)\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"自增-x2F-自減運算子\"><a href=\"#自增-x2F-自減運算子\" class=\"headerlink\" title=\"自增&#x2F;自減運算子\"></a>自增&#x2F;自減運算子</h3><table>\n<thead>\n<tr>\n<th>符號</th>\n<th>作用</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>++</td>\n<td>自增</td>\n<td>變數自身的值加1，例如: x++</td>\n</tr>\n<tr>\n<td>–</td>\n<td>自減</td>\n<td>變數自身的值減1，例如: x–</td>\n</tr>\n</tbody></table>\n<ol>\n<li>++在前和++在後在單獨使用時二者並沒有差別，而且一般開發中我們都是獨立使用</li>\n<li>++在後（尾碼式）我們會使用更多</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：</p>\n<ol>\n<li>只有變數能夠使用自增和自減運算子</li>\n<li>++、– 可以在變數前面也可以在變數後面，比如: x++  或者  ++x</li>\n</ol></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n    &#x2F;&#x2F; let num &#x3D; 10\n    &#x2F;&#x2F; num &#x3D; num + 1\n    &#x2F;&#x2F; num +&#x3D; 1\n    &#x2F;&#x2F; &#x2F;&#x2F; 1. 前置自增\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; ++i\n    &#x2F;&#x2F; console.log(i)\n\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; console.log(++i + 1)\n    &#x2F;&#x2F; 2. 後置自增\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; i++\n    &#x2F;&#x2F; console.log(i)\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; console.log(i++ + 1)\n\n    &#x2F;&#x2F; 瞭解 \n    let i &#x3D; 1\n    console.log(i++ + ++i + i)\n  &lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"比較運算子\"><a href=\"#比較運算子\" class=\"headerlink\" title=\"比較運算子\"></a>比較運算子</h3><p>使用場景：比較兩個資料大小、是否相等，根據比較結果返回一個布林值（true &#x2F; false）</p>\n<table>\n<thead>\n<tr>\n<th>運算子</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td>左邊是否大於右邊</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>左邊是否小於右邊</td>\n</tr>\n<tr>\n<td>&gt;&#x3D;</td>\n<td>左邊是否大於或等於右邊</td>\n</tr>\n<tr>\n<td>&lt;&#x3D;</td>\n<td>左邊是否小於或等於右邊</td>\n</tr>\n<tr>\n<td>&#x3D;&#x3D;&#x3D;</td>\n<td>左右兩邊是否<code>類型</code>和<code>值</code>都相等（重點）</td>\n</tr>\n<tr>\n<td>&#x3D;&#x3D;</td>\n<td>左右兩邊<code>值</code>是否相等</td>\n</tr>\n<tr>\n<td>!&#x3D;</td>\n<td>左右值不相等</td>\n</tr>\n<tr>\n<td>!&#x3D;&#x3D;</td>\n<td>左右兩邊是否不全等</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n  console.log(3 &gt; 5)\n  console.log(3 &gt;&#x3D; 3)\n  console.log(2 &#x3D;&#x3D; 2)\n  &#x2F;&#x2F; 比較運算子有隱式轉換 把&#39;2&#39; 轉換為 2  雙等號 只判斷值\n  console.log(2 &#x3D;&#x3D; &#39;2&#39;)  &#x2F;&#x2F; true\n  &#x2F;&#x2F; console.log(undefined &#x3D;&#x3D;&#x3D; null)\n  &#x2F;&#x2F; &#x3D;&#x3D;&#x3D; 全等 判斷 值 和 資料類型都一樣才行\n  &#x2F;&#x2F; 以後判斷是否相等 請用 &#x3D;&#x3D;&#x3D;  \n  console.log(2 &#x3D;&#x3D;&#x3D; &#39;2&#39;)\n  console.log(NaN &#x3D;&#x3D;&#x3D; NaN) &#x2F;&#x2F; NaN 不等於任何人，包括他自己\n  console.log(2 !&#x3D;&#x3D; &#39;2&#39;)  &#x2F;&#x2F; true  \n  console.log(2 !&#x3D; &#39;2&#39;) &#x2F;&#x2F; false \n  console.log(&#39;-------------------------&#39;)\n  console.log(&#39;a&#39; &lt; &#39;b&#39;) &#x2F;&#x2F; true\n  console.log(&#39;aa&#39; &lt; &#39;ab&#39;) &#x2F;&#x2F; true\n  console.log(&#39;aa&#39; &lt; &#39;aac&#39;) &#x2F;&#x2F; true\n  console.log(&#39;-------------------------&#39;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"邏輯運算子\"><a href=\"#邏輯運算子\" class=\"headerlink\" title=\"邏輯運算子\"></a>邏輯運算子</h3><p>使用場景：可以把多個布林值放到一起運算，最終返回一個布林值</p>\n<table>\n<thead>\n<tr>\n<th>符號</th>\n<th>名稱</th>\n<th>日常讀法</th>\n<th>特點</th>\n<th>口訣</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;&amp;</td>\n<td>邏輯與</td>\n<td>並且</td>\n<td>符號兩邊有一個假的結果為假</td>\n<td>一假則假</td>\n</tr>\n<tr>\n<td>||</td>\n<td>邏輯或</td>\n<td>或者</td>\n<td>符號兩邊有一個真的結果為真</td>\n<td>一真則真</td>\n</tr>\n<tr>\n<td>!</td>\n<td>邏輯非</td>\n<td>取反</td>\n<td>true變false  false變true</td>\n<td>真變假，假變真</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>A &amp;&amp; B</th>\n<th>A || B</th>\n<th>!A</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>false</td>\n<td>true</td>\n<td>false</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n<td>true</td>\n<td>false</td>\n</tr>\n<tr>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n    &#x2F;&#x2F; 邏輯與 一假則假\n    console.log(true &amp;&amp; true)\n    console.log(false &amp;&amp; true)\n    console.log(3 &lt; 5 &amp;&amp; 3 &gt; 2)\n    console.log(3 &lt; 5 &amp;&amp; 3 &lt; 2)\n    console.log(&#39;-----------------&#39;)\n    &#x2F;&#x2F; 邏輯或 一真則真\n    console.log(true || true)\n    console.log(false || true)\n    console.log(false || false)\n    console.log(&#39;-----------------&#39;)\n    &#x2F;&#x2F; 邏輯非  取反\n    console.log(!true)\n    console.log(!false)\n\n    console.log(&#39;-----------------&#39;)\n\n    let num &#x3D; 6\n    console.log(num &gt; 5 &amp;&amp; num &lt; 10)\n    console.log(&#39;-----------------&#39;)\n  &lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"運算子優先順序\"><a href=\"#運算子優先順序\" class=\"headerlink\" title=\"運算子優先順序\"></a>運算子優先順序</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>邏輯運算子優先順序： ！&gt; &amp;&amp; &gt;  ||  </p></blockquote>\n<h2 id=\"語句\"><a href=\"#語句\" class=\"headerlink\" title=\"語句\"></a>語句</h2><h3 id=\"運算式和語句\"><a href=\"#運算式和語句\" class=\"headerlink\" title=\"運算式和語句\"></a>運算式和語句</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>運算式:可以被求值的代碼計算出一個結果。</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">3+4\nnum++</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>語句一段可以執行的代碼，是一種行為，例如分支語句和循環語句。</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">for(let i &#x3D; 0; i &lt; 10; i++)&#123;\n  console.log(&#39;我愛程式&#39;)\n&#125;</code></pre>\n\n\n<h3 id=\"分支語句\"><a href=\"#分支語句\" class=\"headerlink\" title=\"分支語句\"></a>分支語句</h3><p>分支語句可以根據條件判定真假，來選擇性的執行想要的代碼</p>\n<p>分支語句包含：</p>\n<ol>\n<li>if分支語句（重點）</li>\n<li>三元運算子</li>\n<li>switch語句</li>\n</ol>\n<h4 id=\"if-分支語句\"><a href=\"#if-分支語句\" class=\"headerlink\" title=\"if 分支語句\"></a>if 分支語句</h4><p>語法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if(條件運算式) &#123;\n  &#x2F;&#x2F; 滿足條件要執行的語句\n&#125;</code></pre>\n\n<p>小括弧內的條件結果是布林值，為 true 時，進入大括弧裡執行代碼；為false，則不執行大括弧裡面代碼</p>\n<p>小括弧內的結果若不是布林類型時，會發生類型轉換為布林值，類似Boolean()</p>\n<p>如果大括弧只有一個語句，大括弧可以省略，但是，俺們不提倡這麼做~</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n    &#x2F;&#x2F; 單分支語句\n    &#x2F;&#x2F; if (false) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; if (3 &gt; 5) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; if (2 &#x3D;&#x3D;&#x3D; &#39;2&#39;) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F;  1. 除了0 所有的數字都為真\n    &#x2F;&#x2F;   if (0) &#123;\n    &#x2F;&#x2F;     console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F; 2.除了 &#39;&#39; 所有的字串都為真 true\n    &#x2F;&#x2F; if (&#39;老徐&#39;) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; if (&#39;&#39;) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; &#x2F;&#x2F; if (&#39;&#39;) console.log(&#39;執行語句&#39;)\n\n    &#x2F;&#x2F; 1. 用戶輸入\n    let score &#x3D; +prompt(&#39;請輸入准考證號碼&#39;)\n    &#x2F;&#x2F; 2. 進行判斷輸出\n    if (score &gt;&#x3D; 700) &#123;\n      alert(&#39;恭喜上榜&#39;)\n    &#125;\n    console.log(&#39;-----------------&#39;)\n\n  &lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"if雙分支語句\"><a href=\"#if雙分支語句\" class=\"headerlink\" title=\"if雙分支語句\"></a>if雙分支語句</h4><p>如果有兩個條件的時候，可以使用 if else 雙分支語句</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if (條件運算式)&#123;\n  &#x2F;&#x2F; 滿足條件要執行的語句\n&#125; else &#123;\n  &#x2F;&#x2F; 不滿足條件要執行的語句\n&#125;</code></pre>\n\n<p>例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n   &#x2F;&#x2F; 1. 用戶輸入\n   let uname &#x3D; prompt(&#39;請輸入用戶名:&#39;)\n   let pwd &#x3D; prompt(&#39;請輸入密碼:&#39;)\n   &#x2F;&#x2F; 2. 判斷輸出\n   if (uname &#x3D;&#x3D;&#x3D; &#39;pink&#39; &amp;&amp; pwd &#x3D;&#x3D;&#x3D; &#39;123456&#39;) &#123;\n     alert(&#39;恭喜登錄成功&#39;)\n   &#125; else &#123;\n     alert(&#39;用戶名或者密碼錯誤&#39;)\n   &#125;\n &lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"if-多分支語句\"><a href=\"#if-多分支語句\" class=\"headerlink\" title=\"if 多分支語句\"></a>if 多分支語句</h4><p>使用場景： 適合於有多個條件的時候</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n   &#x2F;&#x2F; 1. 用戶輸入\n   let score &#x3D; +prompt(&#39;請輸入成績：&#39;)\n   &#x2F;&#x2F; 2. 判斷輸出\n   if (score &gt;&#x3D; 90) &#123;\n     alert(&#39;成績優秀，boy，你是我的驕傲&#39;)\n   &#125; else if (score &gt;&#x3D; 70) &#123;\n     alert(&#39;成績良好，boy，你要加油哦~~&#39;)\n   &#125; else if (score &gt;&#x3D; 60) &#123;\n     alert(&#39;成績及格，boy，你很危險~&#39;)\n   &#125; else &#123;\n     alert(&#39;成績不及格，boy，我不想和你說話~&#39;)\n   &#125;\n &lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"三元運算子（三元運算式）\"><a href=\"#三元運算子（三元運算式）\" class=\"headerlink\" title=\"三元運算子（三元運算式）\"></a>三元運算子（三元運算式）</h4><p><strong>使用場景</strong>： 一些簡單的雙分支，可以使用  三元運算子（三元運算式），寫起來比 if  else雙分支 更簡單</p>\n<p><strong>符號</strong>：? 與 : 配合使用</p>\n<p>語法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">條件 ? 運算式1 ： 運算式2</code></pre>\n\n<p>例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 三元運算子（三元運算式）\n&#x2F;&#x2F; 1. 語法格式\n&#x2F;&#x2F; 條件 ? 運算式1 : 運算式2 \n\n&#x2F;&#x2F; 2. 執行過程 \n&#x2F;&#x2F; 2.1 如果條件為真，則執行運算式1\n&#x2F;&#x2F; 2.2 如果條件為假，則執行運算式2\n\n&#x2F;&#x2F; 3. 驗證\n&#x2F;&#x2F; 5 &gt; 3 ? &#39;真的&#39; : &#39;假的&#39;\nconsole.log(5 &lt; 3 ? &#39;真的&#39; : &#39;假的&#39;)\n\n&#x2F;&#x2F; let age &#x3D; 18 \n&#x2F;&#x2F; age &#x3D; age + 1\n&#x2F;&#x2F;  age++\n\n&#x2F;&#x2F; 1. 用戶輸入 \nlet num &#x3D; prompt(&#39;請您輸入一個數字:&#39;)\n&#x2F;&#x2F; 2. 判斷輸出- 小於10才補0\n&#x2F;&#x2F; num &#x3D; num &lt; 10 ? 0 + num : num\nnum &#x3D; num &gt;&#x3D; 10 ? num : 0 + num\nalert(num)</code></pre>\n\n<h4 id=\"switch語句（瞭解）\"><a href=\"#switch語句（瞭解）\" class=\"headerlink\" title=\"switch語句（瞭解）\"></a>switch語句（瞭解）</h4><p>使用場景： 適合於有多個條件的時候，也屬於分支語句，大部分情況下和 if多分支語句 功能相同</p>\n<p>注意：</p>\n<ol>\n<li>switch case語句一般用於等值判斷, if適合於區間判斷</li>\n<li>switchcase一般需要配合break關鍵字使用 沒有break會造成case穿透</li>\n<li>if 多分支語句開發要比switch更重要，使用也更多</li>\n</ol>\n<p>例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; switch分支語句\n&#x2F;&#x2F; 1. 語法\n&#x2F;&#x2F; switch (運算式) &#123;\n&#x2F;&#x2F;   case 值1:\n&#x2F;&#x2F;     代碼1\n&#x2F;&#x2F;     break\n\n&#x2F;&#x2F;   case 值2:\n&#x2F;&#x2F;     代碼2\n&#x2F;&#x2F;     break\n&#x2F;&#x2F;   ...\n&#x2F;&#x2F;   default:\n&#x2F;&#x2F;     代碼n\n&#x2F;&#x2F; &#125;\n\n&lt;script&gt;\n  switch (2) &#123;\n    case 1:\n    console.log(&#39;您選擇的是1&#39;)\n    break  &#x2F;&#x2F; 退出switch\n    case 2:\n    console.log(&#39;您選擇的是2&#39;)\n    break  &#x2F;&#x2F; 退出switch\n    case 3:\n    console.log(&#39;您選擇的是3&#39;)\n    break  &#x2F;&#x2F; 退出switch\n    default:\n    console.log(&#39;沒有符合條件的&#39;)\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"中斷點調試\"><a href=\"#中斷點調試\" class=\"headerlink\" title=\"中斷點調試\"></a>中斷點調試</h4><p><strong>作用：</strong>學習時可以幫助更好的理解代碼運行，工作時可以更快找到bug</p>\n<p>流覽器打開調試介面</p>\n<ol>\n<li>按F12打開開發者工具</li>\n<li>點到原始程式碼一欄 （ sources ）</li>\n<li>選擇代碼檔</li>\n</ol>\n<p><strong>中斷點：</strong>在某句代碼上加的標記就叫中斷點，當程式執行到這句有標記的代碼時會暫停下來</p>\n<h3 id=\"迴圈語句\"><a href=\"#迴圈語句\" class=\"headerlink\" title=\"迴圈語句\"></a>迴圈語句</h3><p>使用場景：重複執行 指定的一段代碼，比如我們想要輸出10次 ‘我學的很棒’</p>\n<p>學習路徑：</p>\n<p>1.while迴圈</p>\n<p>2.for 迴圈（重點）</p>\n<h4 id=\"while迴圈\"><a href=\"#while迴圈\" class=\"headerlink\" title=\"while迴圈\"></a>while迴圈</h4><p>while :  在…. 期間， 所以 while迴圈 就是在滿足條件期間，重複執行某些代碼。</p>\n<p><strong>語法：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">while (條件運算式) &#123;\n   &#x2F;&#x2F; 循環體    \n&#125;</code></pre>\n\n<p>例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; while迴圈: 重複執行代碼\n\n&#x2F;&#x2F; 1. 需求: 利用迴圈重複列印3次 &#39;月薪過萬不是夢，畢業時候見英雄&#39;\nlet i &#x3D; 1\nwhile (i &lt;&#x3D; 3) &#123;\n  document.write(&#39;年薪過百不是夢，畢業時候見英雄~&lt;br&gt;&#39;)\n  i++   &#x2F;&#x2F; 這裡千萬不要忘了變數自增否則造成閉環\n&#125;</code></pre>\n\n<p>迴圈三要素：</p>\n<p>1.初始值 （經常用變數）</p>\n<p>2.終止條件</p>\n<p>3.變數的變化量</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n  &#x2F;&#x2F; &#x2F;&#x2F; 1. 變數的起始值\n  &#x2F;&#x2F; let i &#x3D; 1\n  &#x2F;&#x2F; &#x2F;&#x2F; 2. 終止條件\n  &#x2F;&#x2F; while (i &lt;&#x3D; 3) &#123;\n  &#x2F;&#x2F;   document.write(&#39;我要迴圈三次 &lt;br&gt;&#39;)\n  &#x2F;&#x2F;   &#x2F;&#x2F; 3. 變數的變化量\n  &#x2F;&#x2F;   i++\n  &#x2F;&#x2F; &#125;\n  &#x2F;&#x2F; 1. 變數的起始值\n  let end &#x3D; +prompt(&#39;請輸入次數:&#39;)\nlet i &#x3D; 1\n&#x2F;&#x2F; 2. 終止條件\nwhile (i &lt;&#x3D; end) &#123;\n  document.write(&#39;我要迴圈三次 &lt;br&gt;&#39;)\n  &#x2F;&#x2F; 3. 變數的變化量\n  i++\n&#125;\n\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"中止迴圈\"><a href=\"#中止迴圈\" class=\"headerlink\" title=\"中止迴圈\"></a>中止迴圈</h4><p><code>break</code>   中止整個迴圈，一般用於結果已經得到, 後續的迴圈不需要的時候可以使用（提高效率）  </p>\n<p><code>continue</code>  中止本次迴圈，一般用於排除或者跳過某一個選項的時候</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; while (i &lt;&#x3D; 5) &#123;\n    &#x2F;&#x2F;   console.log(i)\n    &#x2F;&#x2F;   if (i &#x3D;&#x3D;&#x3D; 3) &#123;\n    &#x2F;&#x2F;     break  &#x2F;&#x2F; 退出迴圈\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F;   i++\n\n    &#x2F;&#x2F; &#125;\n\n    let i &#x3D; 1\n    while (i &lt;&#x3D; 5) &#123;\n      if (i &#x3D;&#x3D;&#x3D; 3) &#123;\n        i++\n        continue\n      &#125;\n      console.log(i)\n      i++\n\n    &#125;\n  &lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"無限迴圈\"><a href=\"#無限迴圈\" class=\"headerlink\" title=\"無限迴圈\"></a>無限迴圈</h4><p>1.while(true) 來構造“無限”迴圈，需要使用break退出迴圈。（常用）</p>\n<p>2.for(;;) 也可以來構造“無限”迴圈，同樣需要使用break退出迴圈。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 無限迴圈  \n&#x2F;&#x2F; 需求： 頁面會一直彈窗詢問你愛我嗎？\n&#x2F;&#x2F; (1). 如果用戶輸入的是 &#39;愛&#39;，則退出彈窗\n&#x2F;&#x2F; (2). 否則一直彈窗詢問\n\n&#x2F;&#x2F; 1. while(true) 無限迴圈\n&#x2F;&#x2F; while (true) &#123;\n&#x2F;&#x2F;   let love &#x3D; prompt(&#39;你愛我嗎?&#39;)\n&#x2F;&#x2F;   if (love &#x3D;&#x3D;&#x3D; &#39;愛&#39;) &#123;\n&#x2F;&#x2F;     break\n&#x2F;&#x2F;   &#125;\n&#x2F;&#x2F; &#125;\n\n&#x2F;&#x2F; 2. for(;;) 無限迴圈\nfor (; ;) &#123;\n  let love &#x3D; prompt(&#39;你愛我嗎?&#39;)\n  if (love &#x3D;&#x3D;&#x3D; &#39;愛&#39;) &#123;\n    break\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"綜合案例-ATM存取款機\"><a href=\"#綜合案例-ATM存取款機\" class=\"headerlink\" title=\"綜合案例-ATM存取款機\"></a>綜合案例-ATM存取款機</h2><p>分析：</p>\n<p>①：提示輸入框寫到迴圈裡面（無限迴圈）</p>\n<p>②：用戶輸入4則退出迴圈 break</p>\n<p>③：提前準備一個金額預先存儲一個數額 money</p>\n<p>④：根據輸入不同的值，做不同的操作</p>\n<pre><code> (1)  取錢則是減法操作， 存錢則是加法操作，查看餘額則是直接顯示金額\n\n (2) 可以使用 if else if 多分支 來執行不同的操作\n</code></pre>\n<p>完整代碼：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n  &#x2F;&#x2F; 1. 開始迴圈 輸入框寫到 迴圈裡面\n  &#x2F;&#x2F; 3. 準備一個總的金額\n  let money &#x3D; 100\nwhile (true) &#123;\n  let re &#x3D; +prompt(&#96;\n請您選擇操作：\n1.存錢\n2.取錢\n3.查看餘額\n4.退出\n&#96;)\n  &#x2F;&#x2F; 2. 如果用戶輸入的 4 則退出迴圈， break  寫到if 裡面，沒有寫到switch裡面， 因為4需要break退出迴圈\n  if (re &#x3D;&#x3D;&#x3D; 4) &#123;\n    break\n  &#125;\n  &#x2F;&#x2F; 4. 根據輸入做操作\n  switch (re) &#123;\n    case 1:\n      &#x2F;&#x2F; 存錢\n      let cun &#x3D; +prompt(&#39;請輸入存款金額&#39;)\n      money &#x3D; money + cun\n      break\n      case 2:\n      &#x2F;&#x2F; 存錢\n      let qu &#x3D; +prompt(&#39;請輸入取款金額&#39;)\n      money &#x3D; money - qu\n      break\n      case 3:\n      &#x2F;&#x2F; 存錢\n      alert(&#96;您的銀行卡餘額是$&#123;money&#125;&#96;)\n      break\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n\n\n\n\n\n\n\n\n","feature":null,"text":" 理解什麼是流程控制，知道條件控制的種類並掌握其對應的語法規則，具備利用迴圈編寫簡易ATM取款機程式能力 運算子 語句 綜合案例 運算子算術運算子數字是用來計算的，比如：乘法 * 、除法 &#x2F; 、加法 + 、減法 - 等等，所以經常和算術運算子一起。 算術運算子：也叫數學...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"10 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%8B%E7%AE%97%E5%AD%90\"><span class=\"toc-text\">運算子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E8%A1%93%E9%81%8B%E7%AE%97%E5%AD%90\"><span class=\"toc-text\">算術運算子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A8%AD%E5%AE%9A%E9%81%8B%E7%AE%97%E5%AD%90\"><span class=\"toc-text\">設定運算子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%A2%9E-x2F-%E8%87%AA%E6%B8%9B%E9%81%8B%E7%AE%97%E5%AD%90\"><span class=\"toc-text\">自增&#x2F;自減運算子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BC%83%E9%81%8B%E7%AE%97%E5%AD%90\"><span class=\"toc-text\">比較運算子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97%E5%AD%90\"><span class=\"toc-text\">邏輯運算子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%8B%E7%AE%97%E5%AD%90%E5%84%AA%E5%85%88%E9%A0%86%E5%BA%8F\"><span class=\"toc-text\">運算子優先順序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AA%9E%E5%8F%A5\"><span class=\"toc-text\">語句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%8B%E7%AE%97%E5%BC%8F%E5%92%8C%E8%AA%9E%E5%8F%A5\"><span class=\"toc-text\">運算式和語句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%94%AF%E8%AA%9E%E5%8F%A5\"><span class=\"toc-text\">分支語句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if-%E5%88%86%E6%94%AF%E8%AA%9E%E5%8F%A5\"><span class=\"toc-text\">if 分支語句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if%E9%9B%99%E5%88%86%E6%94%AF%E8%AA%9E%E5%8F%A5\"><span class=\"toc-text\">if雙分支語句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if-%E5%A4%9A%E5%88%86%E6%94%AF%E8%AA%9E%E5%8F%A5\"><span class=\"toc-text\">if 多分支語句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%85%83%E9%81%8B%E7%AE%97%E5%AD%90%EF%BC%88%E4%B8%89%E5%85%83%E9%81%8B%E7%AE%97%E5%BC%8F%EF%BC%89\"><span class=\"toc-text\">三元運算子（三元運算式）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#switch%E8%AA%9E%E5%8F%A5%EF%BC%88%E7%9E%AD%E8%A7%A3%EF%BC%89\"><span class=\"toc-text\">switch語句（瞭解）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%B7%E9%BB%9E%E8%AA%BF%E8%A9%A6\"><span class=\"toc-text\">中斷點調試</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%B4%E5%9C%88%E8%AA%9E%E5%8F%A5\"><span class=\"toc-text\">迴圈語句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#while%E8%BF%B4%E5%9C%88\"><span class=\"toc-text\">while迴圈</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%AD%A2%E8%BF%B4%E5%9C%88\"><span class=\"toc-text\">中止迴圈</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%84%A1%E9%99%90%E8%BF%B4%E5%9C%88\"><span class=\"toc-text\">無限迴圈</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B6%9C%E5%90%88%E6%A1%88%E4%BE%8B-ATM%E5%AD%98%E5%8F%96%E6%AC%BE%E6%A9%9F\"><span class=\"toc-text\">綜合案例-ATM存取款機</span></a></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript 基礎 - 第3天","uid":"d6326a002590bf2cbb1500ce76554880","slug":"2303-1 JS 基礎3-1 陣列","date":"2023-03-19T16:00:00.000Z","updated":"2023-04-13T09:36:02.401Z","comments":true,"path":"api/articles/2303-1 JS 基礎3-1 陣列.json","keywords":null,"cover":null,"text":"陣列 知道什麼是陣列及其應用的場景，掌握陣列聲明及訪問的語法。 陣列是什麼？陣列：(Array)是一種可以按順序保存資料的資料類型 使用場景：如果有多個資料可以用陣列保存起來，然後放到一個變數中，管理非常方便 陣列的基本使用定義陣列和陣列單元&lt;script&gt; &#x2...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"JavaScript 基礎- 第1天","uid":"1517f5e85f0012c69f183e7960bb5313","slug":"2303-1 JS 基礎1 宣告","date":"2023-03-17T16:00:00.000Z","updated":"2023-04-13T10:47:55.267Z","comments":true,"path":"api/articles/2303-1 JS 基礎1 宣告.json","keywords":null,"cover":null,"text":" 瞭解變數、資料類型、運算子等基礎概念，能夠實現資料類型的轉換，結合四則運算體會如何程式設計。 體會現實世界中的事物與電腦的關係 理解什麼是資料並知道資料的分類 理解變數存儲資料的“容器” 掌握常見運算子的使用，瞭解優先順序關係 知道 JavaScript 資料類型隱式轉換的特徵...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}