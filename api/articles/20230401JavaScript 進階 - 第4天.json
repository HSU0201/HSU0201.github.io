{"title":"JavaScript 進階 - 第4天","uid":"956114e1932534f6adc2e3848138c40e","slug":"20230401JavaScript 進階 - 第4天","date":"2023-04-01T01:22:08.000Z","updated":"2023-03-25T02:06:49.968Z","comments":true,"path":"api/articles/20230401JavaScript 進階 - 第4天.json","keywords":null,"cover":null,"content":"<h1 id=\"JavaScript-進階-第4天\"><a href=\"#JavaScript-進階-第4天\" class=\"headerlink\" title=\"JavaScript 進階 - 第4天\"></a>JavaScript 進階 - 第4天</h1><h2 id=\"深淺拷貝\"><a href=\"#深淺拷貝\" class=\"headerlink\" title=\"深淺拷貝\"></a>深淺拷貝</h2><h3 id=\"淺拷貝\"><a href=\"#淺拷貝\" class=\"headerlink\" title=\"淺拷貝\"></a>淺拷貝</h3><p>首先淺拷貝和深拷貝只針對參考類型</p>\n<p>淺拷貝：拷貝的是位址</p>\n<p>常見方法：</p>\n<ol>\n<li>拷貝物件：Object.assgin() &#x2F; 展開運運算元 {…obj} 拷貝物件</li>\n<li>拷貝陣列：Array.prototype.concat() 或者 […arr]</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果是單一資料型別拷貝值，引用資料類型拷貝的是位址 (簡單理解： 如果是單層物件，沒問題，如果有多層就有問題)</p></blockquote>\n<h3 id=\"深拷貝\"><a href=\"#深拷貝\" class=\"headerlink\" title=\"深拷貝\"></a>深拷貝</h3><p>首先淺拷貝和深拷貝只針對參考類型</p>\n<p>深拷貝：拷貝的是物件，不是位址</p>\n<p>常見方法：</p>\n<ol>\n<li>通過遞迴實現深拷貝</li>\n<li>lodash&#x2F;cloneDeep</li>\n<li>通過JSON.stringify()實現</li>\n</ol>\n<h4 id=\"遞迴實現深拷貝\"><a href=\"#遞迴實現深拷貝\" class=\"headerlink\" title=\"遞迴實現深拷貝\"></a>遞迴實現深拷貝</h4><p>函數遞迴：</p>\n<p>如果一個函數在內部可以調用其本身，那麼這個函數就是遞迴函數</p>\n<ul>\n<li>簡單理解:函數內部自己調用自己, 這個函數就是遞迴函數</li>\n<li>遞迴函數的作用和迴圈效果類似</li>\n<li>由於遞迴很容易發生“棧溢出”錯誤（stack overflow），所以必須要加退出條件 return</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    const obj &#x3D; &#123;\n      uname: &#39;pink&#39;,\n      age: 18,\n      hobby: [&#39;乒乓球&#39;, &#39;足球&#39;],\n      family: &#123;\n        baby: &#39;小pink&#39;\n      &#125;\n    &#125;\n    const o &#x3D; &#123;&#125;\n    &#x2F;&#x2F; 拷貝函數\n    function deepCopy(newObj, oldObj) &#123;\n      debugger\n      for (let k in oldObj) &#123;\n        &#x2F;&#x2F; 處理陣列的問題  一定先寫陣列 在寫 物件 不能顛倒\n        if (oldObj[k] instanceof Array) &#123;\n          newObj[k] &#x3D; []\n          &#x2F;&#x2F;  newObj[k] 接收 []  hobby\n          &#x2F;&#x2F;  oldObj[k]   [&#39;乒乓球&#39;, &#39;足球&#39;]\n          deepCopy(newObj[k], oldObj[k])\n        &#125; else if (oldObj[k] instanceof Object) &#123;\n          newObj[k] &#x3D; &#123;&#125;\n          deepCopy(newObj[k], oldObj[k])\n        &#125;\n        else &#123;\n          &#x2F;&#x2F;  k  屬性名 uname age    oldObj[k]  屬性值  18\n          &#x2F;&#x2F; newObj[k]  &#x3D;&#x3D;&#x3D; o.uname  給新物件添加屬性\n          newObj[k] &#x3D; oldObj[k]\n        &#125;\n      &#125;\n    &#125;\n    deepCopy(o, obj) &#x2F;&#x2F; 函式呼叫  兩個參數 o 新物件  obj 舊物件\n    console.log(o)\n    o.age &#x3D; 20\n    o.hobby[0] &#x3D; &#39;籃球&#39;\n    o.family.baby &#x3D; &#39;老pink&#39;\n    console.log(obj)\n    console.log([1, 23] instanceof Object)\n    &#x2F;&#x2F; 複習\n    &#x2F;&#x2F; const obj &#x3D; &#123;\n    &#x2F;&#x2F;   uname: &#39;pink&#39;,\n    &#x2F;&#x2F;   age: 18,\n    &#x2F;&#x2F;   hobby: [&#39;乒乓球&#39;, &#39;足球&#39;]\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; function deepCopy(&#123; &#125;, oldObj) &#123;\n    &#x2F;&#x2F;   &#x2F;&#x2F; k 屬性名  oldObj[k] 屬性值\n    &#x2F;&#x2F;   for (let k in oldObj) &#123;\n    &#x2F;&#x2F;     &#x2F;&#x2F; 處理陣列的問題   k 變數\n    &#x2F;&#x2F;     newObj[k] &#x3D; oldObj[k]\n    &#x2F;&#x2F;     &#x2F;&#x2F; o.uname &#x3D; &#39;pink&#39;\n    &#x2F;&#x2F;     &#x2F;&#x2F; newObj.k  &#x3D; &#39;pink&#39;\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F; &#125;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h4 id=\"js庫lodash裡面cloneDeep內部實現了深拷貝\"><a href=\"#js庫lodash裡面cloneDeep內部實現了深拷貝\" class=\"headerlink\" title=\"js庫lodash裡面cloneDeep內部實現了深拷貝\"></a>js庫lodash裡面cloneDeep內部實現了深拷貝</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;!-- 先引用 --&gt;\n  &lt;script src&#x3D;&quot;.&#x2F;lodash.min.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;script&gt;\n    const obj &#x3D; &#123;\n      uname: &#39;pink&#39;,\n      age: 18,\n      hobby: [&#39;乒乓球&#39;, &#39;足球&#39;],\n      family: &#123;\n        baby: &#39;小pink&#39;\n      &#125;\n    &#125;\n    const o &#x3D; _.cloneDeep(obj)\n    console.log(o)\n    o.family.baby &#x3D; &#39;老pink&#39;\n    console.log(obj)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h4 id=\"JSON序列化\"><a href=\"#JSON序列化\" class=\"headerlink\" title=\"JSON序列化\"></a>JSON序列化</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    const obj &#x3D; &#123;\n      uname: &#39;pink&#39;,\n      age: 18,\n      hobby: [&#39;乒乓球&#39;, &#39;足球&#39;],\n      family: &#123;\n        baby: &#39;小pink&#39;\n      &#125;\n    &#125;\n    &#x2F;&#x2F; 把物件轉換為 JSON 字串\n    &#x2F;&#x2F; console.log(JSON.stringify(obj))\n    const o &#x3D; JSON.parse(JSON.stringify(obj))\n    console.log(o)\n    o.family.baby &#x3D; &#39;123&#39;\n    console.log(obj)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h2 id=\"異常處理\"><a href=\"#異常處理\" class=\"headerlink\" title=\"異常處理\"></a>異常處理</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>瞭解 JavaScript 中程式異常處理的方法，提升代碼運行的健壯性。</p></blockquote>\n<h3 id=\"throw\"><a href=\"#throw\" class=\"headerlink\" title=\"throw\"></a>throw</h3><p>異常處理是指預估代碼執行過程中可能發生的錯誤，然後最大程度的避免錯誤的發生導致整個程式無法繼續運行</p>\n<p>總結：</p>\n<ol>\n<li>throw 拋出異常資訊，程式也會終止執行</li>\n<li>throw 後面跟的是錯誤提示資訊</li>\n<li>Error 物件配合 throw 使用，能夠設置更詳細的錯誤資訊</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  function counter(x, y) &#123;\n\n    if(!x || !y) &#123;\n      &#x2F;&#x2F; throw &#39;參數不能為空!&#39;;\n      throw new Error(&#39;參數不能為空!&#39;)\n    &#125;\n\n    return x + y\n  &#125;\n\n  counter()\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>總結：</p>\n<ol>\n<li><code>throw</code> 拋出異常資訊，程式也會終止執行</li>\n<li><code>throw</code> 後面跟的是錯誤提示資訊</li>\n<li><code>Error</code> 物件配合 <code>throw</code> 使用，能夠設置更詳細的錯誤資訊</li>\n</ol>\n<h3 id=\"try-…-catch\"><a href=\"#try-…-catch\" class=\"headerlink\" title=\"try … catch\"></a>try … catch</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n   function foo() &#123;\n      try &#123;\n        &#x2F;&#x2F; 查找 DOM 節點\n        const p &#x3D; document.querySelector(&#39;.p&#39;)\n        p.style.color &#x3D; &#39;red&#39;\n      &#125; catch (error) &#123;\n        &#x2F;&#x2F; try 程式碼片段中執行有錯誤時，會執行 catch 程式碼片段\n        &#x2F;&#x2F; 查看錯誤資訊\n        console.log(error.message)\n        &#x2F;&#x2F; 終止代碼繼續執行\n        return\n\n      &#125;\n      finally &#123;\n          alert(&#39;執行&#39;)\n      &#125;\n      console.log(&#39;如果出現錯誤，我的語句不會執行&#39;)\n    &#125;\n    foo()\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>總結：</p>\n<ol>\n<li><code>try...catch</code> 用於捕獲錯誤資訊</li>\n<li>將預估可能發生錯誤的代碼寫在 <code>try</code> 程式碼片段中</li>\n<li>如果 <code>try</code> 程式碼片段中出現錯誤後，會執行 <code>catch</code> 程式碼片段，並截獲到錯誤資訊</li>\n</ol>\n<h3 id=\"debugger\"><a href=\"#debugger\" class=\"headerlink\" title=\"debugger\"></a>debugger</h3><p>相當於中斷點調試</p>\n<h2 id=\"處理this\"><a href=\"#處理this\" class=\"headerlink\" title=\"處理this\"></a>處理this</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>瞭解函數中 this 在不同場景下的預設值，知道動態指定函數 this 值的方法。</p></blockquote>\n<p><code>this</code> 是 JavaScript 最具“魅惑”的知識點，不同的應用場合 <code>this</code> 的取值可能會有意想不到的結果，在此我們對以往學習過的關於【 <code>this</code> 預設的取值】情況進行歸納和總結。</p>\n<h3 id=\"普通函數\"><a href=\"#普通函數\" class=\"headerlink\" title=\"普通函數\"></a>普通函數</h3><p><strong>普通函數</strong>的調用方式決定了 <code>this</code> 的值，即【誰調用 <code>this</code> 的值指向誰】，如下代碼所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 普通函數\n  function sayHi() &#123;\n    console.log(this)  \n  &#125;\n  &#x2F;&#x2F; 函數運算式\n  const sayHello &#x3D; function () &#123;\n    console.log(this)\n  &#125;\n  &#x2F;&#x2F; 函數的調用方式決定了 this 的值\n  sayHi() &#x2F;&#x2F; window\n  window.sayHi()\n  \n\n&#x2F;&#x2F; 普通對象\n  const user &#x3D; &#123;\n    name: &#39;小明&#39;,\n    walk: function () &#123;\n      console.log(this)\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 動態為 user 添加方法\n  user.sayHi &#x3D; sayHi\n  uesr.sayHello &#x3D; sayHello\n  &#x2F;&#x2F; 函式呼叫方式，決定了 this 的值\n  user.sayHi()\n  user.sayHello()\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>注： 普通函數沒有明確調用者時 <code>this</code> 值為 <code>window</code>，嚴格模式下沒有調用者時 <code>this</code> 的值為 <code>undefined</code>。</p>\n<h3 id=\"箭頭函數\"><a href=\"#箭頭函數\" class=\"headerlink\" title=\"箭頭函數\"></a>箭頭函數</h3><p><strong>箭頭函數</strong>中的 <code>this</code> 與普通函數完全不同，也不受調用方式的影響，事實上箭頭函數中並不存在 <code>this</code> ！箭頭函數中訪問的 <code>this</code> 不過是箭頭函數所在作用域的 <code>this</code> 變數。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n    \n  console.log(this) &#x2F;&#x2F; 此處為 window\n  &#x2F;&#x2F; 箭頭函數\n  const sayHi &#x3D; function() &#123;\n    console.log(this) &#x2F;&#x2F; 該箭頭函數中的 this 為函式宣告環境中 this 一致\n  &#125;\n  &#x2F;&#x2F; 普通對象\n  const user &#x3D; &#123;\n    name: &#39;小明&#39;,\n    &#x2F;&#x2F; 該箭頭函數中的 this 為函式宣告環境中 this 一致\n    walk: () &#x3D;&gt; &#123;\n      console.log(this)\n    &#125;,\n    \n    sleep: function () &#123;\n      let str &#x3D; &#39;hello&#39;\n      console.log(this)\n      let fn &#x3D; () &#x3D;&gt; &#123;\n        console.log(str)\n        console.log(this) &#x2F;&#x2F; 該箭頭函數中的 this 與 sleep 中的 this 一致\n      &#125;\n      &#x2F;&#x2F; 調用箭頭函數\n      fn();\n    &#125;\n  &#125;\n\n  &#x2F;&#x2F; 動態添加方法\n  user.sayHi &#x3D; sayHi\n  \n  &#x2F;&#x2F; 函式呼叫\n  user.sayHi()\n  user.sleep()\n  user.walk()\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>在開發中【使用箭頭函數前需要考慮函數中 <code>this</code> 的值】，<strong>事件回呼函數</strong>使用箭頭函數時，<code>this</code> 為全域的 <code>window</code>，因此DOM事件回呼函數不推薦使用箭頭函數，如下代碼所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; DOM 節點\n  const btn &#x3D; document.querySelector(&#39;.btn&#39;)\n  &#x2F;&#x2F; 箭頭函數 此時 this 指向了 window\n  btn.addEventListener(&#39;click&#39;, () &#x3D;&gt; &#123;\n    console.log(this)\n  &#125;)\n  &#x2F;&#x2F; 普通函數 此時 this 指向了 DOM 對象\n  btn.addEventListener(&#39;click&#39;, function () &#123;\n    console.log(this)\n  &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>同樣由於箭頭函數 <code>this</code> 的原因，<strong>基於原型的物件導向也不推薦採用箭頭函數</strong>，如下代碼所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  function Person() &#123;\n  &#125;\n  &#x2F;&#x2F; 原型對像上添加了箭頭函數\n  Person.prototype.walk &#x3D; () &#x3D;&gt; &#123;\n    console.log(&#39;人都要走路...&#39;)\n    console.log(this); &#x2F;&#x2F; window\n  &#125;\n  const p1 &#x3D; new Person()\n  p1.walk()\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"改變this指向\"><a href=\"#改變this指向\" class=\"headerlink\" title=\"改變this指向\"></a>改變this指向</h3><p>以上歸納了普通函數和箭頭函數中關於 <code>this</code> 預設值的情形，不僅如此 JavaScript 中還允許指定函數中 <code>this</code> 的指向，有 3 個方法可以動態指定普通函數中 <code>this</code> 的指向：</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><p>使用 <code>call</code> 方法調用函數，同時指定函數中 <code>this</code> 的值，使用方法如下代碼所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 普通函數\n  function sayHi() &#123;\n    console.log(this);\n  &#125;\n\n  let user &#x3D; &#123;\n    name: &#39;小明&#39;,\n    age: 18\n  &#125;\n\n  let student &#x3D; &#123;\n    name: &#39;小紅&#39;,\n    age: 16\n  &#125;\n\n  &#x2F;&#x2F; 調用函數並指定 this 的值\n  sayHi.call(user); &#x2F;&#x2F; this 值為 user\n  sayHi.call(student); &#x2F;&#x2F; this 值為 student\n\n  &#x2F;&#x2F; 求和函數\n  function counter(x, y) &#123;\n    return x + y;\n  &#125;\n\n  &#x2F;&#x2F; 調用 counter 函數，並傳入參數\n  let result &#x3D; counter.call(null, 5, 10);\n  console.log(result);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>總結：</p>\n<ol>\n<li><code>call</code> 方法能夠在調用函數的同時指定 <code>this</code> 的值</li>\n<li>使用 <code>call</code> 方法調用函數時，第1個參數為 <code>this</code> 指定的值</li>\n<li><code>call</code> 方法的其餘參數會依次自動傳入函數做為函數的參數</li>\n</ol>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><p>使用 <code>call</code> 方法<strong>調用函數</strong>，同時指定函數中 <code>this</code> 的值，使用方法如下代碼所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 普通函數\n  function sayHi() &#123;\n    console.log(this)\n  &#125;\n\n  let user &#x3D; &#123;\n    name: &#39;小明&#39;,\n    age: 18\n  &#125;\n\n  let student &#x3D; &#123;\n    name: &#39;小紅&#39;,\n    age: 16\n  &#125;\n\n  &#x2F;&#x2F; 調用函數並指定 this 的值\n  sayHi.apply(user) &#x2F;&#x2F; this 值為 user\n  sayHi.apply(student) &#x2F;&#x2F; this 值為 student\n\n  &#x2F;&#x2F; 求和函數\n  function counter(x, y) &#123;\n    return x + y\n  &#125;\n  &#x2F;&#x2F; 調用 counter 函數，並傳入參數\n  let result &#x3D; counter.apply(null, [5, 10])\n  console.log(result)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>總結：</p>\n<ol>\n<li><code>apply</code> 方法能夠在調用函數的同時指定 <code>this</code> 的值</li>\n<li>使用 <code>apply</code> 方法調用函數時，第1個參數為 <code>this</code> 指定的值</li>\n<li><code>apply</code> 方法第2個參數為陣列，陣列的單元值依次自動傳入函數做為函數的參數</li>\n</ol>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><p><code>bind</code> 方法並<strong>不會調用函數</strong>，而是創建一個指定了 <code>this</code> 值的新函數，使用方法如下代碼所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 普通函數\n  function sayHi() &#123;\n    console.log(this)\n  &#125;\n  let user &#x3D; &#123;\n    name: &#39;小明&#39;,\n    age: 18\n  &#125;\n  &#x2F;&#x2F; 調用 bind 指定 this 的值\n  let sayHello &#x3D; sayHi.bind(user);\n  &#x2F;&#x2F; 調用使用 bind 創建的新函數\n  sayHello()\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>注：<code>bind</code> 方法創建新的函數，與原函數的唯一的變化是改變了 <code>this</code> 的值。</p>\n<h2 id=\"防抖節流\"><a href=\"#防抖節流\" class=\"headerlink\" title=\"防抖節流\"></a>防抖節流</h2><ol>\n<li>防抖（debounce）<br>所謂防抖，就是指觸發事件後在 n 秒內函數只能執行一次，如果在 n 秒內又觸發了事件，則會重新計算函數執行時間</li>\n<li>節流（throttle）<br>所謂節流，就是指連續觸發事件但是在 n 秒中只執行一次函數</li>\n</ol>\n","feature":true,"text":"JavaScript 進階 - 第4天深淺拷貝淺拷貝首先淺拷貝和深拷貝只針對參考類型 淺拷貝：拷貝的是位址 常見方法： 拷貝物件：Object.assgin() &#x2F; 展開運運算元 {…obj} 拷貝物件 拷貝陣列：Array.prototype.concat() 或者 ...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":15,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":15,"path":"api/tags/javaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript-%E9%80%B2%E9%9A%8E-%E7%AC%AC4%E5%A4%A9\"><span class=\"toc-text\">JavaScript 進階 - 第4天</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E6%B7%BA%E6%8B%B7%E8%B2%9D\"><span class=\"toc-text\">深淺拷貝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BA%E6%8B%B7%E8%B2%9D\"><span class=\"toc-text\">淺拷貝</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E6%8B%B7%E8%B2%9D\"><span class=\"toc-text\">深拷貝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%81%9E%E8%BF%B4%E5%AF%A6%E7%8F%BE%E6%B7%B1%E6%8B%B7%E8%B2%9D\"><span class=\"toc-text\">遞迴實現深拷貝</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#js%E5%BA%ABlodash%E8%A3%A1%E9%9D%A2cloneDeep%E5%85%A7%E9%83%A8%E5%AF%A6%E7%8F%BE%E4%BA%86%E6%B7%B1%E6%8B%B7%E8%B2%9D\"><span class=\"toc-text\">js庫lodash裡面cloneDeep內部實現了深拷貝</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#JSON%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">JSON序列化</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%95%B0%E5%B8%B8%E8%99%95%E7%90%86\"><span class=\"toc-text\">異常處理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#throw\"><span class=\"toc-text\">throw</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#try-%E2%80%A6-catch\"><span class=\"toc-text\">try … catch</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#debugger\"><span class=\"toc-text\">debugger</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%99%95%E7%90%86this\"><span class=\"toc-text\">處理this</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B8\"><span class=\"toc-text\">普通函數</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E9%A0%AD%E5%87%BD%E6%95%B8\"><span class=\"toc-text\">箭頭函數</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%94%B9%E8%AE%8Athis%E6%8C%87%E5%90%91\"><span class=\"toc-text\">改變this指向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#call\"><span class=\"toc-text\">call</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#apply\"><span class=\"toc-text\">apply</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#bind\"><span class=\"toc-text\">bind</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%B2%E6%8A%96%E7%AF%80%E6%B5%81\"><span class=\"toc-text\">防抖節流</span></a></li></ol></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"(./source/img/1.jpg)","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"JavaScript 進階 - 第3天","uid":"c43b2d50b25bb22e84622db700db53eb","slug":"20230331JavaScript 進階 - 第3天","date":"2023-03-31T01:22:08.000Z","updated":"2023-03-25T02:06:48.240Z","comments":true,"path":"api/articles/20230331JavaScript 進階 - 第3天.json","keywords":null,"cover":[],"text":"JavaScript 進階 - 第3天筆記 瞭解構造函數原型物件的語法特徵，掌握 JavaScript 中物件導向程式設計的實現方式，基於物件導向程式設計思想實現 DOM 操作的封裝。 瞭解物件導向程式設計的一般特徵 掌握基於構造函數原型物件的邏輯封裝 掌握基於原型物件實現的繼承...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":15,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":15,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"(./source/img/1.jpg)","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}