{"title":"JavaScript 基礎- 第1天","uid":"1517f5e85f0012c69f183e7960bb5313","slug":"2303-1 JS 基礎1 宣告","date":"2023-03-17T16:00:00.000Z","updated":"2023-04-13T10:47:55.267Z","comments":true,"path":"api/articles/2303-1 JS 基礎1 宣告.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>瞭解變數、資料類型、運算子等基礎概念，能夠實現資料類型的轉換，結合四則運算體會如何程式設計。</p></blockquote>\n<ul>\n<li>體會現實世界中的事物與電腦的關係</li>\n<li>理解什麼是資料並知道資料的分類</li>\n<li>理解變數存儲資料的“容器”</li>\n<li>掌握常見運算子的使用，瞭解優先順序關係</li>\n<li>知道 JavaScript 資料類型隱式轉換的特徵</li>\n</ul>\n<h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>掌握 JavaScript 的引入方式，初步認識 JavaScript 的作用</p></blockquote>\n<h3 id=\"引入方式\"><a href=\"#引入方式\" class=\"headerlink\" title=\"引入方式\"></a>引入方式</h3><p>JavaScript 程式不能獨立運行，它需要被嵌入 HTML 中，然後流覽器才能執行 JavaScript 代碼。通過 <code>script</code> 標籤將 JavaScript 代碼引入到 HTML 中，有兩種方式：</p>\n<h4 id=\"內部方式\"><a href=\"#內部方式\" class=\"headerlink\" title=\"內部方式\"></a>內部方式</h4><p>通過 <code>script</code> 標籤包裹 JavaScript 代碼</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 內聯形式：通過 script 標籤包裹 JavaScript 代碼 --&gt;\n  &lt;script&gt;\n    alert(&#39;嗨，前端技術！&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h4 id=\"外部形式\"><a href=\"#外部形式\" class=\"headerlink\" title=\"外部形式\"></a>外部形式</h4><p>一般將 JavaScript 代碼寫在獨立的以 .js 結尾的檔中，然後通過 <code>script</code> 標籤的 <code>src</code> 屬性引入</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; demo.js\ndocument.write(&#39;嗨，前端技術！&#39;)</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 外部形式：通過 script 的 src 屬性引入獨立的 .js 文件 --&gt;\n  &lt;script src&#x3D;&quot;demo.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>如果 script 標籤使用 src 屬性引入了某 .js 檔，那麼 標籤的代碼會被忽略！！！如下代碼所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 外部形式：通過 script 的 src 屬性引入獨立的 .js 文件 --&gt;\n  &lt;script src&#x3D;&quot;demo.js&quot;&gt;\n    &#x2F;&#x2F; 此處的代碼會被忽略掉！！！！\n    alert(666);  \n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"注釋和結束符\"><a href=\"#注釋和結束符\" class=\"headerlink\" title=\"注釋和結束符\"></a>注釋和結束符</h3><p>通過注釋可以遮罩代碼被執行或者添加備註資訊，JavaScript 支援兩種形式注釋語法：</p>\n<h4 id=\"單行注釋\"><a href=\"#單行注釋\" class=\"headerlink\" title=\"單行注釋\"></a>單行注釋</h4><p>使用 <code>//</code> 注釋單行代碼</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 注釋&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt;\n    &#x2F;&#x2F; 這種是單行注釋的語法\n    &#x2F;&#x2F; 一次只能注釋一行\n    &#x2F;&#x2F; 可以重複注釋\n    document.write(&#39;嗨，前端技術！&#39;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h4 id=\"多行注釋\"><a href=\"#多行注釋\" class=\"headerlink\" title=\"多行注釋\"></a>多行注釋</h4><p>使用 <code>/* */</code> 注釋多行代碼</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 注釋&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt;\n    &#x2F;* 這種的是多行注釋的語法 *&#x2F;\n    &#x2F;*\n      更常見的多行注釋是這種寫法\n      在些可以任意換行\n      多少行都可以\n      *&#x2F;\n    document.write(&#39;嗨，來學習前端！&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p><strong>注：編輯器中單行注釋的快速鍵為 <code>ctrl + /</code></strong></p>\n<h3 id=\"結束符\"><a href=\"#結束符\" class=\"headerlink\" title=\"結束符\"></a>結束符</h3><p>在 JavaScript 中 <code>;</code> 代表一段代碼的結束，多數情況下可以省略 <code>;</code> 使用回車（enter）替代。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 結束符&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    alert(1);\n    alert(2);\n    alert(1)\n    alert(2)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>實際開發中有許多人主張書寫 JavaScript 代碼時省略結束符 <code>;</code></p>\n<h3 id=\"輸入和輸出\"><a href=\"#輸入和輸出\" class=\"headerlink\" title=\"輸入和輸出\"></a>輸入和輸出</h3><p>輸出和輸入也可理解為人和電腦的交互，使用者通過鍵盤、滑鼠等向電腦輸入資訊，電腦處理後再展示結果給用戶，這便是一次輸入和輸出的過程。</p>\n<p>舉例說明：如按鍵盤上的方向鍵，向上&#x2F;下鍵可以滾動頁面，按向上&#x2F;下鍵這個動作叫作輸入，頁面發生了滾動了這便叫輸出。</p>\n<h4 id=\"輸出\"><a href=\"#輸出\" class=\"headerlink\" title=\"輸出\"></a>輸出</h4><p>JavaScript 可以接收用戶的輸入，然後再將輸入的結果輸出：</p>\n<p><code>alert()</code>、<code>document.wirte()</code></p>\n<p>以數字為例，向 <code>alert()</code> 或 <code>document.write()</code>輸入任意數位，他都會以彈窗形式展示（輸出）給用戶。</p>\n<h4 id=\"輸入\"><a href=\"#輸入\" class=\"headerlink\" title=\"輸入\"></a>輸入</h4><p>向 <code>prompt()</code> 輸入任意內容會以彈窗形式出現在流覽器中，一般提示使用者輸入一些內容。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 輸入輸出&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 1. 輸入的任意數位，都會以彈窗形式展示\n    document.write(&#39;要輸出的內容&#39;)\n    alert(&#39;要輸出的內容&#39;);\n\n    &#x2F;&#x2F; 2. 以彈窗形式提示用戶輸入姓名，注意這裡的文字使用英文的引號\n    prompt(&#39;請輸入您的姓名:&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h2 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>理解變數是電腦存儲資料的“容器”，掌握變數的聲明方式</p></blockquote>\n<p>變數是電腦中用來存儲資料的“容器”，它可以讓電腦變得有記憶，通俗的理解變數就是使用【某個符號】來代表【某個具體的數值】（資料）</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; x 符號代表了 5 這個數值\n  x &#x3D; 5\n  &#x2F;&#x2F; y 符號代表了 6 這個數值\n  y &#x3D; 6\n    \n  &#x2F;&#x2F;舉例： 在 JavaScript 中使用變數可以將某個資料（數值）記錄下來！\n\n  &#x2F;&#x2F; 將使用者輸入的內容保存在 num 這個變數（容器）中\n  num &#x3D; prompt(&#39;請輸入一數位!&#39;)\n\n  &#x2F;&#x2F; 通過 num 變數（容器）將使用者輸入的內容輸出出來\n  alert(num)\n  document.write(num)\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"聲明\"><a href=\"#聲明\" class=\"headerlink\" title=\"聲明\"></a>聲明</h3><p>聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 聲明和賦值&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; let 變數名\n    &#x2F;&#x2F; 聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）\n    &#x2F;&#x2F; let 即關鍵字，所謂關鍵字是系統提供的專門用來聲明（定義）變數的詞語\n    &#x2F;&#x2F; age 即變數的名稱，也叫識別字\n    let age\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>關鍵字是 JavaScript 中內置的一些英文詞彙（單詞或縮寫），它們代表某些特定的含義，如 <code>let</code> 的含義是聲明變數的，看到 <code>let</code>  後就可想到這行代碼的意思是在聲明變數，如 <code>let age;</code> </p>\n<p><code>let</code> 和 <code>var</code> 都是 JavaScript 中的聲明變數的關鍵字，推薦使用 <code>let</code> 聲明變數！！！</p>\n<h3 id=\"賦值\"><a href=\"#賦值\" class=\"headerlink\" title=\"賦值\"></a>賦值</h3><p>聲明（定義）變數相當於創造了一個空的“容器”，通過賦值向這個容器中添加資料。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 聲明和賦值&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）\n    &#x2F;&#x2F; let 即關鍵字，所謂關鍵字是系統提供的專門用來聲明（定義）變數的詞語\n    &#x2F;&#x2F; age 即變數的名稱，也叫識別字\n    let age\n    &#x2F;&#x2F; 賦值，將 18 這個資料存入了 age 這個“容器”中\n    age &#x3D; 18\n    &#x2F;&#x2F; 這樣 age 的值就成了 18\n    document.write(age)\n    \n    &#x2F;&#x2F; 也可以聲明和賦值同時進行\n    let str &#x3D; &#39;hello world!&#39;\n    alert(str);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"關鍵字\"><a href=\"#關鍵字\" class=\"headerlink\" title=\"關鍵字\"></a>關鍵字</h3><p>JavaScript 使用專門的關鍵字 <code>let</code> 和 <code>var</code> 來聲明（定義）變數，在使用時需要注意一些細節：</p>\n<p>以下是使用 <code>let</code> 時的注意事項：</p>\n<ol>\n<li>允許聲明和賦值同時進行</li>\n<li>不允許重複聲明</li>\n<li>允許同時聲明多個變數並賦值</li>\n<li>JavaScript 中內置的一些關鍵字不能被當做變數名</li>\n</ol>\n<p>以下是使用 <code>var</code> 時的注意事項：</p>\n<ol start=\"2\">\n<li>允許聲明和賦值同時進行</li>\n<li>允許重複聲明</li>\n<li>允許同時聲明多個變數並賦值</li>\n</ol>\n<p>大部分情況使用 <code>let</code> 和 <code>var</code> 區別不大，但是 <code>let</code> 相較 <code>var</code> 更嚴謹，因此推薦使用 <code>let</code>，後期會更進一步介紹二者間的區別。</p>\n<h3 id=\"變數名命名規則\"><a href=\"#變數名命名規則\" class=\"headerlink\" title=\"變數名命名規則\"></a>變數名命名規則</h3><p>關於變數的名稱（識別字）有一系列的規則需要遵守：</p>\n<ol>\n<li>只能是字母、數位、底線、$，且不能能數字開頭</li>\n<li>字母區分大小寫，如 Age 和 age 是不同的變數</li>\n<li>JavaScript 內部已佔用於單詞（關鍵字或保留字）不允許使用</li>\n<li>儘量保證變數具有一定的語義，見字知義</li>\n</ol>\n<p>注：所謂關鍵字是指 JavaScript 內部使用的詞語，如 <code>let</code> 和<code>var</code>，保留字是指 JavaScript 內部目前沒有使用的詞語，但是將來可能會使用詞語。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 變數名命名規則&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    let age &#x3D; 18 &#x2F;&#x2F; 正確\n    let age1 &#x3D; 18 &#x2F;&#x2F; 正確\n    let _age &#x3D; 18 &#x2F;&#x2F; 正確\n\n    &#x2F;&#x2F; let 1age &#x3D; 18; &#x2F;&#x2F; 錯誤，不可以數位開頭\n    let $age &#x3D; 18 &#x2F;&#x2F; 正確\n    let Age &#x3D; 24 &#x2F;&#x2F; 正確，它與小寫的 age 是不同的變數\n    &#x2F;&#x2F; let let &#x3D; 18; &#x2F;&#x2F; 錯誤，let 是關鍵字\n    let int &#x3D; 123 &#x2F;&#x2F; 不推薦，int 是保留字\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>概念：使用 const 聲明的變數稱為“常量”。</p>\n<p>使用場景：當某個變數永遠不會改變的時候，就可以使用 const 來聲明，而不是let。</p>\n<p>命名規範：和變數一致</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const PI &#x3D; 3.14</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意： 常量不允許重新賦值,聲明的時候必須賦值（初始化）</p></blockquote>\n","feature":null,"text":" 瞭解變數、資料類型、運算子等基礎概念，能夠實現資料類型的轉換，結合四則運算體會如何程式設計。 體會現實世界中的事物與電腦的關係 理解什麼是資料並知道資料的分類 理解變數存儲資料的“容器” 掌握常見運算子的使用，瞭解優先順序關係 知道 JavaScript 資料類型隱式轉換的特徵...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%B4%B9\"><span class=\"toc-text\">介紹</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">引入方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A7%E9%83%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">內部方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">外部形式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E9%87%8B%E5%92%8C%E7%B5%90%E6%9D%9F%E7%AC%A6\"><span class=\"toc-text\">注釋和結束符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%96%AE%E8%A1%8C%E6%B3%A8%E9%87%8B\"><span class=\"toc-text\">單行注釋</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%8C%E6%B3%A8%E9%87%8B\"><span class=\"toc-text\">多行注釋</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B5%90%E6%9D%9F%E7%AC%A6\"><span class=\"toc-text\">結束符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BC%B8%E5%85%A5%E5%92%8C%E8%BC%B8%E5%87%BA\"><span class=\"toc-text\">輸入和輸出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BC%B8%E5%87%BA\"><span class=\"toc-text\">輸出</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BC%B8%E5%85%A5\"><span class=\"toc-text\">輸入</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%8A%E6%95%B8\"><span class=\"toc-text\">變數</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%B2%E6%98%8E\"><span class=\"toc-text\">聲明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B3%A6%E5%80%BC\"><span class=\"toc-text\">賦值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%9C%E9%8D%B5%E5%AD%97\"><span class=\"toc-text\">關鍵字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%8A%E6%95%B8%E5%90%8D%E5%91%BD%E5%90%8D%E8%A6%8F%E5%89%87\"><span class=\"toc-text\">變數名命名規則</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">常量</span></a></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript 基礎 - 第2天","uid":"119b4406e4e9c28d94cef591716ce0ed","slug":"2303-1 JS 基礎2 運算子&語句","date":"2023-03-18T16:00:00.000Z","updated":"2023-03-25T02:06:36.479Z","comments":true,"path":"api/articles/2303-1 JS 基礎2 運算子&語句.json","keywords":null,"cover":null,"text":" 理解什麼是流程控制，知道條件控制的種類並掌握其對應的語法規則，具備利用迴圈編寫簡易ATM取款機程式能力 運算子 語句 綜合案例 運算子算術運算子數字是用來計算的，比如：乘法 * 、除法 &#x2F; 、加法 + 、減法 - 等等，所以經常和算術運算子一起。 算術運算子：也叫數學...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"10 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"JavaScript 基礎- 第1天","uid":"1517f5e85f0012c69f183e7960bb5313","slug":"2303-1 JS 基礎1-1 型別","date":"2023-03-17T16:00:00.000Z","updated":"2023-04-13T09:49:17.871Z","comments":true,"path":"api/articles/2303-1 JS 基礎1-1 型別.json","keywords":null,"cover":null,"text":"資料型別 電腦世界中的萬事成物都是資料。 電腦程式可以處理大量的資料，為了方便資料的管理，將資料分成了不同的型別： 注：通過 typeof 關鍵字檢測資料型別 &lt;!DOCTYPE html&gt; &lt;html lang&#x3D;&quot;en&quot;&gt; ...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}