{"title":"JavaScript 進階 - 第4天","uid":"956114e1932534f6adc2e3848138c40e","slug":"2303-3 JS 進階4-1 深淺拷貝","date":"2023-04-01T01:22:08.000Z","updated":"2023-04-13T09:16:37.267Z","comments":true,"path":"api/articles/2303-3 JS 進階4-1 深淺拷貝.json","keywords":null,"cover":null,"content":"<h1 id=\"深淺拷貝\"><a href=\"#深淺拷貝\" class=\"headerlink\" title=\"深淺拷貝\"></a>深淺拷貝</h1><h2 id=\"淺拷貝\"><a href=\"#淺拷貝\" class=\"headerlink\" title=\"淺拷貝\"></a>淺拷貝</h2><p>首先淺拷貝和深拷貝只針對參考類型</p>\n<p>淺拷貝：拷貝的是位址</p>\n<p>常見方法：</p>\n<ol>\n<li>拷貝物件：Object.assgin() &#x2F; 展開運運算元 {…obj} 拷貝物件</li>\n<li>拷貝陣列：Array.prototype.concat() 或者 […arr]</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果是單一資料型別拷貝值，引用資料類型拷貝的是位址 (簡單理解： 如果是單層物件，沒問題，如果有多層就有問題)</p></blockquote>\n<h2 id=\"深拷貝\"><a href=\"#深拷貝\" class=\"headerlink\" title=\"深拷貝\"></a>深拷貝</h2><p>首先淺拷貝和深拷貝只針對參考類型</p>\n<p>深拷貝：拷貝的是物件，不是位址</p>\n<p>常見方法：</p>\n<ol>\n<li>通過遞迴實現深拷貝</li>\n<li>lodash&#x2F;cloneDeep</li>\n<li>通過JSON.stringify()實現</li>\n</ol>\n<h3 id=\"遞迴實現深拷貝\"><a href=\"#遞迴實現深拷貝\" class=\"headerlink\" title=\"遞迴實現深拷貝\"></a>遞迴實現深拷貝</h3><p>函數遞迴：</p>\n<p>如果一個函數在內部可以調用其本身，那麼這個函數就是遞迴函數</p>\n<ul>\n<li>簡單理解:函數內部自己調用自己, 這個函數就是遞迴函數</li>\n<li>遞迴函數的作用和迴圈效果類似</li>\n<li>由於遞迴很容易發生“棧溢出”錯誤（stack overflow），所以必須要加退出條件 return</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    const obj &#x3D; &#123;\n      uname: &#39;pink&#39;,\n      age: 18,\n      hobby: [&#39;乒乓球&#39;, &#39;足球&#39;],\n      family: &#123;\n        baby: &#39;小pink&#39;\n      &#125;\n    &#125;\n    const o &#x3D; &#123;&#125;\n    &#x2F;&#x2F; 拷貝函數\nfunction deepCopy(newObj, oldObj) &#123;\n  debugger\n  &#x2F;&#x2F; 遍歷oldObj中的每一個屬性\n  for (let k in oldObj) &#123;\n    &#x2F;&#x2F; 處理陣列的問題  一定先寫陣列 在寫 物件 不能顛倒\n    if (oldObj[k] instanceof Array) &#123;\n      &#x2F;&#x2F; 如果該屬性的值是一個陣列，則在 newObj 中生成一個新的空陣列\n      newObj[k] &#x3D; []\n      &#x2F;&#x2F;  newObj[k] 接收 []  hobby\n      &#x2F;&#x2F;  oldObj[k] &#x3D;  [&#39;乒乓球&#39;, &#39;足球&#39;]\n      &#x2F;&#x2F; 遞歸調用 deepCopy 函數，把 oldObj 中的陣列複製到新生成的陣列中。\n      deepCopy(newObj[k], oldObj[k])\n    &#125; else if (oldObj[k] instanceof Object) &#123;\n      &#x2F;&#x2F; 如果該屬性的值是一個物件，則在 newObj 中生成一個新的空物件\n      newObj[k] &#x3D; &#123;&#125;\n      &#x2F;&#x2F; 遞歸調用 deepCopy 函數，把 oldObj 中的物件複製到新生成的物件中。\n      deepCopy(newObj[k], oldObj[k])\n    &#125;\n    else &#123;\n      &#x2F;&#x2F; 如果該屬性的值不是物件或陣列，則直接把該值複製到 newObj 中。\n      newObj[k] &#x3D; oldObj[k]\n    &#125;\n  &#125;\n&#125;\n    deepCopy(o, obj) &#x2F;&#x2F; 函式呼叫  兩個參數 o 新物件  obj 舊物件\n    console.log(o)\n    o.age &#x3D; 20\n    o.hobby[0] &#x3D; &#39;籃球&#39;\n    o.family.baby &#x3D; &#39;老pink&#39;\n    console.log(obj)\n    console.log([1, 23] instanceof Object)\n    &#x2F;&#x2F; 複習\n    &#x2F;&#x2F; const obj &#x3D; &#123;\n    &#x2F;&#x2F;   uname: &#39;pink&#39;,\n    &#x2F;&#x2F;   age: 18,\n    &#x2F;&#x2F;   hobby: [&#39;乒乓球&#39;, &#39;足球&#39;]\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; function deepCopy(&#123; &#125;, oldObj) &#123;\n    &#x2F;&#x2F;   &#x2F;&#x2F; k 屬性名  oldObj[k] 屬性值\n    &#x2F;&#x2F;   for (let k in oldObj) &#123;\n    &#x2F;&#x2F;     &#x2F;&#x2F; 處理陣列的問題   k 變數\n    &#x2F;&#x2F;     newObj[k] &#x3D; oldObj[k]\n    &#x2F;&#x2F;     &#x2F;&#x2F; o.uname &#x3D; &#39;pink&#39;\n    &#x2F;&#x2F;     &#x2F;&#x2F; newObj.k  &#x3D; &#39;pink&#39;\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F; &#125;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h3 id=\"js庫lodash裡面cloneDeep內部實現了深拷貝\"><a href=\"#js庫lodash裡面cloneDeep內部實現了深拷貝\" class=\"headerlink\" title=\"js庫lodash裡面cloneDeep內部實現了深拷貝\"></a>js庫lodash裡面cloneDeep內部實現了深拷貝</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;!-- 先引用 --&gt;\n  &lt;script src&#x3D;&quot;.&#x2F;lodash.min.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;script&gt;\n    const obj &#x3D; &#123;\n      uname: &#39;pink&#39;,\n      age: 18,\n      hobby: [&#39;乒乓球&#39;, &#39;足球&#39;],\n      family: &#123;\n        baby: &#39;小pink&#39;\n      &#125;\n    &#125;\n    const o &#x3D; _.cloneDeep(obj)\n    console.log(o)\n    o.family.baby &#x3D; &#39;老pink&#39;\n    console.log(obj)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h3 id=\"JSON序列化\"><a href=\"#JSON序列化\" class=\"headerlink\" title=\"JSON序列化\"></a>JSON序列化</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    const obj &#x3D; &#123;\n      uname: &#39;pink&#39;,\n      age: 18,\n      hobby: [&#39;乒乓球&#39;, &#39;足球&#39;],\n      family: &#123;\n        baby: &#39;小pink&#39;\n      &#125;\n    &#125;\n    &#x2F;&#x2F; 把物件轉換為 JSON 字串\n    &#x2F;&#x2F; console.log(JSON.stringify(obj))\n    const o &#x3D; JSON.parse(JSON.stringify(obj))\n    console.log(o)\n    o.family.baby &#x3D; &#39;123&#39;\n    console.log(obj)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n","feature":null,"text":"深淺拷貝淺拷貝首先淺拷貝和深拷貝只針對參考類型 淺拷貝：拷貝的是位址 常見方法： 拷貝物件：Object.assgin() &#x2F; 展開運運算元 {…obj} 拷貝物件 拷貝陣列：Array.prototype.concat() 或者 […arr] 如果是單一資料型別拷貝值...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E6%B7%BA%E6%8B%B7%E8%B2%9D\"><span class=\"toc-text\">深淺拷貝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%BA%E6%8B%B7%E8%B2%9D\"><span class=\"toc-text\">淺拷貝</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E6%8B%B7%E8%B2%9D\"><span class=\"toc-text\">深拷貝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%9E%E8%BF%B4%E5%AF%A6%E7%8F%BE%E6%B7%B1%E6%8B%B7%E8%B2%9D\"><span class=\"toc-text\">遞迴實現深拷貝</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#js%E5%BA%ABlodash%E8%A3%A1%E9%9D%A2cloneDeep%E5%85%A7%E9%83%A8%E5%AF%A6%E7%8F%BE%E4%BA%86%E6%B7%B1%E6%8B%B7%E8%B2%9D\"><span class=\"toc-text\">js庫lodash裡面cloneDeep內部實現了深拷貝</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSON%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">JSON序列化</span></a></li></ol></li></ol></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"./source/img/1.jpg","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"如何發問程式碼問題","uid":"70dadd491ec3695ca3bd2adef4b59f9a","slug":"240124如何發問程式碼問題","date":"2024-01-24T11:17:41.000Z","updated":"2024-01-27T11:26:04.081Z","comments":true,"path":"api/articles/240124如何發問程式碼問題.json","keywords":null,"cover":null,"text":"如何發問程式碼問題使用 Gist (推薦!!!)Gist 是 Github 的一個免費服務，且任何人都可以使用這個服務，不論你是否擁有 Github 帳號。 以開發者的角度來說，最基本的功能就是可以分享片段的原始碼。有別於 Github 的 Repository，Gist 可以只...","link":"","photos":[],"count_time":{"symbolsCount":630,"symbolsTime":"1 mins."},"categories":[{"name":"github","slug":"github","count":2,"path":"api/categories/github.json"}],"tags":[{"name":"資策會上課筆記","slug":"資策會上課筆記","count":5,"path":"api/tags/資策會上課筆記.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"./source/img/1.jpg","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"JavaScript 進階 - 第4天","uid":"956114e1932534f6adc2e3848138c40e","slug":"2303-3 JS 進階4-2 異常處理","date":"2023-04-01T01:22:08.000Z","updated":"2023-04-13T09:16:22.204Z","comments":true,"path":"api/articles/2303-3 JS 進階4-2 異常處理.json","keywords":null,"cover":null,"text":"異常處理 瞭解 JavaScript 中程式異常處理的方法，提升代碼運行的健壯性。 throw異常處理是指預估代碼執行過程中可能發生的錯誤，然後最大程度的避免錯誤的發生導致整個程式無法繼續運行 總結： throw 拋出異常資訊，程式也會終止執行 throw 後面跟的是錯誤提示資訊...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"./source/img/1.jpg","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}