{"title":"JavaScript 進階 - 第4天","uid":"956114e1932534f6adc2e3848138c40e","slug":"2303-3 JS 進階4-2 異常處理","date":"2023-04-01T01:22:08.000Z","updated":"2023-04-13T09:16:22.204Z","comments":true,"path":"api/articles/2303-3 JS 進階4-2 異常處理.json","keywords":null,"cover":null,"content":"<h1 id=\"異常處理\"><a href=\"#異常處理\" class=\"headerlink\" title=\"異常處理\"></a>異常處理</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>瞭解 JavaScript 中程式異常處理的方法，提升代碼運行的健壯性。</p></blockquote>\n<h2 id=\"throw\"><a href=\"#throw\" class=\"headerlink\" title=\"throw\"></a>throw</h2><p>異常處理是指預估代碼執行過程中可能發生的錯誤，然後最大程度的避免錯誤的發生導致整個程式無法繼續運行</p>\n<p>總結：</p>\n<ol>\n<li>throw 拋出異常資訊，程式也會終止執行</li>\n<li>throw 後面跟的是錯誤提示資訊</li>\n<li>Error 物件配合 throw 使用，能夠設置更詳細的錯誤資訊</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  function counter(x, y) &#123;\n\n    if(!x || !y) &#123;\n      &#x2F;&#x2F; throw &#39;參數不能為空!&#39;;\n      throw new Error(&#39;參數不能為空!&#39;)\n    &#125;\n\n    return x + y\n  &#125;\n\n  counter()\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>總結：</p>\n<ol>\n<li><code>throw</code> 拋出異常資訊，程式也會終止執行</li>\n<li><code>throw</code> 後面跟的是錯誤提示資訊</li>\n<li><code>Error</code> 物件配合 <code>throw</code> 使用，能夠設置更詳細的錯誤資訊</li>\n</ol>\n<h2 id=\"try-…-catch\"><a href=\"#try-…-catch\" class=\"headerlink\" title=\"try … catch\"></a>try … catch</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n   function foo() &#123;\n      try &#123;\n        &#x2F;&#x2F; 查找 DOM 節點\n        const p &#x3D; document.querySelector(&#39;.p&#39;)\n        p.style.color &#x3D; &#39;red&#39;\n      &#125; catch (error) &#123;\n        &#x2F;&#x2F; try 程式碼片段中執行有錯誤時，會執行 catch 程式碼片段\n        &#x2F;&#x2F; 查看錯誤資訊\n        console.log(error.message)\n        &#x2F;&#x2F; (補充)可以配合throw\n        throw new Error(&#39;選擇錯誤&#39;)\n        &#x2F;&#x2F; 終止代碼繼續執行\n        return\n\n      &#125;\n      finally &#123;\n          alert(&#39;執行&#39;)\n      &#125;\n      console.log(&#39;如果出現錯誤，我的語句不會執行&#39;)\n    &#125;\n    foo()\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>總結：</p>\n<ol>\n<li><code>try...catch</code> 用於捕獲錯誤資訊</li>\n<li>將預估可能發生錯誤的代碼寫在 <code>try</code> 程式碼片段中</li>\n<li>如果 <code>try</code> 程式碼片段中出現錯誤後，會執行 <code>catch</code> 程式碼片段，並截獲到錯誤資訊</li>\n<li><code>finally</code>不管是否有無錯誤都會執行</li>\n</ol>\n<h2 id=\"debugger\"><a href=\"#debugger\" class=\"headerlink\" title=\"debugger\"></a>debugger</h2><p>相當於中斷點調試，在代碼中打debugger即可</p>\n","feature":null,"text":"異常處理 瞭解 JavaScript 中程式異常處理的方法，提升代碼運行的健壯性。 throw異常處理是指預估代碼執行過程中可能發生的錯誤，然後最大程度的避免錯誤的發生導致整個程式無法繼續運行 總結： throw 拋出異常資訊，程式也會終止執行 throw 後面跟的是錯誤提示資訊...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%95%B0%E5%B8%B8%E8%99%95%E7%90%86\"><span class=\"toc-text\">異常處理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#throw\"><span class=\"toc-text\">throw</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#try-%E2%80%A6-catch\"><span class=\"toc-text\">try … catch</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#debugger\"><span class=\"toc-text\">debugger</span></a></li></ol></li></ol>","author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript 進階 - 第4天","uid":"956114e1932534f6adc2e3848138c40e","slug":"2303-3 JS 進階4-1 深淺拷貝","date":"2023-04-01T01:22:08.000Z","updated":"2023-04-13T09:16:37.267Z","comments":true,"path":"api/articles/2303-3 JS 進階4-1 深淺拷貝.json","keywords":null,"cover":null,"text":"深淺拷貝淺拷貝首先淺拷貝和深拷貝只針對參考類型 淺拷貝：拷貝的是位址 常見方法： 拷貝物件：Object.assgin() &#x2F; 展開運運算元 {…obj} 拷貝物件 拷貝陣列：Array.prototype.concat() 或者 […arr] 如果是單一資料型別拷貝值...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null},"next_post":{"title":"JavaScript 進階 - 第4天","uid":"956114e1932534f6adc2e3848138c40e","slug":"2303-3 JS 進階4-3 處理this","date":"2023-04-01T01:22:08.000Z","updated":"2023-04-13T09:15:36.220Z","comments":true,"path":"api/articles/2303-3 JS 進階4-3 處理this.json","keywords":null,"cover":null,"text":"處理this 瞭解函數中 this 在不同場景下的預設值，知道動態指定函數 this 值的方法。 this 是 JavaScript 最具“魅惑”的知識點，不同的應用場合 this 的取值可能會有意想不到的結果，在此我們對以往學習過的關於【 this 預設的取值】情況進行歸納和總...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/categories/javaScript.json"}],"tags":[{"name":"javaScript","slug":"javaScript","count":20,"path":"api/tags/javaScript.json"}],"author":{"name":"Hsu's Blog","slug":"blog-author","avatar":"https://github.com/HSU0201/images/blob/main/blogimage.jpg?raw=true","link":"/","description":"“Stay curious, keep learning, and never stop creating.”","socials":{"github":"https://github.com/HSU0201","twitter":"","stackoverflow":"https://stackoverflow.com/users/21010008/hsu","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":null}}