[{"id":"119b4406e4e9c28d94cef591716ce0ed","title":"JavaScript 基礎 - 第2天","content":"\n\n\n\n\n\n\n\n\n理解什麼是流程控制，知道條件控制的種類並掌握其對應的語法規則，具備利用迴圈編寫簡易ATM取款機程式能力\n\n運算子\n語句\n綜合案例\n\n運算子算術運算子數字是用來計算的，比如：乘法 * 、除法 &#x2F; 、加法 + 、減法 - 等等，所以經常和算術運算子一起。\n算術運算子：也叫數學運算子，主要包括加、減、乘、除、取餘（求模）等\n\n\n\n運算子\n作用\n\n\n\n+\n求和\n\n\n-\n求差\n\n\n*\n求積\n\n\n&#x2F;\n求商\n\n\n%\n取模（取餘數），開發中經常用於作為某個數位是否被整除\n\n\n\n\n\n\n\n\n\n\n\n注意：在計算失敗時，顯示的結果是 NaN （not a number）\n&#x2F;&#x2F; 算術運算子\nconsole.log(1 + 2 * 3 &#x2F; 2) &#x2F;&#x2F;  4 \nlet num &#x3D; 10\nconsole.log(num + 10)  &#x2F;&#x2F; 20\nconsole.log(num + num)  &#x2F;&#x2F; 20\n\n&#x2F;&#x2F; 1. 取模(取餘數)  使用場景：  用來判斷某個數是否能夠被整除\nconsole.log(4 % 2) &#x2F;&#x2F;  0  \nconsole.log(6 % 3) &#x2F;&#x2F;  0\nconsole.log(5 % 3) &#x2F;&#x2F;  2\nconsole.log(3 % 5) &#x2F;&#x2F;  3\n\n&#x2F;&#x2F; 2. 注意事項 : 如果我們計算失敗，則返回的結果是 NaN (not a number)\nconsole.log(&#39;pink老師&#39; - 2)\nconsole.log(&#39;pink老師&#39; * 2)\nconsole.log(&#39;pink老師&#39; + 2)   &#x2F;&#x2F; pink老師2\n\n設定運算子設定運算子：對變數進行賦值的運算子\n &#x3D;     將等號右邊的值賦予給左邊, 要求左邊必須是一個容器\n\n\n\n運算子\n作用\n\n\n\n+&#x3D;\n加法賦值\n\n\n-+\n減法賦值\n\n\n*&#x3D;\n乘法賦值\n\n\n&#x2F;&#x3D;\n除法賦值\n\n\n%&#x3D;\n取餘賦值\n\n\n&lt;script&gt;\nlet num &#x3D; 1\n&#x2F;&#x2F; num &#x3D; num + 1\n&#x2F;&#x2F; 採取設定運算子\n&#x2F;&#x2F; num +&#x3D; 1\nnum +&#x3D; 3\nconsole.log(num)\n&lt;&#x2F;script&gt;\n\n自增&#x2F;自減運算子\n\n\n符號\n作用\n說明\n\n\n\n++\n自增\n變數自身的值加1，例如: x++\n\n\n–\n自減\n變數自身的值減1，例如: x–\n\n\n\n++在前和++在後在單獨使用時二者並沒有差別，而且一般開發中我們都是獨立使用\n++在後（尾碼式）我們會使用更多\n\n\n\n\n\n\n\n\n\n\n注意：\n\n只有變數能夠使用自增和自減運算子\n++、– 可以在變數前面也可以在變數後面，比如: x++  或者  ++x\n\n&lt;script&gt;\n    &#x2F;&#x2F; let num &#x3D; 10\n    &#x2F;&#x2F; num &#x3D; num + 1\n    &#x2F;&#x2F; num +&#x3D; 1\n    &#x2F;&#x2F; &#x2F;&#x2F; 1. 前置自增\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; ++i\n    &#x2F;&#x2F; console.log(i)\n\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; console.log(++i + 1)\n    &#x2F;&#x2F; 2. 後置自增\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; i++\n    &#x2F;&#x2F; console.log(i)\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; console.log(i++ + 1)\n\n    &#x2F;&#x2F; 瞭解 \n    let i &#x3D; 1\n    console.log(i++ + ++i + i)\n  &lt;&#x2F;script&gt;\n\n比較運算子使用場景：比較兩個資料大小、是否相等，根據比較結果返回一個布林值（true &#x2F; false）\n\n\n\n運算子\n作用\n\n\n\n&gt;\n左邊是否大於右邊\n\n\n&lt;\n左邊是否小於右邊\n\n\n&gt;&#x3D;\n左邊是否大於或等於右邊\n\n\n&lt;&#x3D;\n左邊是否小於或等於右邊\n\n\n&#x3D;&#x3D;&#x3D;\n左右兩邊是否類型和值都相等（重點）\n\n\n&#x3D;&#x3D;\n左右兩邊值是否相等\n\n\n!&#x3D;\n左右值不相等\n\n\n!&#x3D;&#x3D;\n左右兩邊是否不全等\n\n\n&lt;script&gt;\n  console.log(3 &gt; 5)\n  console.log(3 &gt;&#x3D; 3)\n  console.log(2 &#x3D;&#x3D; 2)\n  &#x2F;&#x2F; 比較運算子有隱式轉換 把&#39;2&#39; 轉換為 2  雙等號 只判斷值\n  console.log(2 &#x3D;&#x3D; &#39;2&#39;)  &#x2F;&#x2F; true\n  &#x2F;&#x2F; console.log(undefined &#x3D;&#x3D;&#x3D; null)\n  &#x2F;&#x2F; &#x3D;&#x3D;&#x3D; 全等 判斷 值 和 資料類型都一樣才行\n  &#x2F;&#x2F; 以後判斷是否相等 請用 &#x3D;&#x3D;&#x3D;  \n  console.log(2 &#x3D;&#x3D;&#x3D; &#39;2&#39;)\n  console.log(NaN &#x3D;&#x3D;&#x3D; NaN) &#x2F;&#x2F; NaN 不等於任何人，包括他自己\n  console.log(2 !&#x3D;&#x3D; &#39;2&#39;)  &#x2F;&#x2F; true  \n  console.log(2 !&#x3D; &#39;2&#39;) &#x2F;&#x2F; false \n  console.log(&#39;-------------------------&#39;)\n  console.log(&#39;a&#39; &lt; &#39;b&#39;) &#x2F;&#x2F; true\n  console.log(&#39;aa&#39; &lt; &#39;ab&#39;) &#x2F;&#x2F; true\n  console.log(&#39;aa&#39; &lt; &#39;aac&#39;) &#x2F;&#x2F; true\n  console.log(&#39;-------------------------&#39;)\n&lt;&#x2F;script&gt;\n\n邏輯運算子使用場景：可以把多個布林值放到一起運算，最終返回一個布林值\n\n\n\n符號\n名稱\n日常讀法\n特點\n口訣\n\n\n\n&amp;&amp;\n邏輯與\n並且\n符號兩邊有一個假的結果為假\n一假則假\n\n\n||\n邏輯或\n或者\n符號兩邊有一個真的結果為真\n一真則真\n\n\n!\n邏輯非\n取反\ntrue變false  false變true\n真變假，假變真\n\n\n\n\n\nA\nB\nA &amp;&amp; B\nA || B\n!A\n\n\n\nfalse\nfalse\nfalse\nfalse\ntrue\n\n\nfalse\ntrue\nfalse\ntrue\ntrue\n\n\ntrue\nfalse\nfalse\ntrue\nfalse\n\n\ntrue\ntrue\ntrue\ntrue\nfalse\n\n\n&lt;script&gt;\n    &#x2F;&#x2F; 邏輯與 一假則假\n    console.log(true &amp;&amp; true)\n    console.log(false &amp;&amp; true)\n    console.log(3 &lt; 5 &amp;&amp; 3 &gt; 2)\n    console.log(3 &lt; 5 &amp;&amp; 3 &lt; 2)\n    console.log(&#39;-----------------&#39;)\n    &#x2F;&#x2F; 邏輯或 一真則真\n    console.log(true || true)\n    console.log(false || true)\n    console.log(false || false)\n    console.log(&#39;-----------------&#39;)\n    &#x2F;&#x2F; 邏輯非  取反\n    console.log(!true)\n    console.log(!false)\n\n    console.log(&#39;-----------------&#39;)\n\n    let num &#x3D; 6\n    console.log(num &gt; 5 &amp;&amp; num &lt; 10)\n    console.log(&#39;-----------------&#39;)\n  &lt;&#x2F;script&gt;\n\n運算子優先順序\n\n\n\n\n\n\n\n\n邏輯運算子優先順序： ！&gt; &amp;&amp; &gt;  ||  \n語句運算式和語句\n\n\n\n\n\n\n\n\n運算式:可以被求值的代碼計算出一個結果。\n3+4\nnum++\n\n\n\n\n\n\n\n\n\n語句一段可以執行的代碼，是一種行為，例如分支語句和循環語句。\nfor(let i &#x3D; 0; i &lt; 10; i++)&#123;\n  console.log(&#39;我愛程式&#39;)\n&#125;\n\n\n分支語句分支語句可以根據條件判定真假，來選擇性的執行想要的代碼\n分支語句包含：\n\nif分支語句（重點）\n三元運算子\nswitch語句\n\nif 分支語句語法：\nif(條件運算式) &#123;\n  &#x2F;&#x2F; 滿足條件要執行的語句\n&#125;\n\n小括弧內的條件結果是布林值，為 true 時，進入大括弧裡執行代碼；為false，則不執行大括弧裡面代碼\n小括弧內的結果若不是布林類型時，會發生類型轉換為布林值，類似Boolean()\n如果大括弧只有一個語句，大括弧可以省略，但是，俺們不提倡這麼做~\n&lt;script&gt;\n    &#x2F;&#x2F; 單分支語句\n    &#x2F;&#x2F; if (false) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; if (3 &gt; 5) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; if (2 &#x3D;&#x3D;&#x3D; &#39;2&#39;) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F;  1. 除了0 所有的數字都為真\n    &#x2F;&#x2F;   if (0) &#123;\n    &#x2F;&#x2F;     console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F; 2.除了 &#39;&#39; 所有的字串都為真 true\n    &#x2F;&#x2F; if (&#39;pink老師&#39;) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; if (&#39;&#39;) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; &#x2F;&#x2F; if (&#39;&#39;) console.log(&#39;執行語句&#39;)\n\n    &#x2F;&#x2F; 1. 用戶輸入\n    let score &#x3D; +prompt(&#39;請輸入成績&#39;)\n    &#x2F;&#x2F; 2. 進行判斷輸出\n    if (score &gt;&#x3D; 700) &#123;\n      alert(&#39;恭喜考入黑馬程式師&#39;)\n    &#125;\n    console.log(&#39;-----------------&#39;)\n\n  &lt;&#x2F;script&gt;\n\nif雙分支語句如果有兩個條件的時候，可以使用 if else 雙分支語句\nif (條件運算式)&#123;\n  &#x2F;&#x2F; 滿足條件要執行的語句\n&#125; else &#123;\n  &#x2F;&#x2F; 不滿足條件要執行的語句\n&#125;\n\n例如：\n&lt;script&gt;\n   &#x2F;&#x2F; 1. 用戶輸入\n   let uname &#x3D; prompt(&#39;請輸入用戶名:&#39;)\n   let pwd &#x3D; prompt(&#39;請輸入密碼:&#39;)\n   &#x2F;&#x2F; 2. 判斷輸出\n   if (uname &#x3D;&#x3D;&#x3D; &#39;pink&#39; &amp;&amp; pwd &#x3D;&#x3D;&#x3D; &#39;123456&#39;) &#123;\n     alert(&#39;恭喜登錄成功&#39;)\n   &#125; else &#123;\n     alert(&#39;用戶名或者密碼錯誤&#39;)\n   &#125;\n &lt;&#x2F;script&gt;\n\nif 多分支語句使用場景： 適合於有多個條件的時候\n&lt;script&gt;\n   &#x2F;&#x2F; 1. 用戶輸入\n   let score &#x3D; +prompt(&#39;請輸入成績：&#39;)\n   &#x2F;&#x2F; 2. 判斷輸出\n   if (score &gt;&#x3D; 90) &#123;\n     alert(&#39;成績優秀，寶貝，你是我的驕傲&#39;)\n   &#125; else if (score &gt;&#x3D; 70) &#123;\n     alert(&#39;成績良好，寶貝，你要加油哦~~&#39;)\n   &#125; else if (score &gt;&#x3D; 60) &#123;\n     alert(&#39;成績及格，寶貝，你很危險~&#39;)\n   &#125; else &#123;\n     alert(&#39;成績不及格，寶貝，我不想和你說話，我只想用鞭子和你說話~&#39;)\n   &#125;\n &lt;&#x2F;script&gt;\n\n三元運算子（三元運算式）使用場景： 一些簡單的雙分支，可以使用  三元運算子（三元運算式），寫起來比 if  else雙分支 更簡單\n符號：? 與 : 配合使用\n語法：\n條件 ? 運算式1 ： 運算式2\n\n例如：\n&#x2F;&#x2F; 三元運算子（三元運算式）\n&#x2F;&#x2F; 1. 語法格式\n&#x2F;&#x2F; 條件 ? 運算式1 : 運算式2 \n\n&#x2F;&#x2F; 2. 執行過程 \n&#x2F;&#x2F; 2.1 如果條件為真，則執行運算式1\n&#x2F;&#x2F; 2.2 如果條件為假，則執行運算式2\n\n&#x2F;&#x2F; 3. 驗證\n&#x2F;&#x2F; 5 &gt; 3 ? &#39;真的&#39; : &#39;假的&#39;\nconsole.log(5 &lt; 3 ? &#39;真的&#39; : &#39;假的&#39;)\n\n&#x2F;&#x2F; let age &#x3D; 18 \n&#x2F;&#x2F; age &#x3D; age + 1\n&#x2F;&#x2F;  age++\n\n&#x2F;&#x2F; 1. 用戶輸入 \nlet num &#x3D; prompt(&#39;請您輸入一個數字:&#39;)\n&#x2F;&#x2F; 2. 判斷輸出- 小於10才補0\n&#x2F;&#x2F; num &#x3D; num &lt; 10 ? 0 + num : num\nnum &#x3D; num &gt;&#x3D; 10 ? num : 0 + num\nalert(num)\n\nswitch語句（瞭解）使用場景： 適合於有多個條件的時候，也屬於分支語句，大部分情況下和 if多分支語句 功能相同\n注意：\n\nswitch case語句一般用於等值判斷, if適合於區間判斷\nswitchcase一般需要配合break關鍵字使用 沒有break會造成case穿透\nif 多分支語句開發要比switch更重要，使用也更多\n\n例如：\n&#x2F;&#x2F; switch分支語句\n&#x2F;&#x2F; 1. 語法\n&#x2F;&#x2F; switch (運算式) &#123;\n&#x2F;&#x2F;   case 值1:\n&#x2F;&#x2F;     代碼1\n&#x2F;&#x2F;     break\n\n&#x2F;&#x2F;   case 值2:\n&#x2F;&#x2F;     代碼2\n&#x2F;&#x2F;     break\n&#x2F;&#x2F;   ...\n&#x2F;&#x2F;   default:\n&#x2F;&#x2F;     代碼n\n&#x2F;&#x2F; &#125;\n\n&lt;script&gt;\n  switch (2) &#123;\n    case 1:\n    console.log(&#39;您選擇的是1&#39;)\n    break  &#x2F;&#x2F; 退出switch\n    case 2:\n    console.log(&#39;您選擇的是2&#39;)\n    break  &#x2F;&#x2F; 退出switch\n    case 3:\n    console.log(&#39;您選擇的是3&#39;)\n    break  &#x2F;&#x2F; 退出switch\n    default:\n    console.log(&#39;沒有符合條件的&#39;)\n  &#125;\n&lt;&#x2F;script&gt;\n\n中斷點調試作用：學習時可以幫助更好的理解代碼運行，工作時可以更快找到bug\n流覽器打開調試介面\n\n按F12打開開發者工具\n點到原始程式碼一欄 （ sources ）\n選擇代碼檔\n\n中斷點：在某句代碼上加的標記就叫中斷點，當程式執行到這句有標記的代碼時會暫停下來\n迴圈語句使用場景：重複執行 指定的一段代碼，比如我們想要輸出10次 ‘我學的很棒’\n學習路徑：\n1.while迴圈\n2.for 迴圈（重點）\nwhile迴圈while :  在…. 期間， 所以 while迴圈 就是在滿足條件期間，重複執行某些代碼。\n語法：\nwhile (條件運算式) &#123;\n   &#x2F;&#x2F; 循環體    \n&#125;\n\n例如：\n&#x2F;&#x2F; while迴圈: 重複執行代碼\n\n&#x2F;&#x2F; 1. 需求: 利用迴圈重複列印3次 &#39;月薪過萬不是夢，畢業時候見英雄&#39;\nlet i &#x3D; 1\nwhile (i &lt;&#x3D; 3) &#123;\n  document.write(&#39;月薪過萬不是夢，畢業時候見英雄~&lt;br&gt;&#39;)\n  i++   &#x2F;&#x2F; 這裡千萬不要忘了變數自增否則造成閉環\n&#125;\n\n迴圈三要素：\n1.初始值 （經常用變數）\n2.終止條件\n3.變數的變化量\n例如：\n&lt;script&gt;\n  &#x2F;&#x2F; &#x2F;&#x2F; 1. 變數的起始值\n  &#x2F;&#x2F; let i &#x3D; 1\n  &#x2F;&#x2F; &#x2F;&#x2F; 2. 終止條件\n  &#x2F;&#x2F; while (i &lt;&#x3D; 3) &#123;\n  &#x2F;&#x2F;   document.write(&#39;我要迴圈三次 &lt;br&gt;&#39;)\n  &#x2F;&#x2F;   &#x2F;&#x2F; 3. 變數的變化量\n  &#x2F;&#x2F;   i++\n  &#x2F;&#x2F; &#125;\n  &#x2F;&#x2F; 1. 變數的起始值\n  let end &#x3D; +prompt(&#39;請輸入次數:&#39;)\nlet i &#x3D; 1\n&#x2F;&#x2F; 2. 終止條件\nwhile (i &lt;&#x3D; end) &#123;\n  document.write(&#39;我要迴圈三次 &lt;br&gt;&#39;)\n  &#x2F;&#x2F; 3. 變數的變化量\n  i++\n&#125;\n\n&lt;&#x2F;script&gt;\n\n中止迴圈break   中止整個迴圈，一般用於結果已經得到, 後續的迴圈不需要的時候可以使用（提高效率）  \ncontinue  中止本次迴圈，一般用於排除或者跳過某一個選項的時候\n&lt;script&gt;\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; while (i &lt;&#x3D; 5) &#123;\n    &#x2F;&#x2F;   console.log(i)\n    &#x2F;&#x2F;   if (i &#x3D;&#x3D;&#x3D; 3) &#123;\n    &#x2F;&#x2F;     break  &#x2F;&#x2F; 退出迴圈\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F;   i++\n\n    &#x2F;&#x2F; &#125;\n\n    let i &#x3D; 1\n    while (i &lt;&#x3D; 5) &#123;\n      if (i &#x3D;&#x3D;&#x3D; 3) &#123;\n        i++\n        continue\n      &#125;\n      console.log(i)\n      i++\n\n    &#125;\n  &lt;&#x2F;script&gt;\n\n無限迴圈1.while(true) 來構造“無限”迴圈，需要使用break退出迴圈。（常用）\n2.for(;;) 也可以來構造“無限”迴圈，同樣需要使用break退出迴圈。\n&#x2F;&#x2F; 無限迴圈  \n&#x2F;&#x2F; 需求： 頁面會一直彈窗詢問你愛我嗎？\n&#x2F;&#x2F; (1). 如果用戶輸入的是 &#39;愛&#39;，則退出彈窗\n&#x2F;&#x2F; (2). 否則一直彈窗詢問\n\n&#x2F;&#x2F; 1. while(true) 無限迴圈\n&#x2F;&#x2F; while (true) &#123;\n&#x2F;&#x2F;   let love &#x3D; prompt(&#39;你愛我嗎?&#39;)\n&#x2F;&#x2F;   if (love &#x3D;&#x3D;&#x3D; &#39;愛&#39;) &#123;\n&#x2F;&#x2F;     break\n&#x2F;&#x2F;   &#125;\n&#x2F;&#x2F; &#125;\n\n&#x2F;&#x2F; 2. for(;;) 無限迴圈\nfor (; ;) &#123;\n  let love &#x3D; prompt(&#39;你愛我嗎?&#39;)\n  if (love &#x3D;&#x3D;&#x3D; &#39;愛&#39;) &#123;\n    break\n  &#125;\n&#125;\n\n綜合案例-ATM存取款機\n分析：\n①：提示輸入框寫到迴圈裡面（無限迴圈）\n②：用戶輸入4則退出迴圈 break\n③：提前準備一個金額預先存儲一個數額 money\n④：根據輸入不同的值，做不同的操作\n (1)  取錢則是減法操作， 存錢則是加法操作，查看餘額則是直接顯示金額\n\n (2) 可以使用 if else if 多分支 來執行不同的操作\n\n完整代碼：\n&lt;script&gt;\n  &#x2F;&#x2F; 1. 開始迴圈 輸入框寫到 迴圈裡面\n  &#x2F;&#x2F; 3. 準備一個總的金額\n  let money &#x3D; 100\nwhile (true) &#123;\n  let re &#x3D; +prompt(&#96;\n請您選擇操作：\n1.存錢\n2.取錢\n3.查看餘額\n4.退出\n&#96;)\n  &#x2F;&#x2F; 2. 如果用戶輸入的 4 則退出迴圈， break  寫到if 裡面，沒有寫到switch裡面， 因為4需要break退出迴圈\n  if (re &#x3D;&#x3D;&#x3D; 4) &#123;\n    break\n  &#125;\n  &#x2F;&#x2F; 4. 根據輸入做操作\n  switch (re) &#123;\n    case 1:\n      &#x2F;&#x2F; 存錢\n      let cun &#x3D; +prompt(&#39;請輸入存款金額&#39;)\n      money &#x3D; money + cun\n      break\n      case 2:\n      &#x2F;&#x2F; 存錢\n      let qu &#x3D; +prompt(&#39;請輸入取款金額&#39;)\n      money &#x3D; money - qu\n      break\n      case 3:\n      &#x2F;&#x2F; 存錢\n      alert(&#96;您的銀行卡餘額是$&#123;money&#125;&#96;)\n      break\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n\n\n\n\n\n\n\n\n\n","slug":"02JavaScript 基礎 - 第2天","date":"2023-03-21T01:02:21.000Z","categories_index":"","tags_index":"","author_index":"Hsu's Blog"},{"id":"1517f5e85f0012c69f183e7960bb5313","title":"JavaScript 基礎- 第1天","content":"\n\n\n\n\n\n\n\n\n瞭解變數、資料類型、運算子等基礎概念，能夠實現資料類型的轉換，結合四則運算體會如何程式設計。\n\n體會現實世界中的事物與電腦的關係\n理解什麼是資料並知道資料的分類\n理解變數存儲資料的“容器”\n掌握常見運算子的使用，瞭解優先順序關係\n知道 JavaScript 資料類型隱式轉換的特徵\n\n介紹\n\n\n\n\n\n\n\n\n掌握 JavaScript 的引入方式，初步認識 JavaScript 的作用\n引入方式JavaScript 程式不能獨立運行，它需要被嵌入 HTML 中，然後流覽器才能執行 JavaScript 代碼。通過 script 標籤將 JavaScript 代碼引入到 HTML 中，有兩種方式：\n內部方式通過 script 標籤包裹 JavaScript 代碼\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 內聯形式：通過 script 標籤包裹 JavaScript 代碼 --&gt;\n  &lt;script&gt;\n    alert(&#39;嗨，歡迎學習前端技術！&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n外部形式一般將 JavaScript 代碼寫在獨立的以 .js 結尾的檔中，然後通過 script 標籤的 src 屬性引入\n&#x2F;&#x2F; demo.js\ndocument.write(&#39;嗨，歡迎來學習前端技術！&#39;)\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 外部形式：通過 script 的 src 屬性引入獨立的 .js 文件 --&gt;\n  &lt;script src&#x3D;&quot;demo.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n如果 script 標籤使用 src 屬性引入了某 .js 檔，那麼 標籤的代碼會被忽略！！！如下代碼所示：\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 外部形式：通過 script 的 src 屬性引入獨立的 .js 文件 --&gt;\n  &lt;script src&#x3D;&quot;demo.js&quot;&gt;\n    &#x2F;&#x2F; 此處的代碼會被忽略掉！！！！\n    alert(666);  \n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注釋和結束符通過注釋可以遮罩代碼被執行或者添加備註資訊，JavaScript 支援兩種形式注釋語法：\n單行注釋使用 //  注釋單行代碼\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 注釋&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt;\n    &#x2F;&#x2F; 這種是單行注釋的語法\n    &#x2F;&#x2F; 一次只能注釋一行\n    &#x2F;&#x2F; 可以重複注釋\n    document.write(&#39;嗨，歡迎來傳智播學習前端技術！&#39;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n多行注釋使用 /* */ 注釋多行代碼\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 注釋&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt;\n    &#x2F;* 這種的是多行注釋的語法 *&#x2F;\n    &#x2F;*\n      更常見的多行注釋是這種寫法\n      在些可以任意換行\n      多少行都可以\n      *&#x2F;\n    document.write(&#39;嗨，歡迎來學習前端技術！&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注：編輯器中單行注釋的快速鍵為 ctrl + /\n結束符在 JavaScript 中 ; 代表一段代碼的結束，多數情況下可以省略 ; 使用回車（enter）替代。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 結束符&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    alert(1);\n    alert(2);\n    alert(1)\n    alert(2)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n實際開發中有許多人主張書寫 JavaScript 代碼時省略結束符 ;\n輸入和輸出輸出和輸入也可理解為人和電腦的交互，使用者通過鍵盤、滑鼠等向電腦輸入資訊，電腦處理後再展示結果給用戶，這便是一次輸入和輸出的過程。\n舉例說明：如按鍵盤上的方向鍵，向上&#x2F;下鍵可以滾動頁面，按向上&#x2F;下鍵這個動作叫作輸入，頁面發生了滾動了這便叫輸出。\n輸出JavaScript 可以接收用戶的輸入，然後再將輸入的結果輸出：\nalert()、document.wirte()\n以數字為例，向 alert() 或 document.write()輸入任意數位，他都會以彈窗形式展示（輸出）給用戶。\n輸入向 prompt() 輸入任意內容會以彈窗形式出現在流覽器中，一般提示使用者輸入一些內容。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 輸入輸出&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 1. 輸入的任意數位，都會以彈窗形式展示\n    document.write(&#39;要輸出的內容&#39;)\n    alert(&#39;要輸出的內容&#39;);\n\n    &#x2F;&#x2F; 2. 以彈窗形式提示用戶輸入姓名，注意這裡的文字使用英文的引號\n    prompt(&#39;請輸入您的姓名:&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n變數\n\n\n\n\n\n\n\n\n理解變數是電腦存儲資料的“容器”，掌握變數的聲明方式\n變數是電腦中用來存儲資料的“容器”，它可以讓電腦變得有記憶，通俗的理解變數就是使用【某個符號】來代表【某個具體的數值】（資料）\n&lt;script&gt;\n  &#x2F;&#x2F; x 符號代表了 5 這個數值\n  x &#x3D; 5\n  &#x2F;&#x2F; y 符號代表了 6 這個數值\n  y &#x3D; 6\n    \n  &#x2F;&#x2F;舉例： 在 JavaScript 中使用變數可以將某個資料（數值）記錄下來！\n\n  &#x2F;&#x2F; 將使用者輸入的內容保存在 num 這個變數（容器）中\n  num &#x3D; prompt(&#39;請輸入一數位!&#39;)\n\n  &#x2F;&#x2F; 通過 num 變數（容器）將使用者輸入的內容輸出出來\n  alert(num)\n  document.write(num)\n&lt;&#x2F;script&gt;\n\n聲明聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 聲明和賦值&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; let 變數名\n    &#x2F;&#x2F; 聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）\n    &#x2F;&#x2F; let 即關鍵字，所謂關鍵字是系統提供的專門用來聲明（定義）變數的詞語\n    &#x2F;&#x2F; age 即變數的名稱，也叫識別字\n    let age\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n關鍵字是 JavaScript 中內置的一些英文詞彙（單詞或縮寫），它們代表某些特定的含義，如 let 的含義是聲明變數的，看到 let  後就可想到這行代碼的意思是在聲明變數，如 let age; \nlet 和 var 都是 JavaScript 中的聲明變數的關鍵字，推薦使用 let 聲明變數！！！\n賦值聲明（定義）變數相當於創造了一個空的“容器”，通過賦值向這個容器中添加資料。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 聲明和賦值&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）\n    &#x2F;&#x2F; let 即關鍵字，所謂關鍵字是系統提供的專門用來聲明（定義）變數的詞語\n    &#x2F;&#x2F; age 即變數的名稱，也叫識別字\n    let age\n    &#x2F;&#x2F; 賦值，將 18 這個資料存入了 age 這個“容器”中\n    age &#x3D; 18\n    &#x2F;&#x2F; 這樣 age 的值就成了 18\n    document.write(age)\n    \n    &#x2F;&#x2F; 也可以聲明和賦值同時進行\n    let str &#x3D; &#39;hello world!&#39;\n    alert(str);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n關鍵字JavaScript 使用專門的關鍵字 let 和 var 來聲明（定義）變數，在使用時需要注意一些細節：\n以下是使用 let 時的注意事項：\n\n允許聲明和賦值同時進行\n不允許重複聲明\n允許同時聲明多個變數並賦值\nJavaScript 中內置的一些關鍵字不能被當做變數名\n\n以下是使用 var 時的注意事項：\n\n允許聲明和賦值同時進行\n允許重複聲明\n允許同時聲明多個變數並賦值\n\n大部分情況使用 let 和 var 區別不大，但是 let 相較 var 更嚴謹，因此推薦使用 let，後期會更進一步介紹二者間的區別。\n變數名命名規則關於變數的名稱（識別字）有一系列的規則需要遵守：\n\n只能是字母、數位、底線、$，且不能能數字開頭\n字母區分大小寫，如 Age 和 age 是不同的變數\nJavaScript 內部已佔用於單詞（關鍵字或保留字）不允許使用\n儘量保證變數具有一定的語義，見字知義\n\n注：所謂關鍵字是指 JavaScript 內部使用的詞語，如 let 和var，保留字是指 JavaScript 內部目前沒有使用的詞語，但是將來可能會使用詞語。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 變數名命名規則&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    let age &#x3D; 18 &#x2F;&#x2F; 正確\n    let age1 &#x3D; 18 &#x2F;&#x2F; 正確\n    let _age &#x3D; 18 &#x2F;&#x2F; 正確\n\n    &#x2F;&#x2F; let 1age &#x3D; 18; &#x2F;&#x2F; 錯誤，不可以數位開頭\n    let $age &#x3D; 18 &#x2F;&#x2F; 正確\n    let Age &#x3D; 24 &#x2F;&#x2F; 正確，它與小寫的 age 是不同的變數\n    &#x2F;&#x2F; let let &#x3D; 18; &#x2F;&#x2F; 錯誤，let 是關鍵字\n    let int &#x3D; 123 &#x2F;&#x2F; 不推薦，int 是保留字\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n常量概念：使用 const 聲明的變數稱為“常量”。\n使用場景：當某個變數永遠不會改變的時候，就可以使用 const 來聲明，而不是let。\n命名規範：和變數一致\nconst PI &#x3D; 3.14\n\n\n\n\n\n\n\n\n\n\n注意： 常量不允許重新賦值,聲明的時候必須賦值（初始化）\n資料類型\n\n\n\n\n\n\n\n\n電腦世界中的萬事成物都是資料。\n電腦程式可以處理大量的資料，為了方便資料的管理，將資料分成了不同的類型：\n注：通過 typeof 關鍵字檢測資料類型\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 檢測 1 是什麼類型資料，結果為 number\n    document.write(typeof 1)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n數數值型別即我們數學中學習到的數位，可以是整數、小數、正數、負數\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    let score &#x3D; 100 &#x2F;&#x2F; 正整數\n    let price &#x3D; 12.345 &#x2F;&#x2F; 小數\n    let temperature &#x3D; -40 &#x2F;&#x2F; 負數\n\n    document.write(typeof score) &#x2F;&#x2F; 結果為 number\n    document.write(typeof price) &#x2F;&#x2F; 結果為 number\n    document.write(typeof temperature) &#x2F;&#x2F; 結果為 number\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\nJavaScript 中的數數值型別與數學中的數字是一樣的，分為正數、負數、小數等。\n字串類型通過單引號（ &#39;&#39;） 、雙引號（ &quot;&quot;）或反引號包裹的資料都叫字串，單引號和雙引號沒有本質上的區別，推薦使用單引號。\n注意事項：\n\n無論單引號或是雙引號必須成對使用\n單引號&#x2F;雙引號可以互相嵌套，但是不以自已嵌套自已\n必要時可以使用轉義符 \\，輸出單引號或雙引號\n\n*範本字串-使用場景-拼接字串和變數、在沒有它之前，要拼接變數比較麻煩-語法    Ø &#96;&#96; (反引號)    Ø 在英文輸入模式下按鍵盤的tab鍵上方那個鍵（1左邊那個鍵）    Ø 內容拼接變數時，用 ${ } 包住變數\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    let user_name &#x3D; &#39;小明&#39; &#x2F;&#x2F; 使用單引號\n    let gender &#x3D; &quot;男&quot; &#x2F;&#x2F; 使用雙引號\n    let str &#x3D; &#39;123&#39; &#x2F;&#x2F; 看上去是數字，但是用引號包裹了就成了字串了\n    let str1 &#x3D; &#39;&#39; &#x2F;&#x2F; 這種情況叫空字串\n    \n    documeent.write(typeof user_name) &#x2F;&#x2F; 結果為 string\n    documeent.write(typeof gender) &#x2F;&#x2F; 結果為 string\n    documeent.write(typeof str) &#x2F;&#x2F; 結果為 string\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n布林類型表示肯定或否定時在電腦中對應的是布林類型資料，它有兩個固定的值 true 和 false，表示肯定的資料用 true，表示否定的資料用 false。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F;  pink老師帥不帥？回答 是 或 否\n    let isCool &#x3D; true &#x2F;&#x2F; 是的，摔死了！\n    isCool &#x3D; false &#x2F;&#x2F; 不，套馬杆的漢子！\n\n    document.write(typeof isCool) &#x2F;&#x2F; 結果為 boolean\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\nundefined未定義是比較特殊的類型，只有一個值 undefined，只聲明變數，不賦值的情況下，變數的預設值為 undefined，一般很少【直接】為某個變數賦值為 undefined。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 只聲明了變數，並末賦值\n    let tmp;\n    document.write(typeof tmp) &#x2F;&#x2F; 結果為 undefined\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注：JavaScript 中變數的值決定了變數的資料類型。\n類型轉換\n\n\n\n\n\n\n\n\n理解弱類型語言的特徵，掌握顯式類型轉換的方法\n在 JavaScript 中資料被分成了不同的類型，如數值、字串、布林值、undefined，在實際程式設計的過程中，不同資料類型之間存在著轉換的關係。\n隱式轉換某些運算子被執行時，系統內部自動將資料類型進行轉換，這種轉換稱為隱式轉換。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 隱式轉換&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;script&gt; \n    let num &#x3D; 13 &#x2F;&#x2F; 數值\n    let num2 &#x3D; &#39;2&#39; &#x2F;&#x2F; 字串\n\n    &#x2F;&#x2F; 結果為 132\n    &#x2F;&#x2F; 原因是將數值 num 轉換成了字串，相當於 &#39;13&#39;\n    &#x2F;&#x2F; 然後 + 將兩個字串拼接到了一起\n    console.log(num + num2)\n\n    &#x2F;&#x2F; 結果為 11\n    &#x2F;&#x2F; 原因是將字串 num2 轉換成了數值，相當於 2\n    &#x2F;&#x2F; 然後數值 13 減去 數值 2\n    console.log(num - num2)\n\n    let a &#x3D; prompt(&#39;請輸入一個數字&#39;)\n    let b &#x3D; prompt(&#39;請再輸入一個數字&#39;)\n\n    alert(a + b);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注：資料類型的隱式轉換是 JavaScript 的特徵，後續學習中還會遇到，目前先需要理解什麼是隱式轉換。\n補充介紹範本字串的拼接的使用\n顯式轉換編寫程式時過度依靠系統內部的隱式轉換是不嚴禁的，因為隱式轉換規律並不清晰，大多是靠經驗總結的規律。為了避免因隱式轉換帶來的問題，通常根邏輯需要對資料進行顯示轉換。\nNumber通過 Number 顯示轉換成數值類型，當轉換失敗時結果為 NaN（Not a Number）即不是一個數字。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 隱式轉換&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;script&gt;\n    let t &#x3D; &#39;12&#39;\n    let f &#x3D; 8\n\n    &#x2F;&#x2F; 顯式將字串 12 轉換成數值 12\n    t &#x3D; Number(t)\n\n    &#x2F;&#x2F; 檢測轉換後的類型\n    &#x2F;&#x2F; console.log(typeof t);\n    console.log(t + f) &#x2F;&#x2F; 結果為 20\n\n    &#x2F;&#x2F; 並不是所有的值都可以被轉成數值類型\n    let str &#x3D; &#39;hello&#39;\n    &#x2F;&#x2F; 將 hello 轉成數值是不現實的，當無法轉換成\n    &#x2F;&#x2F; 數值時，得到的結果為 NaN （Not a Number）\n    console.log(Number(str))\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n","slug":"01JavaScript 基礎- 第1天","date":"2023-03-20T14:31:39.724Z","categories_index":"","tags_index":"","author_index":"Hsu's Blog"},{"id":"71434f06eb628cf7a92f4f3d96cc0406","title":"前端之路","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"00hello-world","date":"2023-03-20T13:36:33.800Z","categories_index":"","tags_index":"","author_index":"Hsu's Blog"}]