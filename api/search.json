[{"id":"866ec5a135e50f1f3d3c59488d09d968","title":"JavaScript 基礎 - 第5天","content":"\n\n\n\n\n\n\n\n\n知道物件資料類型的特徵，能夠利用陣列物件渲染頁面\n\n理解什麼是物件，掌握定義物件的語法\n掌握數學物件的使用\n\n對象\n\n\n\n\n\n\n\n\n物件為無序的資料的集合，是 JavaScript 資料類型的一種，之前已經學習了數數值型別、字串類型、布林類型、undefined。物件資料類型可以被理解成是一種資料集合。它由屬性和方法兩部分構成。\n語法聲明一個物件類型的變數與之前聲明一個數值或字串類型的變數沒有本質上的區別。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 物件語法&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n  &lt;script&gt;\n    &#x2F;&#x2F; 聲明字串類型變數\n    let str &#x3D; &#39;hello world!&#39;\n    \n    &#x2F;&#x2F; 聲明數數值型別變數\n    let num &#x3D; 199\n\n    &#x2F;&#x2F; 聲明物件類型變數，使用一對花括弧\n    &#x2F;&#x2F; user 便是一個物件了，目前它是一個空物件\n    let user &#x3D; &#123;&#125;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n\n\n\n\n\n\n\n物件使用-增刪改查&#x2F;&#x2F;聲明let 對象名 &#x3D; {  uname: ‘ben’,  age: 18,  gender: ‘男’}&#x2F;&#x2F; console.log(ben)\n&#x2F;&#x2F; 改 把性別的女改為男對象名.屬性 &#x3D; ‘男’console.log(對象名)\n  &#x2F;&#x2F; 增 對象名.屬性 &#x3D; ‘足球’console.log(對象名)\n  &#x2F;&#x2F; 刪 (瞭解) delete 對象名.屬性console.log(對象名)\n屬性和訪問資料描述性的資訊稱為屬性，如人的姓名、身高、年齡、性別等，一般是名詞性的。\n\n屬性都是成 對出現的，包括屬性名和值，它們之間使用英文 : 分隔\n多個屬性之間使用英文 , 分隔\n屬性就是依附在物件上的變數\n屬性名可以使用 &quot;&quot; 或 &#39;&#39;，一般情況下省略，除非名稱遇到特殊符號如空格、中橫線等\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 物件語法&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n  &lt;script&gt;\n    &#x2F;&#x2F; 通過物件描述一個人的資料資訊\n    &#x2F;&#x2F; person 是一個物件，它包含了一個屬性 name\n    &#x2F;&#x2F; 屬性都是成對出現的，屬性名 和 值，它們之間使用英文 : 分隔\n    let person &#x3D; &#123;\n      name: &#39;小明&#39;, &#x2F;&#x2F; 描述人的姓名\n      age: 18, &#x2F;&#x2F; 描述人的年齡\n      stature: 185, &#x2F;&#x2F; 描述人的身高\n      gender: &#39;男&#39;, &#x2F;&#x2F; 描述人的性別\n    &#125;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n聲明物件，並添加了若干屬性後，可以使用 . 或 [] 獲得物件中屬性對應的值，我稱之為屬性訪問。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 物件語法&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n  &lt;script&gt;\n    &#x2F;&#x2F; 通過物件描述一個人的資料資訊\n    &#x2F;&#x2F; person 是一個物件，它包含了一個屬性 name\n    &#x2F;&#x2F; 屬性都是成對出現的，屬性名 和 值，它們之間使用英文 : 分隔\n    let person &#x3D; &#123;\n      name: &#39;小明&#39;, &#x2F;&#x2F; 描述人的姓名\n      age: 18, &#x2F;&#x2F; 描述人的年齡\n      stature: 185, &#x2F;&#x2F; 描述人的身高\n      gender: &#39;男&#39;, &#x2F;&#x2F; 描述人的性別\n    &#125;;\n    \n    &#x2F;&#x2F; 訪問人的名字\n    console.log(person.name) &#x2F;&#x2F; 結果為 小明\n    &#x2F;&#x2F; 訪問人性別\n    console.log(person.gender) &#x2F;&#x2F; 結果為 男\n    &#x2F;&#x2F; 訪問人的身高\n    console.log(person[&#39;stature&#39;]) &#x2F;&#x2F; 結果為 185\n   &#x2F;&#x2F; 或者\n    console.log(person.stature) &#x2F;&#x2F; 結果同為 185\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n擴展：也可以動態為物件添加屬性，動態添加與直接定義是一樣的，只是語法上更靈活。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 物件語法&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n  &lt;script&gt;\n    &#x2F;&#x2F; 聲明一個空的物件（沒有任何屬性）\n  let user &#x3D; &#123;&#125;\n    &#x2F;&#x2F; 動態追加屬性\n    user.name &#x3D; &#39;小明&#39;\n    user[&#39;age&#39;] &#x3D; 18\n    \n    &#x2F;&#x2F; 動態添加與直接定義是一樣的，只是語法上更靈活\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n方法和調用資料行為性的資訊稱為方法，如跑步、唱歌等，一般是動詞性的，其本質是函數。\n\n方法是由方法名和函數兩部分構成，它們之間使用 : 分隔\n多個屬性之間使用英文 , 分隔\n方法是依附在物件中的函數\n方法名可以使用 &quot;&quot; 或 &#39;&#39;，一般情況下省略，除非名稱遇到特殊符號如空格、中橫線等\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 物件方法&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n  &lt;script&gt;\n    &#x2F;&#x2F; 方法是依附在物件上的函數\n    let person &#x3D; &#123;\n      name: &#39;小紅&#39;,\n      age: 18,\n      &#x2F;&#x2F; 方法是由方法名和函數兩部分構成，它們之間使用 : 分隔\n      singing: function () &#123;\n        console.log(&#39;兩隻老虎，兩隻老虎，跑的快，跑的快...&#39;)\n      &#125;,\n      run: function () &#123;\n        console.log(&#39;我跑的非常快...&#39;)\n      &#125;\n    &#125;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n聲明物件，並添加了若干方法後，可以使用 . 或 [] 調用物件中函數，我稱之為方法調用。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 物件方法&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n  &lt;script&gt;\n    &#x2F;&#x2F; 方法是依附在物件上的函數\n    let person &#x3D; &#123;\n      name: &#39;小紅&#39;,\n      age: 18,\n      &#x2F;&#x2F; 方法是由方法名和函數兩部分構成，它們之間使用 : 分隔\n      singing: function () &#123;\n        console.log(&#39;兩隻老虎，兩隻老虎，跑的快，跑的快...&#39;)\n      &#125;,\n      run: function () &#123;\n        console.log(&#39;我跑的非常快...&#39;)\n      &#125;\n    &#125;\n    \n    &#x2F;&#x2F; 調用物件中 singing 方法\n    person.singing()\n    &#x2F;&#x2F; 調用物件中的 run 方法\n    person.run()\n\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n擴展：也可以動態為物件添加方法，動態添加與直接定義是一樣的，只是語法上更靈活。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 物件方法&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n  &lt;script&gt;\n    &#x2F;&#x2F; 聲明一個空的物件（沒有任何屬性，也沒有任何方法）\n  let user &#x3D; &#123;&#125;\n    &#x2F;&#x2F; 動態追加屬性\n    user.name &#x3D; &#39;小明&#39;\n    user.[&#39;age&#39;] &#x3D; 18\n    \n    &#x2F;&#x2F; 動態添加方法\n    user.move &#x3D; function () &#123;\n      console.log(&#39;移動一點距離...&#39;)\n    &#125;\n    \n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注：無論是屬性或是方法，同一個物件中出現名稱一樣的，後面的會覆蓋前面的。\nnullnull 也是 JavaScript 中資料類型的一種，通常只用它來表示不存在的物件。使用 typeof 檢測類型它的類型時，結果為 object。\n遍歷對象\n\n\n\n\n\n\n\n\n目標：能夠遍歷輸出物件裡面的元素for 遍歷物件的問題：Ø 物件沒有像陣列一樣的length屬性,所以無法確定長度Ø 物件裡面是無序的鍵值對, 沒有規律. 不像陣列裡面有規律的下標\nlet obj &#x3D; &#123;\n    uname: &#39;pink&#39;\n&#125;\nfor(let k in obj) &#123;\n    &#x2F;&#x2F; k 屬性名  字串  帶引號    obj.&#39;uname&#39;     k &#x3D;&#x3D;&#x3D;  &#39;uname&#39;\n    &#x2F;&#x2F; obj[k]  屬性值    obj[&#39;uname&#39;]   obj[k]\n&#125;\n\n\n\n\n\n\n\n\n\n\nfor in 不提倡遍歷陣列 因為 k 是 字串for in語法中的 k 是一個變數, 在迴圈的過程中依次代表物件的屬性名由於 k 是變數, 所以必須使用 [ ] 語法解析一定記住： k 是獲得物件的屬性名， 物件名[k] 是獲得 屬性值\n內置對象回想一下我們曾經使用過的 console.log，console其實就是 JavaScript 中內置的物件，該物件中存在一個方法叫 log，然後調用 log 這個方法，即 console.log()。\n除了 console 物件外，JavaScritp 還有其它的內置的物件\nMathMath 是 JavaScript 中內置的物件，稱為數學物件，這個物件下即包含了屬性，也包含了許多的方法。\n屬性\nMath.PI，獲取圓周率\n\n&#x2F;&#x2F; 圓周率\nconsole.log(Math.PI);\n\n方法\nMath.random，生成 0 到 1 間的亂數\n\n&#x2F;&#x2F; 0 ~ 1 之間的亂數, 包含 0 不包含 1\nMath.random()\n\n\nMath.ceil，數字向上取整\n\n&#x2F;&#x2F; 捨棄小數部分，整數部分加1\nMath.ceil(3.4)\n\n\nMath.floor，數字向下取整\n\n&#x2F;&#x2F; 捨棄小數部分，整數部分不變\nMath.floor(4.68)\n\n\nMath.round，四捨五入取整\n\n&#x2F;&#x2F; 取整，四捨五入原則\nMath.round(5.46539)\nMath.round(4.849)\n\n\nMath.max，在一組數中找出最大的\n\n&#x2F;&#x2F; 找出最大值\nMath.max(10, 21, 7, 24, 13)\n\n\nMath.min，在一組數中找出最小的\n\n&#x2F;&#x2F; 找出最小值\nMath.min(24, 18, 6, 19, 21)\n\n\nMath.pow，冪方法\n\n&#x2F;&#x2F; 求某個數的多少次方\nMath.pow(4, 2) &#x2F;&#x2F; 求 4 的 2 次方\nMath.pow(2, 3) &#x2F;&#x2F; 求 2 的 3 次方\n\n\nMath.sqrt，平方根\n\n&#x2F;&#x2F; 求某數的平方根\nMath.sqrt(16)\n\n數學物件提供了比較多的方法，這裡不要求強記，通過演示數學物件的使用，加深對物件的理解。拓展- 基底資料型別和引用資料類型\n\n\n\n術語\n解釋\n舉例\n\n\n\n關鍵字\n在JavaScript中有特殊意義的詞彙\nlet、var、function、if、else、switch、case、break\n\n\n保留字\n在目前的JavaScript中沒意義，但未來可能會具有特殊意義的詞彙\nint、short、long、char\n\n\n標識（識別字）\n變數名、函數名的另一種叫法\n無\n\n\n運算式\n能產生值的代碼，一般配合運算子出現\n10 + 3、age &gt;&#x3D; 18\n\n\n語句\n一段可執行的代碼\nIf () for()\n\n\n目標：瞭解基底資料型別和引用資料類型的存儲方式簡單類型又叫做基底資料型別或者數值型別，複雜類型又叫做參考類型。\n\n\n\n\n\n\n\n\n\n數值型別：單一資料型別&#x2F;基底資料型別，在存儲時變數中存儲的是值本身，因此叫做數值型別string ，number，boolean，undefined，null\n\n\n\n\n\n\n\n\n\n參考類型：複雜資料類型，在存儲時變數中存儲的僅僅是位址（引用），因此叫做引用資料類型通過 new 關鍵字創建的物件（系統物件、自訂物件），如 Object、Array、Date等\n","slug":"05JavaScript 基礎 - 第5天","date":"2023-03-21T16:00:00.000Z","categories_index":"","tags_index":"javaScript","author_index":"Hsu's Blog"},{"id":"eddf66a4e61c3de8ab537ceecfc30415","title":"JavaScript 基礎 - 第4天","content":"\n\n\n\n\n\n\n\n\n理解封裝的意義，能夠通過函數的聲明實現邏輯的封裝，知道物件資料類型的特徵，結合數學物件實現簡單計算功能。\n\n理解函數的封裝的特徵\n掌握函式宣告的語法\n理解什麼是函數的返回值\n知道並能使用常見的內置函數\n\n函數\n\n\n\n\n\n\n\n\n-理解函數的封裝特性，掌握函數的語法規則-function，是被設計為執行特定任務的代碼塊\n聲明和調用函數可以把具有相同或相似邏輯的代碼“包裹”起來，通過函式呼叫執行這些被“包裹”的代碼邏輯，這麼做的優勢是有利於精簡代碼方便複用。\n聲明（定義）\n\n\n\n\n\n\n\n\n聲明（定義）一個完整函數包括關鍵字(function)、函數名、形式參數、函數體、返回值5個部分\nfunction 函數名(形式參數)&#123;\n  函數體\n  (返回值)\n&#125;\n\n調用聲明（定義）的函數必須調用才會真正被執行，使用 () 調用函數。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 聲明和調用&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 聲明（定義）了最簡單的函數，既沒有形式參數，也沒有返回值\n    function sayHi() &#123;\n      console.log(&#39;嗨~&#39;)\n    &#125;\n    &#x2F;&#x2F; 函式呼叫，這些函數體內的代碼邏輯會被執行\n    &#x2F;&#x2F; 函數名()\n        \n    sayHi()\n    &#x2F;&#x2F; 可以重複被調用，多少次都可以\n    sayHi()\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n\n\n\n\n\n\n\n\n注：函數名的命名規則與變數是一致的，並且儘量保證函數名的語義。\n小案例： 小星星\n&lt;script&gt;\n        &#x2F;&#x2F; 函式宣告\n        function sayHi() &#123;\n            &#x2F;&#x2F; document.write(&#39;hai~&#39;)\n            document.write(&#96;*&lt;br&gt;&#96;)\n            document.write(&#96;**&lt;br&gt;&#96;)\n            document.write(&#96;***&lt;br&gt;&#96;)\n            document.write(&#96;****&lt;br&gt;&#96;)\n            document.write(&#96;*****&lt;br&gt;&#96;)\n            document.write(&#96;******&lt;br&gt;&#96;)\n            document.write(&#96;*******&lt;br&gt;&#96;)\n            document.write(&#96;********&lt;br&gt;&#96;)\n            document.write(&#96;*********&lt;br&gt;&#96;)\n        &#125;\n        &#x2F;&#x2F; 函式呼叫\n        sayHi()\n        sayHi()\n        sayHi()\n        sayHi()\n        sayHi()\n    &lt;&#x2F;script&gt;\n\n參數通過向函數傳遞參數，可以讓函數更加靈活多變，參數可以理解成是一個變數。\n聲明（定義）一個功能為打招呼的函數\n\n傳入數據清單\n聲明這個函數需要傳入幾個資料\n多個資料用逗號隔開\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 函數參數&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n  &lt;script&gt;\n    &#x2F;&#x2F; 聲明（定義）一個功能為打招呼的函數\n    &#x2F;&#x2F; function sayHi() &#123;\n    &#x2F;&#x2F;   console.log(&#39;嗨~&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; 調用函數\n    &#x2F;&#x2F; sayHi()\n  \n\n    &#x2F;&#x2F; 這個函數似乎沒有什麼價值，除非能夠向不同的人打招呼\n    &#x2F;&#x2F; 這就需要借助參數來實現了\n    function sayHi(name) &#123;\n      &#x2F;&#x2F; 參數 name 可以被理解成是一個變數\n      console.log(name)\n      console.log(&#39;嗨~&#39; + name)\n    &#125;\n\n    &#x2F;&#x2F; 調用 sayHi 函數，括弧中多了 &#39;小明&#39;\n    &#x2F;&#x2F; 這時相當於為參數 name 賦值了\n    sayHi(&#39;小明&#39;)&#x2F;&#x2F; 結果為 小明\n\n    &#x2F;&#x2F; 再次調用 sayHi 函數，括弧中多了 &#39;小紅&#39;\n    &#x2F;&#x2F; 這時相當於為參數 name 賦值了\n    sayHi(&#39;小紅&#39;) &#x2F;&#x2F; 結果為 小紅\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n總結：\n\n聲明（定義）函數時的形參沒有數量限制，當有多個形參時使用 , 分隔\n調用函數傳遞的實參要與形參的順序一致\n\n形參和實參形參：聲明函數時寫在函數名右邊小括弧裡的叫形參（形式上的參數）\n實參：調用函數時寫在函數名右邊小括弧裡的叫實參（實際上的參數）\n形參可以理解為是在這個函數內聲明的變數（比如 num1 &#x3D; 10）實參可以理解為是給這個變數賦值\n開發中儘量保持形參和實參個數一致\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 函數參數&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 聲明（定義）一個計算任意兩數位和的函數\n    &#x2F;&#x2F; 形參 x 和 y 分別表示任意兩個數字，它們是兩個變數\n    function count(x, y) &#123;\n      console.log(x + y);\n    &#125;\n    &#x2F;&#x2F; 調用函數，傳入兩個具體的數字做為實參\n    &#x2F;&#x2F; 此時 10 賦值給了形參 x\n    &#x2F;&#x2F; 此時 5  賦值給了形參 y\n    count(10, 5); &#x2F;&#x2F; 結果為 15\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n返回值函數的本質是封裝（包裹），函數體內的邏輯執行完畢後，函數外部如何獲得函數內部的執行結果呢？要想獲得函數內部邏輯的執行結果，需要通過 return 這個關鍵字，將內部執行結果傳遞到函數外部，這個被傳遞到外部的結果就是返回值。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 函數返回值&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n  &lt;script&gt;\n    &#x2F;&#x2F; 定義求和函數\n    function count(a, b) &#123;\n      let s &#x3D; a + b\n      &#x2F;&#x2F; s 即為 a + b 的結果\n      &#x2F;&#x2F; 通過 return 將 s 傳遞到外部\n      return s\n    &#125;\n\n    &#x2F;&#x2F; 調用函數，如果一個函數有返回值\n    &#x2F;&#x2F; 那麼可將這個返回值賦值給外部的任意變數\n    let total &#x3D; count(5, 12)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n總結：\n\n在函數體中使用return 關鍵字能將內部的執行結果交給函數外部使用\n\n函數內部只能出現1 次 return，並且 return 下一行代碼不會再被執行，所以return 後面的資料不要換行寫\n\nreturn會立即結束當前函數\n\n函數可以沒有return，這種情況預設返回值為 undefined\n\n#ˇ數組返回多個變量\n\n\n作用域通常來說，一段程式碼中所用到的名字並不總是有效和可用的，而限定這個名字的可用性的代碼範圍就是這個名字的作用域。\n作用域的使用提高了程式邏輯的局部性，增強了程式的可靠性，減少了名字衝突。\n全域作用域作用於所有代碼執行的環境(整個 script 標籤內部)或者一個獨立的 js 檔\n處於全域作用域內的變數，稱為全域變數\n局部作用域作用於函數內的代碼環境，就是局部作用域。 因為跟函數有關係，所以也稱為函數作用域。\n處於局部作用域內的變數稱為區域變數\n\n\n\n\n\n\n\n\n\n如果函數內部，變數沒有聲明，直接賦值，也當全域變數看，但是強烈不推薦\n但是有一種情況，函數內部的形參可以看做是區域變數。\n變數的訪問原則\n\n\n\n\n\n\n\n\n只要是代碼，就至少有一個作用域寫在函數內部的局部作用域如果函數中還有函數，那麼在這個作用域中就又可以誕生一個作用域訪問原則：在能夠訪問到的情況下 先局部， 局部沒有在找全域\n匿名函數函數可以分為具名函數和匿名函數\n具名函數function fn(){}\n匿名函數：沒有名字的函數,無法直接使用。function {}\n函數運算式&#x2F;&#x2F; 聲明\nlet fn &#x3D; function() &#123; \n   console.log(&#39;函數運算式&#39;)\n&#125;\n&#x2F;&#x2F; 調用\nfn()\n\n立即執行函數立即執行函數可 防止變數污染\n(function(形參)&#123; xxx  &#125;)(實參);\n(function(形參)&#123;xxxx&#125;(實參));\n\n\n\n\n\n\n\n\n\n\n無需調用，立即執行，其實本質已經調用了\n多個立即執行函數之間用分號隔開\n   在能夠訪問到的情況下 先局部 局部沒有在找全域\n","slug":"04JavaScript 基礎 - 第4天","date":"2023-03-20T16:00:00.000Z","categories_index":"","tags_index":"javaScript","author_index":"Hsu's Blog"},{"id":"d6326a002590bf2cbb1500ce76554880","title":"JavaScript 基礎 - 第3天","content":"if 多分支語句和 switch的區別：\n\n共同點\n\n都能實現多分支選擇， 多選1 \n大部分情況下可以互換\n\n\n區別：\n\nswitch…case語句通常處理case為比較確定值的情況，而if…else…語句更加靈活，通常用於範圍判斷(大於，等於某個範圍)。\nswitch 語句進行判斷後直接執行到程式的語句，效率更高，而if…else語句有幾種判斷條件，就得判斷多少次\nswitch 一定要注意 必須是 &#x3D;&#x3D;&#x3D;  全等，一定注意 資料類型，同時注意break否則會有穿透效果\n結論：\n當分支比較少時，if…else語句執行效率高。\n當分支比較多時，switch語句執行效率高，而且結構更清晰。\n\n\n\n\n\nfor 語句\n\n\n\n\n\n\n\n\n掌握 for 迴圈語句，讓程式具備重複執行能力\nfor 是 JavaScript 提供的另一種迴圈控制的話句，它和 while 只是語法上存在差異。\nfor語句的基本使用\n實現迴圈的 3 要素(起始值; 終止條件; 變化量)\n\n&lt;script&gt;\n  &#x2F;&#x2F; 1. 語法格式\n  &#x2F;&#x2F; for(起始值; 終止條件; 變化量) &#123;\n  &#x2F;&#x2F;   &#x2F;&#x2F; 要重複執行的代碼\n  &#x2F;&#x2F; &#125;\n\n  &#x2F;&#x2F; 2. 示例：在網頁中輸入標題標籤\n  &#x2F;&#x2F; 起始值為 1\n  &#x2F;&#x2F; 變化量 i++\n  &#x2F;&#x2F; 終止條件 i &lt;&#x3D; 6\n  for(let i &#x3D; 1; i &lt;&#x3D; 6; i++) &#123;\n    document.write(&#96;&lt;h$&#123;i&#125;&gt;迴圈控制，即重複執行&lt;h$&#123;i&#125;&gt;&#96;)\n  &#125;\n&lt;&#x2F;script&gt;\n\n\n變化量和閉環，for 迴圈和 while 一樣，如果不合理設置增量和終止條件，便會產生閉環。\n\n跳出和終止迴圈\n\n\n&lt;script&gt;\n    &#x2F;&#x2F; 1. continue \n    for (let i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;\n        if (i &#x3D;&#x3D;&#x3D; 3) &#123;\n            continue  &#x2F;&#x2F; 結束本次迴圈，繼續下一次迴圈\n        &#125;\n        console.log(i)\n    &#125;\n    &#x2F;&#x2F; 2. break\n    for (let i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;\n        if (i &#x3D;&#x3D;&#x3D; 3) &#123;\n            break  &#x2F;&#x2F; 退出結束整個迴圈\n        &#125;\n        console.log(i)\n    &#125;\n&lt;&#x2F;script&gt;\n\n結論：\n\nJavaScript 提供了多種語句來實現迴圈控制，但無論使用哪種語句都離不開迴圈的3個特徵，即起始值、變化量、終止條件，做為初學者應著重體會這3個特徵，不必過多糾結三種語句的區別。\n起始值、變化量、終止條件，由開發者根據邏輯需要進行設計，規避閉環的發生。\n當如果明確了迴圈的次數的時候推薦使用for迴圈,當不明確迴圈的次數的時候推薦使用while迴圈\n\n\n\n\n\n\n\n\n\n\n注意：for 的語法結構更簡潔，故 for 迴圈的使用頻次會更多。\n迴圈嵌套利用迴圈的知識來對比一個簡單的天文知識，我們知道地球在自轉的同時也在圍繞太陽公轉，如果把自轉和公轉都看成是迴圈的話，就相當於是迴圈中又嵌套了另一個迴圈。\nfor(外部聲明紀錄循環次數的變量;循環條件;變化值)&#123;\n  for(內部聲明紀錄循環次數的變量;循環條件;變化值)&#123;\n    循環體\n  &#125;\n&#125;\n\n實際上 JavaScript 中任何一種迴圈語句都支持迴圈的嵌套，如下代碼所示：\n&#x2F;&#x2F; 1. 外面的迴圈 記錄第n天 \nfor (let i &#x3D; 1; i &lt; 4; i++) &#123;\n    document.write(&#96;第$&#123;i&#125;天 &lt;br&gt;&#96;)\n    &#x2F;&#x2F; 2. 裡層的迴圈記錄 幾個單詞\n    for (let j &#x3D; 1; j &lt; 6; j++) &#123;\n        document.write(&#96;記住第$&#123;j&#125;個單詞&lt;br&gt;&#96;)\n    &#125;\n&#125;\n\n記住，外層迴圈迴圈一次，裡層迴圈迴圈全部\n倒三角 &#x2F;&#x2F; 外層列印幾行\nfor (let i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;\n    &#x2F;&#x2F; 裡層列印幾個星星\n    for (let j &#x3D; 1; j &lt;&#x3D; i; j++) &#123;\n        document.write(&#39;★&#39;)\n    &#125;\n    document.write(&#39;&lt;br&gt;&#39;)\n&#125;\n★★★★★★★★★★★★★★★\n九九乘法表樣式css\nspan &#123;\n    display: inline-block;\n    width: 100px;\n    padding: 5px 10px;\n    border: 1px solid pink;\n    margin: 2px;\n    border-radius: 5px;\n    box-shadow: 2px 2px 2px rgba(255, 192, 203, .4);\n    background-color: rgba(255, 192, 203, .1);\n    text-align: center;\n    color: hotpink;\n&#125;\n\njavascript \n &#x2F;&#x2F; 外層列印幾行\nfor (let i &#x3D; 1; i &lt;&#x3D; 9; i++) &#123;\n    &#x2F;&#x2F; 裡層列印幾個星星\n    for (let j &#x3D; 1; j &lt;&#x3D; i; j++) &#123;\n        &#x2F;&#x2F; 只需要吧 ★ 換成  1 x 1 &#x3D; 1   \n        document.write(&#96;\n    &lt;div&gt; $&#123;j&#125; x $&#123;i&#125; &#x3D; $&#123;j * i&#125; &lt;&#x2F;div&gt;\n     &#96;)\n    &#125;\n    document.write(&#39;&lt;br&gt;&#39;)\n&#125;\n\n陣列\n\n\n\n\n\n\n\n\n知道什麼是陣列及其應用的場景，掌握陣列聲明及訪問的語法。\n陣列是什麼？陣列：(Array)是一種可以按順序保存資料的資料類型\n使用場景：如果有多個資料可以用陣列保存起來，然後放到一個變數中，管理非常方便\n陣列的基本使用定義陣列和陣列單元&lt;script&gt;\n  &#x2F;&#x2F; 1. 語法，使用 [] 來定義一個空陣列\n  &#x2F;&#x2F; 定義一個空陣列，然後賦值給變數 classes\n  &#x2F;&#x2F; let classes &#x3D; [];\n\n  &#x2F;&#x2F; 2. 定義非空陣列\n  let classes &#x3D; [&#39;小明&#39;, &#39;小剛&#39;, &#39;小紅&#39;, &#39;小麗&#39;, &#39;小米&#39;]\n&lt;&#x2F;script&gt;\n\n通過 [] 定義陣列，資料中可以存放真正的資料，如小明、小剛、小紅等這些都是陣列中的資料，我們這些資料稱為陣列單元，陣列單元之間使用英文逗號分隔。\n訪問陣列和陣列索引使用陣列存放資料並不是最終目的，關鍵是能夠隨時的訪問到陣列中的資料（單元）。其實 JavaScript 為陣列中的每一個資料單元都編了號，通過資料單元在陣列中的編號便可以輕鬆訪問到陣列中的資料單元了。\n我們將資料單元在陣列中的編號稱為索引值，也有人稱其為下標。\n索引值實際是按著資料單元在陣列中的位置依次排列的，注意是從 0 開始的\n&lt;script&gt;\n  let classes &#x3D; [&#39;小明&#39;, &#39;小剛&#39;, &#39;小紅&#39;, &#39;小麗&#39;, &#39;小米&#39;]\n  \n  &#x2F;&#x2F; 1. 訪問陣列，語法格式為：變數名[索引值]\n  document.write(classes[0]) &#x2F;&#x2F; 結果為：小明\n  document.write(classes[1]) &#x2F;&#x2F; 結果為：小剛\n  document.write(classes[4]) &#x2F;&#x2F; 結果為：小米\n  \n  &#x2F;&#x2F; 2. 通過索引值還可以為陣列單重新賦值\n  document.write(classes[3]) &#x2F;&#x2F; 結果為：小麗\n  &#x2F;&#x2F; 重新為索引值為 3 的單元賦值\n  classes[3] &#x3D; &#39;小小麗&#39;\n  document.wirte(classes[3]); &#x2F;&#x2F; 結果為： 小小麗\n&lt;&#x2F;script&gt;\n\n資料單元數值型別陣列做為資料的集合，它的單元值可以是任意資料類型\n&lt;script&gt;\n  &#x2F;&#x2F; 6. 陣列單數值型別可以是任意資料類型\n\n  &#x2F;&#x2F; a) 陣列單元值的類型為字元類型\n  let list &#x3D; [&#39;HTML&#39;, &#39;CSS&#39;, &#39;JavaScript&#39;]\n  &#x2F;&#x2F; b) 陣列單元值的類型為數值類型\n  let scores &#x3D; [78, 84, 70, 62, 75]\n  &#x2F;&#x2F; c) 混合多種類型\n  let mixin &#x3D; [true, 1, false, &#39;hello&#39;]\n&lt;&#x2F;script&gt;\n\n陣列長度屬性重申一次，陣列在 JavaScript 中並不是新的資料類型，它屬於物件類型。\n&lt;script&gt;\n  &#x2F;&#x2F; 定義一個陣列\n  let arr &#x3D; [&#39;html&#39;, &#39;css&#39;, &#39;javascript&#39;]\n  &#x2F;&#x2F; 陣列對應著一個 length 屬性，它的含義是獲取陣列的長度\n  console.log(arr.length) &#x2F;&#x2F; 3\n&lt;&#x2F;script&gt;\n\n運算元組陣列做為物件資料類型，不但有 length 屬性可以使用，還提供了許多方法：\n\npush 動態向陣列的尾部添加一個單元\nunshit 動態向陣列頭部添加一個單元\npop 刪除最後一個單元\nshift 刪除第一個單元\nsplice 動態刪除任意單元\n\n使用以上4個方法時，都是直接在原陣列上進行操作，即成功調任何一個方法，原陣列都跟著發生相應的改變。並且在添加或刪除單元時 length 並不會發生錯亂。\n&lt;script&gt;\n  &#x2F;&#x2F; 定義一個陣列\n  let arr &#x3D; [&#39;html&#39;, &#39;css&#39;, &#39;javascript&#39;]\n\n  &#x2F;&#x2F; 1. push 動態向陣列的尾部添加一個單元\n  arr.push(&#39;Nodejs&#39;)\n  console.log(arr)\n  arr.push(&#39;Vue&#39;)\n\n  &#x2F;&#x2F; 2. unshit 動態向陣列頭部添加一個單元\n  arr.unshift(&#39;VS Code&#39;)\n  console.log(arr)\n\n  &#x2F;&#x2F; 3. splice 動態刪除任意單元\n  arr.splice(2, 1) &#x2F;&#x2F; 從索引值為2的位置開始刪除1個單元\n  console.log(arr)\n\n  &#x2F;&#x2F; 4. pop 刪除最後一個單元\n  arr.pop()\n  console.log(arr)\n\n  &#x2F;&#x2F; 5. shift 刪除第一個單元\n  arr.shift()\n  console.log(arr)\n&lt;&#x2F;script&gt;\n\n\n","slug":"03JavaScript 基礎 - 第3天","date":"2023-03-19T16:00:00.000Z","categories_index":"","tags_index":"javaScript","author_index":"Hsu's Blog"},{"id":"119b4406e4e9c28d94cef591716ce0ed","title":"JavaScript 基礎 - 第2天","content":"\n\n\n\n\n\n\n\n\n理解什麼是流程控制，知道條件控制的種類並掌握其對應的語法規則，具備利用迴圈編寫簡易ATM取款機程式能力\n\n運算子\n語句\n綜合案例\n\n運算子算術運算子數字是用來計算的，比如：乘法 * 、除法 &#x2F; 、加法 + 、減法 - 等等，所以經常和算術運算子一起。\n算術運算子：也叫數學運算子，主要包括加、減、乘、除、取餘（求模）等\n\n\n\n運算子\n作用\n\n\n\n+\n求和\n\n\n-\n求差\n\n\n*\n求積\n\n\n&#x2F;\n求商\n\n\n%\n取模（取餘數），開發中經常用於作為某個數位是否被整除\n\n\n\n\n\n\n\n\n\n\n\n注意：在計算失敗時，顯示的結果是 NaN （not a number）\n&#x2F;&#x2F; 算術運算子\nconsole.log(1 + 2 * 3 &#x2F; 2) &#x2F;&#x2F;  4 \nlet num &#x3D; 10\nconsole.log(num + 10)  &#x2F;&#x2F; 20\nconsole.log(num + num)  &#x2F;&#x2F; 20\n\n&#x2F;&#x2F; 1. 取模(取餘數)  使用場景：  用來判斷某個數是否能夠被整除\nconsole.log(4 % 2) &#x2F;&#x2F;  0  \nconsole.log(6 % 3) &#x2F;&#x2F;  0\nconsole.log(5 % 3) &#x2F;&#x2F;  2\nconsole.log(3 % 5) &#x2F;&#x2F;  3\n\n&#x2F;&#x2F; 2. 注意事項 : 如果我們計算失敗，則返回的結果是 NaN (not a number)\nconsole.log(&#39;老徐&#39; - 2)\nconsole.log(&#39;老徐&#39; * 2)\nconsole.log(&#39;老徐&#39; + 2)   &#x2F;&#x2F; pink老師2\n\n設定運算子設定運算子：對變數進行賦值的運算子\n &#x3D;     將等號右邊的值賦予給左邊, 要求左邊必須是一個容器\n\n\n\n運算子\n作用\n\n\n\n+&#x3D;\n加法賦值\n\n\n-+\n減法賦值\n\n\n*&#x3D;\n乘法賦值\n\n\n&#x2F;&#x3D;\n除法賦值\n\n\n%&#x3D;\n取餘賦值\n\n\n&lt;script&gt;\nlet num &#x3D; 1\n&#x2F;&#x2F; num &#x3D; num + 1\n&#x2F;&#x2F; 採取設定運算子\n&#x2F;&#x2F; num +&#x3D; 1\nnum +&#x3D; 3\nconsole.log(num)\n&lt;&#x2F;script&gt;\n\n自增&#x2F;自減運算子\n\n\n符號\n作用\n說明\n\n\n\n++\n自增\n變數自身的值加1，例如: x++\n\n\n–\n自減\n變數自身的值減1，例如: x–\n\n\n\n++在前和++在後在單獨使用時二者並沒有差別，而且一般開發中我們都是獨立使用\n++在後（尾碼式）我們會使用更多\n\n\n\n\n\n\n\n\n\n\n注意：\n\n只有變數能夠使用自增和自減運算子\n++、– 可以在變數前面也可以在變數後面，比如: x++  或者  ++x\n\n&lt;script&gt;\n    &#x2F;&#x2F; let num &#x3D; 10\n    &#x2F;&#x2F; num &#x3D; num + 1\n    &#x2F;&#x2F; num +&#x3D; 1\n    &#x2F;&#x2F; &#x2F;&#x2F; 1. 前置自增\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; ++i\n    &#x2F;&#x2F; console.log(i)\n\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; console.log(++i + 1)\n    &#x2F;&#x2F; 2. 後置自增\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; i++\n    &#x2F;&#x2F; console.log(i)\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; console.log(i++ + 1)\n\n    &#x2F;&#x2F; 瞭解 \n    let i &#x3D; 1\n    console.log(i++ + ++i + i)\n  &lt;&#x2F;script&gt;\n\n比較運算子使用場景：比較兩個資料大小、是否相等，根據比較結果返回一個布林值（true &#x2F; false）\n\n\n\n運算子\n作用\n\n\n\n&gt;\n左邊是否大於右邊\n\n\n&lt;\n左邊是否小於右邊\n\n\n&gt;&#x3D;\n左邊是否大於或等於右邊\n\n\n&lt;&#x3D;\n左邊是否小於或等於右邊\n\n\n&#x3D;&#x3D;&#x3D;\n左右兩邊是否類型和值都相等（重點）\n\n\n&#x3D;&#x3D;\n左右兩邊值是否相等\n\n\n!&#x3D;\n左右值不相等\n\n\n!&#x3D;&#x3D;\n左右兩邊是否不全等\n\n\n&lt;script&gt;\n  console.log(3 &gt; 5)\n  console.log(3 &gt;&#x3D; 3)\n  console.log(2 &#x3D;&#x3D; 2)\n  &#x2F;&#x2F; 比較運算子有隱式轉換 把&#39;2&#39; 轉換為 2  雙等號 只判斷值\n  console.log(2 &#x3D;&#x3D; &#39;2&#39;)  &#x2F;&#x2F; true\n  &#x2F;&#x2F; console.log(undefined &#x3D;&#x3D;&#x3D; null)\n  &#x2F;&#x2F; &#x3D;&#x3D;&#x3D; 全等 判斷 值 和 資料類型都一樣才行\n  &#x2F;&#x2F; 以後判斷是否相等 請用 &#x3D;&#x3D;&#x3D;  \n  console.log(2 &#x3D;&#x3D;&#x3D; &#39;2&#39;)\n  console.log(NaN &#x3D;&#x3D;&#x3D; NaN) &#x2F;&#x2F; NaN 不等於任何人，包括他自己\n  console.log(2 !&#x3D;&#x3D; &#39;2&#39;)  &#x2F;&#x2F; true  \n  console.log(2 !&#x3D; &#39;2&#39;) &#x2F;&#x2F; false \n  console.log(&#39;-------------------------&#39;)\n  console.log(&#39;a&#39; &lt; &#39;b&#39;) &#x2F;&#x2F; true\n  console.log(&#39;aa&#39; &lt; &#39;ab&#39;) &#x2F;&#x2F; true\n  console.log(&#39;aa&#39; &lt; &#39;aac&#39;) &#x2F;&#x2F; true\n  console.log(&#39;-------------------------&#39;)\n&lt;&#x2F;script&gt;\n\n邏輯運算子使用場景：可以把多個布林值放到一起運算，最終返回一個布林值\n\n\n\n符號\n名稱\n日常讀法\n特點\n口訣\n\n\n\n&amp;&amp;\n邏輯與\n並且\n符號兩邊有一個假的結果為假\n一假則假\n\n\n||\n邏輯或\n或者\n符號兩邊有一個真的結果為真\n一真則真\n\n\n!\n邏輯非\n取反\ntrue變false  false變true\n真變假，假變真\n\n\n\n\n\nA\nB\nA &amp;&amp; B\nA || B\n!A\n\n\n\nfalse\nfalse\nfalse\nfalse\ntrue\n\n\nfalse\ntrue\nfalse\ntrue\ntrue\n\n\ntrue\nfalse\nfalse\ntrue\nfalse\n\n\ntrue\ntrue\ntrue\ntrue\nfalse\n\n\n&lt;script&gt;\n    &#x2F;&#x2F; 邏輯與 一假則假\n    console.log(true &amp;&amp; true)\n    console.log(false &amp;&amp; true)\n    console.log(3 &lt; 5 &amp;&amp; 3 &gt; 2)\n    console.log(3 &lt; 5 &amp;&amp; 3 &lt; 2)\n    console.log(&#39;-----------------&#39;)\n    &#x2F;&#x2F; 邏輯或 一真則真\n    console.log(true || true)\n    console.log(false || true)\n    console.log(false || false)\n    console.log(&#39;-----------------&#39;)\n    &#x2F;&#x2F; 邏輯非  取反\n    console.log(!true)\n    console.log(!false)\n\n    console.log(&#39;-----------------&#39;)\n\n    let num &#x3D; 6\n    console.log(num &gt; 5 &amp;&amp; num &lt; 10)\n    console.log(&#39;-----------------&#39;)\n  &lt;&#x2F;script&gt;\n\n運算子優先順序\n\n\n\n\n\n\n\n\n邏輯運算子優先順序： ！&gt; &amp;&amp; &gt;  ||  \n語句運算式和語句\n\n\n\n\n\n\n\n\n運算式:可以被求值的代碼計算出一個結果。\n3+4\nnum++\n\n\n\n\n\n\n\n\n\n語句一段可以執行的代碼，是一種行為，例如分支語句和循環語句。\nfor(let i &#x3D; 0; i &lt; 10; i++)&#123;\n  console.log(&#39;我愛程式&#39;)\n&#125;\n\n\n分支語句分支語句可以根據條件判定真假，來選擇性的執行想要的代碼\n分支語句包含：\n\nif分支語句（重點）\n三元運算子\nswitch語句\n\nif 分支語句語法：\nif(條件運算式) &#123;\n  &#x2F;&#x2F; 滿足條件要執行的語句\n&#125;\n\n小括弧內的條件結果是布林值，為 true 時，進入大括弧裡執行代碼；為false，則不執行大括弧裡面代碼\n小括弧內的結果若不是布林類型時，會發生類型轉換為布林值，類似Boolean()\n如果大括弧只有一個語句，大括弧可以省略，但是，俺們不提倡這麼做~\n&lt;script&gt;\n    &#x2F;&#x2F; 單分支語句\n    &#x2F;&#x2F; if (false) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; if (3 &gt; 5) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; if (2 &#x3D;&#x3D;&#x3D; &#39;2&#39;) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F;  1. 除了0 所有的數字都為真\n    &#x2F;&#x2F;   if (0) &#123;\n    &#x2F;&#x2F;     console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F; 2.除了 &#39;&#39; 所有的字串都為真 true\n    &#x2F;&#x2F; if (&#39;老徐&#39;) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; if (&#39;&#39;) &#123;\n    &#x2F;&#x2F;   console.log(&#39;執行語句&#39;)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; &#x2F;&#x2F; if (&#39;&#39;) console.log(&#39;執行語句&#39;)\n\n    &#x2F;&#x2F; 1. 用戶輸入\n    let score &#x3D; +prompt(&#39;請輸入准考證號碼&#39;)\n    &#x2F;&#x2F; 2. 進行判斷輸出\n    if (score &gt;&#x3D; 700) &#123;\n      alert(&#39;恭喜上榜&#39;)\n    &#125;\n    console.log(&#39;-----------------&#39;)\n\n  &lt;&#x2F;script&gt;\n\nif雙分支語句如果有兩個條件的時候，可以使用 if else 雙分支語句\nif (條件運算式)&#123;\n  &#x2F;&#x2F; 滿足條件要執行的語句\n&#125; else &#123;\n  &#x2F;&#x2F; 不滿足條件要執行的語句\n&#125;\n\n例如：\n&lt;script&gt;\n   &#x2F;&#x2F; 1. 用戶輸入\n   let uname &#x3D; prompt(&#39;請輸入用戶名:&#39;)\n   let pwd &#x3D; prompt(&#39;請輸入密碼:&#39;)\n   &#x2F;&#x2F; 2. 判斷輸出\n   if (uname &#x3D;&#x3D;&#x3D; &#39;pink&#39; &amp;&amp; pwd &#x3D;&#x3D;&#x3D; &#39;123456&#39;) &#123;\n     alert(&#39;恭喜登錄成功&#39;)\n   &#125; else &#123;\n     alert(&#39;用戶名或者密碼錯誤&#39;)\n   &#125;\n &lt;&#x2F;script&gt;\n\nif 多分支語句使用場景： 適合於有多個條件的時候\n&lt;script&gt;\n   &#x2F;&#x2F; 1. 用戶輸入\n   let score &#x3D; +prompt(&#39;請輸入成績：&#39;)\n   &#x2F;&#x2F; 2. 判斷輸出\n   if (score &gt;&#x3D; 90) &#123;\n     alert(&#39;成績優秀，boy，你是我的驕傲&#39;)\n   &#125; else if (score &gt;&#x3D; 70) &#123;\n     alert(&#39;成績良好，boy，你要加油哦~~&#39;)\n   &#125; else if (score &gt;&#x3D; 60) &#123;\n     alert(&#39;成績及格，boy，你很危險~&#39;)\n   &#125; else &#123;\n     alert(&#39;成績不及格，boy，我不想和你說話~&#39;)\n   &#125;\n &lt;&#x2F;script&gt;\n\n三元運算子（三元運算式）使用場景： 一些簡單的雙分支，可以使用  三元運算子（三元運算式），寫起來比 if  else雙分支 更簡單\n符號：? 與 : 配合使用\n語法：\n條件 ? 運算式1 ： 運算式2\n\n例如：\n&#x2F;&#x2F; 三元運算子（三元運算式）\n&#x2F;&#x2F; 1. 語法格式\n&#x2F;&#x2F; 條件 ? 運算式1 : 運算式2 \n\n&#x2F;&#x2F; 2. 執行過程 \n&#x2F;&#x2F; 2.1 如果條件為真，則執行運算式1\n&#x2F;&#x2F; 2.2 如果條件為假，則執行運算式2\n\n&#x2F;&#x2F; 3. 驗證\n&#x2F;&#x2F; 5 &gt; 3 ? &#39;真的&#39; : &#39;假的&#39;\nconsole.log(5 &lt; 3 ? &#39;真的&#39; : &#39;假的&#39;)\n\n&#x2F;&#x2F; let age &#x3D; 18 \n&#x2F;&#x2F; age &#x3D; age + 1\n&#x2F;&#x2F;  age++\n\n&#x2F;&#x2F; 1. 用戶輸入 \nlet num &#x3D; prompt(&#39;請您輸入一個數字:&#39;)\n&#x2F;&#x2F; 2. 判斷輸出- 小於10才補0\n&#x2F;&#x2F; num &#x3D; num &lt; 10 ? 0 + num : num\nnum &#x3D; num &gt;&#x3D; 10 ? num : 0 + num\nalert(num)\n\nswitch語句（瞭解）使用場景： 適合於有多個條件的時候，也屬於分支語句，大部分情況下和 if多分支語句 功能相同\n注意：\n\nswitch case語句一般用於等值判斷, if適合於區間判斷\nswitchcase一般需要配合break關鍵字使用 沒有break會造成case穿透\nif 多分支語句開發要比switch更重要，使用也更多\n\n例如：\n&#x2F;&#x2F; switch分支語句\n&#x2F;&#x2F; 1. 語法\n&#x2F;&#x2F; switch (運算式) &#123;\n&#x2F;&#x2F;   case 值1:\n&#x2F;&#x2F;     代碼1\n&#x2F;&#x2F;     break\n\n&#x2F;&#x2F;   case 值2:\n&#x2F;&#x2F;     代碼2\n&#x2F;&#x2F;     break\n&#x2F;&#x2F;   ...\n&#x2F;&#x2F;   default:\n&#x2F;&#x2F;     代碼n\n&#x2F;&#x2F; &#125;\n\n&lt;script&gt;\n  switch (2) &#123;\n    case 1:\n    console.log(&#39;您選擇的是1&#39;)\n    break  &#x2F;&#x2F; 退出switch\n    case 2:\n    console.log(&#39;您選擇的是2&#39;)\n    break  &#x2F;&#x2F; 退出switch\n    case 3:\n    console.log(&#39;您選擇的是3&#39;)\n    break  &#x2F;&#x2F; 退出switch\n    default:\n    console.log(&#39;沒有符合條件的&#39;)\n  &#125;\n&lt;&#x2F;script&gt;\n\n中斷點調試作用：學習時可以幫助更好的理解代碼運行，工作時可以更快找到bug\n流覽器打開調試介面\n\n按F12打開開發者工具\n點到原始程式碼一欄 （ sources ）\n選擇代碼檔\n\n中斷點：在某句代碼上加的標記就叫中斷點，當程式執行到這句有標記的代碼時會暫停下來\n迴圈語句使用場景：重複執行 指定的一段代碼，比如我們想要輸出10次 ‘我學的很棒’\n學習路徑：\n1.while迴圈\n2.for 迴圈（重點）\nwhile迴圈while :  在…. 期間， 所以 while迴圈 就是在滿足條件期間，重複執行某些代碼。\n語法：\nwhile (條件運算式) &#123;\n   &#x2F;&#x2F; 循環體    \n&#125;\n\n例如：\n&#x2F;&#x2F; while迴圈: 重複執行代碼\n\n&#x2F;&#x2F; 1. 需求: 利用迴圈重複列印3次 &#39;月薪過萬不是夢，畢業時候見英雄&#39;\nlet i &#x3D; 1\nwhile (i &lt;&#x3D; 3) &#123;\n  document.write(&#39;年薪過百不是夢，畢業時候見英雄~&lt;br&gt;&#39;)\n  i++   &#x2F;&#x2F; 這裡千萬不要忘了變數自增否則造成閉環\n&#125;\n\n迴圈三要素：\n1.初始值 （經常用變數）\n2.終止條件\n3.變數的變化量\n例如：\n&lt;script&gt;\n  &#x2F;&#x2F; &#x2F;&#x2F; 1. 變數的起始值\n  &#x2F;&#x2F; let i &#x3D; 1\n  &#x2F;&#x2F; &#x2F;&#x2F; 2. 終止條件\n  &#x2F;&#x2F; while (i &lt;&#x3D; 3) &#123;\n  &#x2F;&#x2F;   document.write(&#39;我要迴圈三次 &lt;br&gt;&#39;)\n  &#x2F;&#x2F;   &#x2F;&#x2F; 3. 變數的變化量\n  &#x2F;&#x2F;   i++\n  &#x2F;&#x2F; &#125;\n  &#x2F;&#x2F; 1. 變數的起始值\n  let end &#x3D; +prompt(&#39;請輸入次數:&#39;)\nlet i &#x3D; 1\n&#x2F;&#x2F; 2. 終止條件\nwhile (i &lt;&#x3D; end) &#123;\n  document.write(&#39;我要迴圈三次 &lt;br&gt;&#39;)\n  &#x2F;&#x2F; 3. 變數的變化量\n  i++\n&#125;\n\n&lt;&#x2F;script&gt;\n\n中止迴圈break   中止整個迴圈，一般用於結果已經得到, 後續的迴圈不需要的時候可以使用（提高效率）  \ncontinue  中止本次迴圈，一般用於排除或者跳過某一個選項的時候\n&lt;script&gt;\n    &#x2F;&#x2F; let i &#x3D; 1\n    &#x2F;&#x2F; while (i &lt;&#x3D; 5) &#123;\n    &#x2F;&#x2F;   console.log(i)\n    &#x2F;&#x2F;   if (i &#x3D;&#x3D;&#x3D; 3) &#123;\n    &#x2F;&#x2F;     break  &#x2F;&#x2F; 退出迴圈\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F;   i++\n\n    &#x2F;&#x2F; &#125;\n\n    let i &#x3D; 1\n    while (i &lt;&#x3D; 5) &#123;\n      if (i &#x3D;&#x3D;&#x3D; 3) &#123;\n        i++\n        continue\n      &#125;\n      console.log(i)\n      i++\n\n    &#125;\n  &lt;&#x2F;script&gt;\n\n無限迴圈1.while(true) 來構造“無限”迴圈，需要使用break退出迴圈。（常用）\n2.for(;;) 也可以來構造“無限”迴圈，同樣需要使用break退出迴圈。\n&#x2F;&#x2F; 無限迴圈  \n&#x2F;&#x2F; 需求： 頁面會一直彈窗詢問你愛我嗎？\n&#x2F;&#x2F; (1). 如果用戶輸入的是 &#39;愛&#39;，則退出彈窗\n&#x2F;&#x2F; (2). 否則一直彈窗詢問\n\n&#x2F;&#x2F; 1. while(true) 無限迴圈\n&#x2F;&#x2F; while (true) &#123;\n&#x2F;&#x2F;   let love &#x3D; prompt(&#39;你愛我嗎?&#39;)\n&#x2F;&#x2F;   if (love &#x3D;&#x3D;&#x3D; &#39;愛&#39;) &#123;\n&#x2F;&#x2F;     break\n&#x2F;&#x2F;   &#125;\n&#x2F;&#x2F; &#125;\n\n&#x2F;&#x2F; 2. for(;;) 無限迴圈\nfor (; ;) &#123;\n  let love &#x3D; prompt(&#39;你愛我嗎?&#39;)\n  if (love &#x3D;&#x3D;&#x3D; &#39;愛&#39;) &#123;\n    break\n  &#125;\n&#125;\n\n綜合案例-ATM存取款機分析：\n①：提示輸入框寫到迴圈裡面（無限迴圈）\n②：用戶輸入4則退出迴圈 break\n③：提前準備一個金額預先存儲一個數額 money\n④：根據輸入不同的值，做不同的操作\n (1)  取錢則是減法操作， 存錢則是加法操作，查看餘額則是直接顯示金額\n\n (2) 可以使用 if else if 多分支 來執行不同的操作\n\n完整代碼：\n&lt;script&gt;\n  &#x2F;&#x2F; 1. 開始迴圈 輸入框寫到 迴圈裡面\n  &#x2F;&#x2F; 3. 準備一個總的金額\n  let money &#x3D; 100\nwhile (true) &#123;\n  let re &#x3D; +prompt(&#96;\n請您選擇操作：\n1.存錢\n2.取錢\n3.查看餘額\n4.退出\n&#96;)\n  &#x2F;&#x2F; 2. 如果用戶輸入的 4 則退出迴圈， break  寫到if 裡面，沒有寫到switch裡面， 因為4需要break退出迴圈\n  if (re &#x3D;&#x3D;&#x3D; 4) &#123;\n    break\n  &#125;\n  &#x2F;&#x2F; 4. 根據輸入做操作\n  switch (re) &#123;\n    case 1:\n      &#x2F;&#x2F; 存錢\n      let cun &#x3D; +prompt(&#39;請輸入存款金額&#39;)\n      money &#x3D; money + cun\n      break\n      case 2:\n      &#x2F;&#x2F; 存錢\n      let qu &#x3D; +prompt(&#39;請輸入取款金額&#39;)\n      money &#x3D; money - qu\n      break\n      case 3:\n      &#x2F;&#x2F; 存錢\n      alert(&#96;您的銀行卡餘額是$&#123;money&#125;&#96;)\n      break\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;\n\n\n\n\n\n\n\n\n\n","slug":"02JavaScript 基礎 - 第2天","date":"2023-03-18T16:00:00.000Z","categories_index":"","tags_index":"javaScript","author_index":"Hsu's Blog"},{"id":"1517f5e85f0012c69f183e7960bb5313","title":"JavaScript 基礎- 第1天","content":"\n\n\n\n\n\n\n\n\n瞭解變數、資料類型、運算子等基礎概念，能夠實現資料類型的轉換，結合四則運算體會如何程式設計。\n\n體會現實世界中的事物與電腦的關係\n理解什麼是資料並知道資料的分類\n理解變數存儲資料的“容器”\n掌握常見運算子的使用，瞭解優先順序關係\n知道 JavaScript 資料類型隱式轉換的特徵\n\n介紹\n\n\n\n\n\n\n\n\n掌握 JavaScript 的引入方式，初步認識 JavaScript 的作用\n引入方式JavaScript 程式不能獨立運行，它需要被嵌入 HTML 中，然後流覽器才能執行 JavaScript 代碼。通過 script 標籤將 JavaScript 代碼引入到 HTML 中，有兩種方式：\n內部方式通過 script 標籤包裹 JavaScript 代碼\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 內聯形式：通過 script 標籤包裹 JavaScript 代碼 --&gt;\n  &lt;script&gt;\n    alert(&#39;嗨，前端技術！&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n外部形式一般將 JavaScript 代碼寫在獨立的以 .js 結尾的檔中，然後通過 script 標籤的 src 屬性引入\n&#x2F;&#x2F; demo.js\ndocument.write(&#39;嗨，前端技術！&#39;)\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 外部形式：通過 script 的 src 屬性引入獨立的 .js 文件 --&gt;\n  &lt;script src&#x3D;&quot;demo.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n如果 script 標籤使用 src 屬性引入了某 .js 檔，那麼 標籤的代碼會被忽略！！！如下代碼所示：\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 外部形式：通過 script 的 src 屬性引入獨立的 .js 文件 --&gt;\n  &lt;script src&#x3D;&quot;demo.js&quot;&gt;\n    &#x2F;&#x2F; 此處的代碼會被忽略掉！！！！\n    alert(666);  \n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注釋和結束符通過注釋可以遮罩代碼被執行或者添加備註資訊，JavaScript 支援兩種形式注釋語法：\n單行注釋使用 //  注釋單行代碼\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 注釋&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt;\n    &#x2F;&#x2F; 這種是單行注釋的語法\n    &#x2F;&#x2F; 一次只能注釋一行\n    &#x2F;&#x2F; 可以重複注釋\n    document.write(&#39;嗨，前端技術！&#39;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n多行注釋使用 /* */ 注釋多行代碼\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 注釋&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt;\n    &#x2F;* 這種的是多行注釋的語法 *&#x2F;\n    &#x2F;*\n      更常見的多行注釋是這種寫法\n      在些可以任意換行\n      多少行都可以\n      *&#x2F;\n    document.write(&#39;嗨，來學習前端！&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注：編輯器中單行注釋的快速鍵為 ctrl + /\n結束符在 JavaScript 中 ; 代表一段代碼的結束，多數情況下可以省略 ; 使用回車（enter）替代。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 結束符&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    alert(1);\n    alert(2);\n    alert(1)\n    alert(2)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n實際開發中有許多人主張書寫 JavaScript 代碼時省略結束符 ;\n輸入和輸出輸出和輸入也可理解為人和電腦的交互，使用者通過鍵盤、滑鼠等向電腦輸入資訊，電腦處理後再展示結果給用戶，這便是一次輸入和輸出的過程。\n舉例說明：如按鍵盤上的方向鍵，向上&#x2F;下鍵可以滾動頁面，按向上&#x2F;下鍵這個動作叫作輸入，頁面發生了滾動了這便叫輸出。\n輸出JavaScript 可以接收用戶的輸入，然後再將輸入的結果輸出：\nalert()、document.wirte()\n以數字為例，向 alert() 或 document.write()輸入任意數位，他都會以彈窗形式展示（輸出）給用戶。\n輸入向 prompt() 輸入任意內容會以彈窗形式出現在流覽器中，一般提示使用者輸入一些內容。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 輸入輸出&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 1. 輸入的任意數位，都會以彈窗形式展示\n    document.write(&#39;要輸出的內容&#39;)\n    alert(&#39;要輸出的內容&#39;);\n\n    &#x2F;&#x2F; 2. 以彈窗形式提示用戶輸入姓名，注意這裡的文字使用英文的引號\n    prompt(&#39;請輸入您的姓名:&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n變數\n\n\n\n\n\n\n\n\n理解變數是電腦存儲資料的“容器”，掌握變數的聲明方式\n變數是電腦中用來存儲資料的“容器”，它可以讓電腦變得有記憶，通俗的理解變數就是使用【某個符號】來代表【某個具體的數值】（資料）\n&lt;script&gt;\n  &#x2F;&#x2F; x 符號代表了 5 這個數值\n  x &#x3D; 5\n  &#x2F;&#x2F; y 符號代表了 6 這個數值\n  y &#x3D; 6\n    \n  &#x2F;&#x2F;舉例： 在 JavaScript 中使用變數可以將某個資料（數值）記錄下來！\n\n  &#x2F;&#x2F; 將使用者輸入的內容保存在 num 這個變數（容器）中\n  num &#x3D; prompt(&#39;請輸入一數位!&#39;)\n\n  &#x2F;&#x2F; 通過 num 變數（容器）將使用者輸入的內容輸出出來\n  alert(num)\n  document.write(num)\n&lt;&#x2F;script&gt;\n\n聲明聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 聲明和賦值&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; let 變數名\n    &#x2F;&#x2F; 聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）\n    &#x2F;&#x2F; let 即關鍵字，所謂關鍵字是系統提供的專門用來聲明（定義）變數的詞語\n    &#x2F;&#x2F; age 即變數的名稱，也叫識別字\n    let age\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n關鍵字是 JavaScript 中內置的一些英文詞彙（單詞或縮寫），它們代表某些特定的含義，如 let 的含義是聲明變數的，看到 let  後就可想到這行代碼的意思是在聲明變數，如 let age; \nlet 和 var 都是 JavaScript 中的聲明變數的關鍵字，推薦使用 let 聲明變數！！！\n賦值聲明（定義）變數相當於創造了一個空的“容器”，通過賦值向這個容器中添加資料。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 聲明和賦值&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）\n    &#x2F;&#x2F; let 即關鍵字，所謂關鍵字是系統提供的專門用來聲明（定義）變數的詞語\n    &#x2F;&#x2F; age 即變數的名稱，也叫識別字\n    let age\n    &#x2F;&#x2F; 賦值，將 18 這個資料存入了 age 這個“容器”中\n    age &#x3D; 18\n    &#x2F;&#x2F; 這樣 age 的值就成了 18\n    document.write(age)\n    \n    &#x2F;&#x2F; 也可以聲明和賦值同時進行\n    let str &#x3D; &#39;hello world!&#39;\n    alert(str);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n關鍵字JavaScript 使用專門的關鍵字 let 和 var 來聲明（定義）變數，在使用時需要注意一些細節：\n以下是使用 let 時的注意事項：\n\n允許聲明和賦值同時進行\n不允許重複聲明\n允許同時聲明多個變數並賦值\nJavaScript 中內置的一些關鍵字不能被當做變數名\n\n以下是使用 var 時的注意事項：\n\n允許聲明和賦值同時進行\n允許重複聲明\n允許同時聲明多個變數並賦值\n\n大部分情況使用 let 和 var 區別不大，但是 let 相較 var 更嚴謹，因此推薦使用 let，後期會更進一步介紹二者間的區別。\n變數名命名規則關於變數的名稱（識別字）有一系列的規則需要遵守：\n\n只能是字母、數位、底線、$，且不能能數字開頭\n字母區分大小寫，如 Age 和 age 是不同的變數\nJavaScript 內部已佔用於單詞（關鍵字或保留字）不允許使用\n儘量保證變數具有一定的語義，見字知義\n\n注：所謂關鍵字是指 JavaScript 內部使用的詞語，如 let 和var，保留字是指 JavaScript 內部目前沒有使用的詞語，但是將來可能會使用詞語。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 變數名命名規則&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    let age &#x3D; 18 &#x2F;&#x2F; 正確\n    let age1 &#x3D; 18 &#x2F;&#x2F; 正確\n    let _age &#x3D; 18 &#x2F;&#x2F; 正確\n\n    &#x2F;&#x2F; let 1age &#x3D; 18; &#x2F;&#x2F; 錯誤，不可以數位開頭\n    let $age &#x3D; 18 &#x2F;&#x2F; 正確\n    let Age &#x3D; 24 &#x2F;&#x2F; 正確，它與小寫的 age 是不同的變數\n    &#x2F;&#x2F; let let &#x3D; 18; &#x2F;&#x2F; 錯誤，let 是關鍵字\n    let int &#x3D; 123 &#x2F;&#x2F; 不推薦，int 是保留字\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n常量概念：使用 const 聲明的變數稱為“常量”。\n使用場景：當某個變數永遠不會改變的時候，就可以使用 const 來聲明，而不是let。\n命名規範：和變數一致\nconst PI &#x3D; 3.14\n\n\n\n\n\n\n\n\n\n\n注意： 常量不允許重新賦值,聲明的時候必須賦值（初始化）\n資料類型\n\n\n\n\n\n\n\n\n電腦世界中的萬事成物都是資料。\n電腦程式可以處理大量的資料，為了方便資料的管理，將資料分成了不同的類型：\n注：通過 typeof 關鍵字檢測資料類型\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 檢測 1 是什麼類型資料，結果為 number\n    document.write(typeof 1)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n數數值型別即我們數學中學習到的數位，可以是整數、小數、正數、負數\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    let score &#x3D; 100 &#x2F;&#x2F; 正整數\n    let price &#x3D; 12.345 &#x2F;&#x2F; 小數\n    let temperature &#x3D; -40 &#x2F;&#x2F; 負數\n\n    document.write(typeof score) &#x2F;&#x2F; 結果為 number\n    document.write(typeof price) &#x2F;&#x2F; 結果為 number\n    document.write(typeof temperature) &#x2F;&#x2F; 結果為 number\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\nJavaScript 中的數數值型別與數學中的數字是一樣的，分為正數、負數、小數等。\n字串類型通過單引號（ &#39;&#39;） 、雙引號（ &quot;&quot;）或反引號包裹的資料都叫字串，單引號和雙引號沒有本質上的區別，推薦使用單引號。\n注意事項：\n\n無論單引號或是雙引號必須成對使用\n單引號&#x2F;雙引號可以互相嵌套，但是不以自已嵌套自已\n必要時可以使用轉義符 \\，輸出單引號或雙引號\n\n*範本字串-使用場景-拼接字串和變數、在沒有它之前，要拼接變數比較麻煩-語法    Ø &#96;&#96; (反引號)    Ø 在英文輸入模式下按鍵盤的tab鍵上方那個鍵（1左邊那個鍵）    Ø 內容拼接變數時，用 ${ } 包住變數\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    let user_name &#x3D; &#39;小徐&#39; &#x2F;&#x2F; 使用單引號\n    let gender &#x3D; &quot;男&quot; &#x2F;&#x2F; 使用雙引號\n    let str &#x3D; &#39;123&#39; &#x2F;&#x2F; 看上去是數字，但是用引號包裹了就成了字串了\n    let str1 &#x3D; &#39;&#39; &#x2F;&#x2F; 這種情況叫空字串\n    \n    documeent.write(typeof user_name) &#x2F;&#x2F; 結果為 string\n    documeent.write(typeof gender) &#x2F;&#x2F; 結果為 string\n    documeent.write(typeof str) &#x2F;&#x2F; 結果為 string\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n布林類型表示肯定或否定時在電腦中對應的是布林類型資料，它有兩個固定的值 true 和 false，表示肯定的資料用 true，表示否定的資料用 false。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F;  我帥不帥？回答 是 或 否\n    let isCool &#x3D; true &#x2F;&#x2F; 是的，帥死了！\n    isCool &#x3D; false &#x2F;&#x2F; 不，是個醜人！\n\n    document.write(typeof isCool) &#x2F;&#x2F; 結果為 boolean\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\nundefined未定義是比較特殊的類型，只有一個值 undefined，只聲明變數，不賦值的情況下，變數的預設值為 undefined，一般很少【直接】為某個變數賦值為 undefined。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 只聲明了變數，並末賦值\n    let tmp;\n    document.write(typeof tmp) &#x2F;&#x2F; 結果為 undefined\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注：JavaScript 中變數的值決定了變數的資料類型。\n類型轉換\n\n\n\n\n\n\n\n\n理解弱類型語言的特徵，掌握顯式類型轉換的方法\n在 JavaScript 中資料被分成了不同的類型，如數值、字串、布林值、undefined，在實際程式設計的過程中，不同資料類型之間存在著轉換的關係。\n隱式轉換某些運算子被執行時，系統內部自動將資料類型進行轉換，這種轉換稱為隱式轉換。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 隱式轉換&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;script&gt; \n    let num &#x3D; 13 &#x2F;&#x2F; 數值\n    let num2 &#x3D; &#39;2&#39; &#x2F;&#x2F; 字串\n\n    &#x2F;&#x2F; 結果為 132\n    &#x2F;&#x2F; 原因是將數值 num 轉換成了字串，相當於 &#39;13&#39;\n    &#x2F;&#x2F; 然後 + 將兩個字串拼接到了一起\n    console.log(num + num2)\n\n    &#x2F;&#x2F; 結果為 11\n    &#x2F;&#x2F; 原因是將字串 num2 轉換成了數值，相當於 2\n    &#x2F;&#x2F; 然後數值 13 減去 數值 2\n    console.log(num - num2)\n\n    let a &#x3D; prompt(&#39;請輸入一個數字&#39;)\n    let b &#x3D; prompt(&#39;請再輸入一個數字&#39;)\n\n    alert(a + b);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注：資料類型的隱式轉換是 JavaScript 的特徵，後續學習中還會遇到，目前先需要理解什麼是隱式轉換。\n補充介紹範本字串的拼接的使用\n顯式轉換編寫程式時過度依靠系統內部的隱式轉換是不嚴禁的，因為隱式轉換規律並不清晰，大多是靠經驗總結的規律。為了避免因隱式轉換帶來的問題，通常根邏輯需要對資料進行顯示轉換。\nNumber通過 Number 顯示轉換成數值類型，當轉換失敗時結果為 NaN（Not a Number）即不是一個數字。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 隱式轉換&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;script&gt;\n    let t &#x3D; &#39;12&#39;\n    let f &#x3D; 8\n\n    &#x2F;&#x2F; 顯式將字串 12 轉換成數值 12\n    t &#x3D; Number(t)\n\n    &#x2F;&#x2F; 檢測轉換後的類型\n    &#x2F;&#x2F; console.log(typeof t);\n    console.log(t + f) &#x2F;&#x2F; 結果為 20\n\n    &#x2F;&#x2F; 並不是所有的值都可以被轉成數值類型\n    let str &#x3D; &#39;hello&#39;\n    &#x2F;&#x2F; 將 hello 轉成數值是不現實的，當無法轉換成\n    &#x2F;&#x2F; 數值時，得到的結果為 NaN （Not a Number）\n    console.log(Number(str))\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n","slug":"01JavaScript 基礎 - 第1天","date":"2023-03-17T16:00:00.000Z","categories_index":"","tags_index":"javaScript","author_index":"Hsu's Blog"},{"id":"71434f06eb628cf7a92f4f3d96cc0406","title":"前端之路","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"00hello-world","date":"2022-12-31T16:00:00.000Z","categories_index":"","tags_index":"","author_index":"Hsu's Blog"}]