[{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\ntitle:JavaScript 基礎- 第1天tag:JavaScript\n\n\n\n\n\n\n\n\n瞭解變數、資料類型、運算子等基礎概念，能夠實現資料類型的轉換，結合四則運算體會如何程式設計。\n\n體會現實世界中的事物與電腦的關係\n理解什麼是資料並知道資料的分類\n理解變數存儲資料的“容器”\n掌握常見運算子的使用，瞭解優先順序關係\n知道 JavaScript 資料類型隱式轉換的特徵\n\n介紹\n\n\n\n\n\n\n\n\n掌握 JavaScript 的引入方式，初步認識 JavaScript 的作用\n引入方式JavaScript 程式不能獨立運行，它需要被嵌入 HTML 中，然後流覽器才能執行 JavaScript 代碼。通過 script 標籤將 JavaScript 代碼引入到 HTML 中，有兩種方式：\n內部方式通過 script 標籤包裹 JavaScript 代碼\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 內聯形式：通過 script 標籤包裹 JavaScript 代碼 --&gt;\n  &lt;script&gt;\n    alert(&#39;嗨，歡迎來傳智播學習前端技術！&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n外部形式一般將 JavaScript 代碼寫在獨立的以 .js 結尾的檔中，然後通過 script 標籤的 src 屬性引入\n&#x2F;&#x2F; demo.js\ndocument.write(&#39;嗨，歡迎來傳智播學習前端技術！&#39;)\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 外部形式：通過 script 的 src 屬性引入獨立的 .js 文件 --&gt;\n  &lt;script src&#x3D;&quot;demo.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n如果 script 標籤使用 src 屬性引入了某 .js 檔，那麼 標籤的代碼會被忽略！！！如下代碼所示：\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 引入方式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;!-- 外部形式：通過 script 的 src 屬性引入獨立的 .js 文件 --&gt;\n  &lt;script src&#x3D;&quot;demo.js&quot;&gt;\n    &#x2F;&#x2F; 此處的代碼會被忽略掉！！！！\n    alert(666);  \n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注釋和結束符通過注釋可以遮罩代碼被執行或者添加備註資訊，JavaScript 支援兩種形式注釋語法：\n單行注釋使用 //  注釋單行代碼\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 注釋&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt;\n    &#x2F;&#x2F; 這種是單行注釋的語法\n    &#x2F;&#x2F; 一次只能注釋一行\n    &#x2F;&#x2F; 可以重複注釋\n    document.write(&#39;嗨，歡迎來傳智播學習前端技術！&#39;);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n多行注釋使用 /* */ 注釋多行代碼\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 注釋&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt;\n    &#x2F;* 這種的是多行注釋的語法 *&#x2F;\n    &#x2F;*\n      更常見的多行注釋是這種寫法\n      在些可以任意換行\n      多少行都可以\n      *&#x2F;\n    document.write(&#39;嗨，歡迎來傳智播學習前端技術！&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注：編輯器中單行注釋的快速鍵為 ctrl + /\n結束符在 JavaScript 中 ; 代表一段代碼的結束，多數情況下可以省略 ; 使用回車（enter）替代。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 結束符&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    alert(1);\n    alert(2);\n    alert(1)\n    alert(2)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n實際開發中有許多人主張書寫 JavaScript 代碼時省略結束符 ;\n輸入和輸出輸出和輸入也可理解為人和電腦的交互，使用者通過鍵盤、滑鼠等向電腦輸入資訊，電腦處理後再展示結果給用戶，這便是一次輸入和輸出的過程。\n舉例說明：如按鍵盤上的方向鍵，向上&#x2F;下鍵可以滾動頁面，按向上&#x2F;下鍵這個動作叫作輸入，頁面發生了滾動了這便叫輸出。\n輸出JavaScript 可以接收用戶的輸入，然後再將輸入的結果輸出：\nalert()、document.wirte()\n以數字為例，向 alert() 或 document.write()輸入任意數位，他都會以彈窗形式展示（輸出）給用戶。\n輸入向 prompt() 輸入任意內容會以彈窗形式出現在流覽器中，一般提示使用者輸入一些內容。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 輸入輸出&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 1. 輸入的任意數位，都會以彈窗形式展示\n    document.write(&#39;要輸出的內容&#39;)\n    alert(&#39;要輸出的內容&#39;);\n\n    &#x2F;&#x2F; 2. 以彈窗形式提示用戶輸入姓名，注意這裡的文字使用英文的引號\n    prompt(&#39;請輸入您的姓名:&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n變數\n\n\n\n\n\n\n\n\n理解變數是電腦存儲資料的“容器”，掌握變數的聲明方式\n變數是電腦中用來存儲資料的“容器”，它可以讓電腦變得有記憶，通俗的理解變數就是使用【某個符號】來代表【某個具體的數值】（資料）\n&lt;script&gt;\n  &#x2F;&#x2F; x 符號代表了 5 這個數值\n  x &#x3D; 5\n  &#x2F;&#x2F; y 符號代表了 6 這個數值\n  y &#x3D; 6\n    \n  &#x2F;&#x2F;舉例： 在 JavaScript 中使用變數可以將某個資料（數值）記錄下來！\n\n  &#x2F;&#x2F; 將使用者輸入的內容保存在 num 這個變數（容器）中\n  num &#x3D; prompt(&#39;請輸入一數位!&#39;)\n\n  &#x2F;&#x2F; 通過 num 變數（容器）將使用者輸入的內容輸出出來\n  alert(num)\n  document.write(num)\n&lt;&#x2F;script&gt;\n\n聲明聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 聲明和賦值&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; let 變數名\n    &#x2F;&#x2F; 聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）\n    &#x2F;&#x2F; let 即關鍵字，所謂關鍵字是系統提供的專門用來聲明（定義）變數的詞語\n    &#x2F;&#x2F; age 即變數的名稱，也叫識別字\n    let age\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n關鍵字是 JavaScript 中內置的一些英文詞彙（單詞或縮寫），它們代表某些特定的含義，如 let 的含義是聲明變數的，看到 let  後就可想到這行代碼的意思是在聲明變數，如 let age; \nlet 和 var 都是 JavaScript 中的聲明變數的關鍵字，推薦使用 let 聲明變數！！！\n賦值聲明（定義）變數相當於創造了一個空的“容器”，通過賦值向這個容器中添加資料。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 聲明和賦值&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 聲明(定義)變數有兩部分構成：聲明關鍵字、變數名（標識）\n    &#x2F;&#x2F; let 即關鍵字，所謂關鍵字是系統提供的專門用來聲明（定義）變數的詞語\n    &#x2F;&#x2F; age 即變數的名稱，也叫識別字\n    let age\n    &#x2F;&#x2F; 賦值，將 18 這個資料存入了 age 這個“容器”中\n    age &#x3D; 18\n    &#x2F;&#x2F; 這樣 age 的值就成了 18\n    document.write(age)\n    \n    &#x2F;&#x2F; 也可以聲明和賦值同時進行\n    let str &#x3D; &#39;hello world!&#39;\n    alert(str);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n關鍵字JavaScript 使用專門的關鍵字 let 和 var 來聲明（定義）變數，在使用時需要注意一些細節：\n以下是使用 let 時的注意事項：\n\n允許聲明和賦值同時進行\n不允許重複聲明\n允許同時聲明多個變數並賦值\nJavaScript 中內置的一些關鍵字不能被當做變數名\n\n以下是使用 var 時的注意事項：\n\n允許聲明和賦值同時進行\n允許重複聲明\n允許同時聲明多個變數並賦值\n\n大部分情況使用 let 和 var 區別不大，但是 let 相較 var 更嚴謹，因此推薦使用 let，後期會更進一步介紹二者間的區別。\n變數名命名規則關於變數的名稱（識別字）有一系列的規則需要遵守：\n\n只能是字母、數位、底線、$，且不能能數字開頭\n字母區分大小寫，如 Age 和 age 是不同的變數\nJavaScript 內部已佔用於單詞（關鍵字或保留字）不允許使用\n儘量保證變數具有一定的語義，見字知義\n\n注：所謂關鍵字是指 JavaScript 內部使用的詞語，如 let 和var，保留字是指 JavaScript 內部目前沒有使用的詞語，但是將來可能會使用詞語。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 變數名命名規則&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    let age &#x3D; 18 &#x2F;&#x2F; 正確\n    let age1 &#x3D; 18 &#x2F;&#x2F; 正確\n    let _age &#x3D; 18 &#x2F;&#x2F; 正確\n\n    &#x2F;&#x2F; let 1age &#x3D; 18; &#x2F;&#x2F; 錯誤，不可以數位開頭\n    let $age &#x3D; 18 &#x2F;&#x2F; 正確\n    let Age &#x3D; 24 &#x2F;&#x2F; 正確，它與小寫的 age 是不同的變數\n    &#x2F;&#x2F; let let &#x3D; 18; &#x2F;&#x2F; 錯誤，let 是關鍵字\n    let int &#x3D; 123 &#x2F;&#x2F; 不推薦，int 是保留字\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n常量概念：使用 const 聲明的變數稱為“常量”。\n使用場景：當某個變數永遠不會改變的時候，就可以使用 const 來聲明，而不是let。\n命名規範：和變數一致\nconst PI &#x3D; 3.14\n\n\n\n\n\n\n\n\n\n\n注意： 常量不允許重新賦值,聲明的時候必須賦值（初始化）\n資料類型\n\n\n\n\n\n\n\n\n電腦世界中的萬事成物都是資料。\n電腦程式可以處理大量的資料，為了方便資料的管理，將資料分成了不同的類型：\n注：通過 typeof 關鍵字檢測資料類型\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 檢測 1 是什麼類型資料，結果為 number\n    document.write(typeof 1)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n數數值型別即我們數學中學習到的數位，可以是整數、小數、正數、負數\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    let score &#x3D; 100 &#x2F;&#x2F; 正整數\n    let price &#x3D; 12.345 &#x2F;&#x2F; 小數\n    let temperature &#x3D; -40 &#x2F;&#x2F; 負數\n\n    document.write(typeof score) &#x2F;&#x2F; 結果為 number\n    document.write(typeof price) &#x2F;&#x2F; 結果為 number\n    document.write(typeof temperature) &#x2F;&#x2F; 結果為 number\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\nJavaScript 中的數數值型別與數學中的數字是一樣的，分為正數、負數、小數等。\n字串類型通過單引號（ &#39;&#39;） 、雙引號（ &quot;&quot;）或反引號包裹的資料都叫字串，單引號和雙引號沒有本質上的區別，推薦使用單引號。\n注意事項：\n\n無論單引號或是雙引號必須成對使用\n單引號&#x2F;雙引號可以互相嵌套，但是不以自已嵌套自已\n必要時可以使用轉義符 \\，輸出單引號或雙引號\n\n*範本字串-使用場景-拼接字串和變數、在沒有它之前，要拼接變數比較麻煩-語法    Ø &#96;&#96; (反引號)    Ø 在英文輸入模式下按鍵盤的tab鍵上方那個鍵（1左邊那個鍵）    Ø 內容拼接變數時，用 ${ } 包住變數\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    let user_name &#x3D; &#39;小明&#39; &#x2F;&#x2F; 使用單引號\n    let gender &#x3D; &quot;男&quot; &#x2F;&#x2F; 使用雙引號\n    let str &#x3D; &#39;123&#39; &#x2F;&#x2F; 看上去是數字，但是用引號包裹了就成了字串了\n    let str1 &#x3D; &#39;&#39; &#x2F;&#x2F; 這種情況叫空字串\n    \n    documeent.write(typeof user_name) &#x2F;&#x2F; 結果為 string\n    documeent.write(typeof gender) &#x2F;&#x2F; 結果為 string\n    documeent.write(typeof str) &#x2F;&#x2F; 結果為 string\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n布林類型表示肯定或否定時在電腦中對應的是布林類型資料，它有兩個固定的值 true 和 false，表示肯定的資料用 true，表示否定的資料用 false。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F;  pink老師帥不帥？回答 是 或 否\n    let isCool &#x3D; true &#x2F;&#x2F; 是的，摔死了！\n    isCool &#x3D; false &#x2F;&#x2F; 不，套馬杆的漢子！\n\n    document.write(typeof isCool) &#x2F;&#x2F; 結果為 boolean\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\nundefined未定義是比較特殊的類型，只有一個值 undefined，只聲明變數，不賦值的情況下，變數的預設值為 undefined，一般很少【直接】為某個變數賦值為 undefined。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 資料類型&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  \n  &lt;script&gt; \n    &#x2F;&#x2F; 只聲明了變數，並末賦值\n    let tmp;\n    document.write(typeof tmp) &#x2F;&#x2F; 結果為 undefined\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注：JavaScript 中變數的值決定了變數的資料類型。\n類型轉換\n\n\n\n\n\n\n\n\n理解弱類型語言的特徵，掌握顯式類型轉換的方法\n在 JavaScript 中資料被分成了不同的類型，如數值、字串、布林值、undefined，在實際程式設計的過程中，不同資料類型之間存在著轉換的關係。\n隱式轉換某些運算子被執行時，系統內部自動將資料類型進行轉換，這種轉換稱為隱式轉換。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 隱式轉換&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;script&gt; \n    let num &#x3D; 13 &#x2F;&#x2F; 數值\n    let num2 &#x3D; &#39;2&#39; &#x2F;&#x2F; 字串\n\n    &#x2F;&#x2F; 結果為 132\n    &#x2F;&#x2F; 原因是將數值 num 轉換成了字串，相當於 &#39;13&#39;\n    &#x2F;&#x2F; 然後 + 將兩個字串拼接到了一起\n    console.log(num + num2)\n\n    &#x2F;&#x2F; 結果為 11\n    &#x2F;&#x2F; 原因是將字串 num2 轉換成了數值，相當於 2\n    &#x2F;&#x2F; 然後數值 13 減去 數值 2\n    console.log(num - num2)\n\n    let a &#x3D; prompt(&#39;請輸入一個數字&#39;)\n    let b &#x3D; prompt(&#39;請再輸入一個數字&#39;)\n\n    alert(a + b);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注：資料類型的隱式轉換是 JavaScript 的特徵，後續學習中還會遇到，目前先需要理解什麼是隱式轉換。\n補充介紹範本字串的拼接的使用\n顯式轉換編寫程式時過度依靠系統內部的隱式轉換是不嚴禁的，因為隱式轉換規律並不清晰，大多是靠經驗總結的規律。為了避免因隱式轉換帶來的問題，通常根邏輯需要對資料進行顯示轉換。\nNumber通過 Number 顯示轉換成數值類型，當轉換失敗時結果為 NaN（Not a Number）即不是一個數字。\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript 基礎 - 隱式轉換&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;script&gt;\n    let t &#x3D; &#39;12&#39;\n    let f &#x3D; 8\n\n    &#x2F;&#x2F; 顯式將字串 12 轉換成數值 12\n    t &#x3D; Number(t)\n\n    &#x2F;&#x2F; 檢測轉換後的類型\n    &#x2F;&#x2F; console.log(typeof t);\n    console.log(t + f) &#x2F;&#x2F; 結果為 20\n\n    &#x2F;&#x2F; 並不是所有的值都可以被轉成數值類型\n    let str &#x3D; &#39;hello&#39;\n    &#x2F;&#x2F; 將 hello 轉成數值是不現實的，當無法轉換成\n    &#x2F;&#x2F; 數值時，得到的結果為 NaN （Not a Number）\n    console.log(Number(str))\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n","slug":"hello-world copy","date":"2023-03-20T14:31:39.724Z","categories_index":"","tags_index":"","author_index":"Hsu's Blog"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\ntitle:前端之路Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-03-20T13:36:33.800Z","categories_index":"","tags_index":"","author_index":"Hsu's Blog"}]